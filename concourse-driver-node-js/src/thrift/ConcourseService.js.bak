//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;

const data_ttypes = require('./data_types');
const shared_ttypes = require('./shared_types');
const exceptions_ttypes = require('./exceptions_types');
const complex_ttypes = require('./complex_types');


const ttypes = require('./concourse_types');
//HELPER FUNCTIONS AND STRUCTURES

const ConcourseService_abort_args = class {
  constructor(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_abort_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_abort_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_abort_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_addKeyValue_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_addKeyValue_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValue_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_addKeyValueRecord_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_addKeyValueRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_addKeyValueRecords_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readI64();
            this.records.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter4 in this.records) {
        if (this.records.hasOwnProperty(iter4)) {
          iter4 = this.records[iter4];
          output.writeI64(iter4);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_addKeyValueRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp36 = input.readMapBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let key8 = null;
            let val9 = null;
            key8 = input.readI64();
            val9 = input.readBool();
            this.success[key8] = val9;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.success));
      for (let kiter10 in this.success) {
        if (this.success.hasOwnProperty(kiter10)) {
          let viter11 = this.success[kiter10];
          output.writeI64(kiter10);
          output.writeBool(viter11);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp313 = input.readMapBegin();
          const _size12 = _rtmp313.size || 0;
          for (let _i14 = 0; _i14 < _size12; ++_i14) {
            let key15 = null;
            let val16 = null;
            key15 = input.readI64();
            val16 = input.readString();
            this.success[key15] = val16;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter17 in this.success) {
        if (this.success.hasOwnProperty(kiter17)) {
          let viter18 = this.success[kiter17];
          output.writeI64(kiter17);
          output.writeString(viter18);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecordStart_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStart_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp320 = input.readMapBegin();
          const _size19 = _rtmp320.size || 0;
          for (let _i21 = 0; _i21 < _size19; ++_i21) {
            let key22 = null;
            let val23 = null;
            key22 = input.readI64();
            val23 = input.readString();
            this.success[key22] = val23;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter24 in this.success) {
        if (this.success.hasOwnProperty(kiter24)) {
          let viter25 = this.success[kiter24];
          output.writeI64(kiter24);
          output.writeString(viter25);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecordStartstr_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp327 = input.readMapBegin();
          const _size26 = _rtmp327.size || 0;
          for (let _i28 = 0; _i28 < _size26; ++_i28) {
            let key29 = null;
            let val30 = null;
            key29 = input.readI64();
            val30 = input.readString();
            this.success[key29] = val30;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter31 in this.success) {
        if (this.success.hasOwnProperty(kiter31)) {
          let viter32 = this.success[kiter31];
          output.writeI64(kiter31);
          output.writeString(viter32);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecordStartEnd_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartEnd_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp334 = input.readMapBegin();
          const _size33 = _rtmp334.size || 0;
          for (let _i35 = 0; _i35 < _size33; ++_i35) {
            let key36 = null;
            let val37 = null;
            key36 = input.readI64();
            val37 = input.readString();
            this.success[key36] = val37;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter38 in this.success) {
        if (this.success.hasOwnProperty(kiter38)) {
          let viter39 = this.success[kiter38];
          output.writeI64(kiter38);
          output.writeString(viter39);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecordStartstrEndstr_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstrEndstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp341 = input.readMapBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let key43 = null;
            let val44 = null;
            key43 = input.readI64();
            val44 = input.readString();
            this.success[key43] = val44;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter45 in this.success) {
        if (this.success.hasOwnProperty(kiter45)) {
          let viter46 = this.success[kiter45];
          output.writeI64(kiter45);
          output.writeString(viter46);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp348 = input.readMapBegin();
          const _size47 = _rtmp348.size || 0;
          for (let _i49 = 0; _i49 < _size47; ++_i49) {
            let key50 = null;
            let val51 = null;
            key50 = input.readI64();
            val51 = input.readString();
            this.success[key50] = val51;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter52 in this.success) {
        if (this.success.hasOwnProperty(kiter52)) {
          let viter53 = this.success[kiter52];
          output.writeI64(kiter52);
          output.writeString(viter53);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecordStart_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp355 = input.readMapBegin();
          const _size54 = _rtmp355.size || 0;
          for (let _i56 = 0; _i56 < _size54; ++_i56) {
            let key57 = null;
            let val58 = null;
            key57 = input.readI64();
            val58 = input.readString();
            this.success[key57] = val58;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter59 in this.success) {
        if (this.success.hasOwnProperty(kiter59)) {
          let viter60 = this.success[kiter59];
          output.writeI64(kiter59);
          output.writeString(viter60);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecordStartstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp362 = input.readMapBegin();
          const _size61 = _rtmp362.size || 0;
          for (let _i63 = 0; _i63 < _size61; ++_i63) {
            let key64 = null;
            let val65 = null;
            key64 = input.readI64();
            val65 = input.readString();
            this.success[key64] = val65;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter66 in this.success) {
        if (this.success.hasOwnProperty(kiter66)) {
          let viter67 = this.success[kiter66];
          output.writeI64(kiter66);
          output.writeString(viter67);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecordStartEnd_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp369 = input.readMapBegin();
          const _size68 = _rtmp369.size || 0;
          for (let _i70 = 0; _i70 < _size68; ++_i70) {
            let key71 = null;
            let val72 = null;
            key71 = input.readI64();
            val72 = input.readString();
            this.success[key71] = val72;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter73 in this.success) {
        if (this.success.hasOwnProperty(kiter73)) {
          let viter74 = this.success[kiter73];
          output.writeI64(kiter73);
          output.writeString(viter74);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecordStartstrEndstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_auditKeyRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp376 = input.readMapBegin();
          const _size75 = _rtmp376.size || 0;
          for (let _i77 = 0; _i77 < _size75; ++_i77) {
            let key78 = null;
            let val79 = null;
            key78 = input.readI64();
            val79 = input.readString();
            this.success[key78] = val79;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter80 in this.success) {
        if (this.success.hasOwnProperty(kiter80)) {
          let viter81 = this.success[kiter80];
          output.writeI64(kiter80);
          output.writeString(viter81);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp383 = input.readMapBegin();
          const _size82 = _rtmp383.size || 0;
          for (let _i84 = 0; _i84 < _size82; ++_i84) {
            let key85 = null;
            let val86 = null;
            key85 = new data_ttypes.TObject();
            key85.read(input);
            val86 = [];
            const _rtmp388 = input.readSetBegin();
            const _size87 = _rtmp388.size || 0;
            for (let _i89 = 0; _i89 < _size87; ++_i89) {
              let elem90 = null;
              elem90 = input.readI64();
              val86.push(elem90);
            }
            input.readSetEnd();
            this.success[key85] = val86;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter91 in this.success) {
        if (this.success.hasOwnProperty(kiter91)) {
          let viter92 = this.success[kiter91];
          kiter91.write(output);
          output.writeSetBegin(Thrift.Type.I64, viter92.length);
          for (let iter93 in viter92) {
            if (viter92.hasOwnProperty(iter93)) {
              iter93 = viter92[iter93];
              output.writeI64(iter93);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeys_args = class {
  constructor(args) {
    this.keys = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp395 = input.readListBegin();
          const _size94 = _rtmp395.size || 0;
          for (let _i96 = 0; _i96 < _size94; ++_i96) {
            let elem97 = null;
            elem97 = input.readString();
            this.keys.push(elem97);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeys_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter98 in this.keys) {
        if (this.keys.hasOwnProperty(iter98)) {
          iter98 = this.keys[iter98];
          output.writeString(iter98);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeys_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3100 = input.readMapBegin();
          const _size99 = _rtmp3100.size || 0;
          for (let _i101 = 0; _i101 < _size99; ++_i101) {
            let key102 = null;
            let val103 = null;
            key102 = input.readString();
            val103 = {};
            const _rtmp3105 = input.readMapBegin();
            const _size104 = _rtmp3105.size || 0;
            for (let _i106 = 0; _i106 < _size104; ++_i106) {
              let key107 = null;
              let val108 = null;
              key107 = new data_ttypes.TObject();
              key107.read(input);
              val108 = [];
              const _rtmp3110 = input.readSetBegin();
              const _size109 = _rtmp3110.size || 0;
              for (let _i111 = 0; _i111 < _size109; ++_i111) {
                let elem112 = null;
                elem112 = input.readI64();
                val108.push(elem112);
              }
              input.readSetEnd();
              val103[key107] = val108;
            }
            input.readMapEnd();
            this.success[key102] = val103;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeys_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter113 in this.success) {
        if (this.success.hasOwnProperty(kiter113)) {
          let viter114 = this.success[kiter113];
          output.writeString(kiter113);
          output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(viter114));
          for (let kiter115 in viter114) {
            if (viter114.hasOwnProperty(kiter115)) {
              let viter116 = viter114[kiter115];
              kiter115.write(output);
              output.writeSetBegin(Thrift.Type.I64, viter116.length);
              for (let iter117 in viter116) {
                if (viter116.hasOwnProperty(iter117)) {
                  iter117 = viter116[iter117];
                  output.writeI64(iter117);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3119 = input.readMapBegin();
          const _size118 = _rtmp3119.size || 0;
          for (let _i120 = 0; _i120 < _size118; ++_i120) {
            let key121 = null;
            let val122 = null;
            key121 = new data_ttypes.TObject();
            key121.read(input);
            val122 = [];
            const _rtmp3124 = input.readSetBegin();
            const _size123 = _rtmp3124.size || 0;
            for (let _i125 = 0; _i125 < _size123; ++_i125) {
              let elem126 = null;
              elem126 = input.readI64();
              val122.push(elem126);
            }
            input.readSetEnd();
            this.success[key121] = val122;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter127 in this.success) {
        if (this.success.hasOwnProperty(kiter127)) {
          let viter128 = this.success[kiter127];
          kiter127.write(output);
          output.writeSetBegin(Thrift.Type.I64, viter128.length);
          for (let iter129 in viter128) {
            if (viter128.hasOwnProperty(iter129)) {
              iter129 = viter128[iter129];
              output.writeI64(iter129);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3131 = input.readMapBegin();
          const _size130 = _rtmp3131.size || 0;
          for (let _i132 = 0; _i132 < _size130; ++_i132) {
            let key133 = null;
            let val134 = null;
            key133 = new data_ttypes.TObject();
            key133.read(input);
            val134 = [];
            const _rtmp3136 = input.readSetBegin();
            const _size135 = _rtmp3136.size || 0;
            for (let _i137 = 0; _i137 < _size135; ++_i137) {
              let elem138 = null;
              elem138 = input.readI64();
              val134.push(elem138);
            }
            input.readSetEnd();
            this.success[key133] = val134;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter139 in this.success) {
        if (this.success.hasOwnProperty(kiter139)) {
          let viter140 = this.success[kiter139];
          kiter139.write(output);
          output.writeSetBegin(Thrift.Type.I64, viter140.length);
          for (let iter141 in viter140) {
            if (viter140.hasOwnProperty(iter141)) {
              iter141 = viter140[iter141];
              output.writeI64(iter141);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeysTime_args = class {
  constructor(args) {
    this.keys = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3143 = input.readListBegin();
          const _size142 = _rtmp3143.size || 0;
          for (let _i144 = 0; _i144 < _size142; ++_i144) {
            let elem145 = null;
            elem145 = input.readString();
            this.keys.push(elem145);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeysTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter146 in this.keys) {
        if (this.keys.hasOwnProperty(iter146)) {
          iter146 = this.keys[iter146];
          output.writeString(iter146);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeysTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3148 = input.readMapBegin();
          const _size147 = _rtmp3148.size || 0;
          for (let _i149 = 0; _i149 < _size147; ++_i149) {
            let key150 = null;
            let val151 = null;
            key150 = input.readString();
            val151 = {};
            const _rtmp3153 = input.readMapBegin();
            const _size152 = _rtmp3153.size || 0;
            for (let _i154 = 0; _i154 < _size152; ++_i154) {
              let key155 = null;
              let val156 = null;
              key155 = new data_ttypes.TObject();
              key155.read(input);
              val156 = [];
              const _rtmp3158 = input.readSetBegin();
              const _size157 = _rtmp3158.size || 0;
              for (let _i159 = 0; _i159 < _size157; ++_i159) {
                let elem160 = null;
                elem160 = input.readI64();
                val156.push(elem160);
              }
              input.readSetEnd();
              val151[key155] = val156;
            }
            input.readMapEnd();
            this.success[key150] = val151;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeysTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter161 in this.success) {
        if (this.success.hasOwnProperty(kiter161)) {
          let viter162 = this.success[kiter161];
          output.writeString(kiter161);
          output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(viter162));
          for (let kiter163 in viter162) {
            if (viter162.hasOwnProperty(kiter163)) {
              let viter164 = viter162[kiter163];
              kiter163.write(output);
              output.writeSetBegin(Thrift.Type.I64, viter164.length);
              for (let iter165 in viter164) {
                if (viter164.hasOwnProperty(iter165)) {
                  iter165 = viter164[iter165];
                  output.writeI64(iter165);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeysTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3167 = input.readListBegin();
          const _size166 = _rtmp3167.size || 0;
          for (let _i168 = 0; _i168 < _size166; ++_i168) {
            let elem169 = null;
            elem169 = input.readString();
            this.keys.push(elem169);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeysTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter170 in this.keys) {
        if (this.keys.hasOwnProperty(iter170)) {
          iter170 = this.keys[iter170];
          output.writeString(iter170);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_browseKeysTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3172 = input.readMapBegin();
          const _size171 = _rtmp3172.size || 0;
          for (let _i173 = 0; _i173 < _size171; ++_i173) {
            let key174 = null;
            let val175 = null;
            key174 = input.readString();
            val175 = {};
            const _rtmp3177 = input.readMapBegin();
            const _size176 = _rtmp3177.size || 0;
            for (let _i178 = 0; _i178 < _size176; ++_i178) {
              let key179 = null;
              let val180 = null;
              key179 = new data_ttypes.TObject();
              key179.read(input);
              val180 = [];
              const _rtmp3182 = input.readSetBegin();
              const _size181 = _rtmp3182.size || 0;
              for (let _i183 = 0; _i183 < _size181; ++_i183) {
                let elem184 = null;
                elem184 = input.readI64();
                val180.push(elem184);
              }
              input.readSetEnd();
              val175[key179] = val180;
            }
            input.readMapEnd();
            this.success[key174] = val175;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeysTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter185 in this.success) {
        if (this.success.hasOwnProperty(kiter185)) {
          let viter186 = this.success[kiter185];
          output.writeString(kiter185);
          output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(viter186));
          for (let kiter187 in viter186) {
            if (viter186.hasOwnProperty(kiter187)) {
              let viter188 = viter186[kiter187];
              kiter187.write(output);
              output.writeSetBegin(Thrift.Type.I64, viter188.length);
              for (let iter189 in viter188) {
                if (viter188.hasOwnProperty(iter189)) {
                  iter189 = viter188[iter189];
                  output.writeI64(iter189);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3191 = input.readMapBegin();
          const _size190 = _rtmp3191.size || 0;
          for (let _i192 = 0; _i192 < _size190; ++_i192) {
            let key193 = null;
            let val194 = null;
            key193 = input.readI64();
            val194 = [];
            const _rtmp3196 = input.readSetBegin();
            const _size195 = _rtmp3196.size || 0;
            for (let _i197 = 0; _i197 < _size195; ++_i197) {
              let elem198 = null;
              elem198 = new data_ttypes.TObject();
              elem198.read(input);
              val194.push(elem198);
            }
            input.readSetEnd();
            this.success[key193] = val194;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter199 in this.success) {
        if (this.success.hasOwnProperty(kiter199)) {
          let viter200 = this.success[kiter199];
          output.writeI64(kiter199);
          output.writeSetBegin(Thrift.Type.STRUCT, viter200.length);
          for (let iter201 in viter200) {
            if (viter200.hasOwnProperty(iter201)) {
              iter201 = viter200[iter201];
              iter201.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecordStart_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3203 = input.readMapBegin();
          const _size202 = _rtmp3203.size || 0;
          for (let _i204 = 0; _i204 < _size202; ++_i204) {
            let key205 = null;
            let val206 = null;
            key205 = input.readI64();
            val206 = [];
            const _rtmp3208 = input.readSetBegin();
            const _size207 = _rtmp3208.size || 0;
            for (let _i209 = 0; _i209 < _size207; ++_i209) {
              let elem210 = null;
              elem210 = new data_ttypes.TObject();
              elem210.read(input);
              val206.push(elem210);
            }
            input.readSetEnd();
            this.success[key205] = val206;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter211 in this.success) {
        if (this.success.hasOwnProperty(kiter211)) {
          let viter212 = this.success[kiter211];
          output.writeI64(kiter211);
          output.writeSetBegin(Thrift.Type.STRUCT, viter212.length);
          for (let iter213 in viter212) {
            if (viter212.hasOwnProperty(iter213)) {
              iter213 = viter212[iter213];
              iter213.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecordStartstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3215 = input.readMapBegin();
          const _size214 = _rtmp3215.size || 0;
          for (let _i216 = 0; _i216 < _size214; ++_i216) {
            let key217 = null;
            let val218 = null;
            key217 = input.readI64();
            val218 = [];
            const _rtmp3220 = input.readSetBegin();
            const _size219 = _rtmp3220.size || 0;
            for (let _i221 = 0; _i221 < _size219; ++_i221) {
              let elem222 = null;
              elem222 = new data_ttypes.TObject();
              elem222.read(input);
              val218.push(elem222);
            }
            input.readSetEnd();
            this.success[key217] = val218;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter223 in this.success) {
        if (this.success.hasOwnProperty(kiter223)) {
          let viter224 = this.success[kiter223];
          output.writeI64(kiter223);
          output.writeSetBegin(Thrift.Type.STRUCT, viter224.length);
          for (let iter225 in viter224) {
            if (viter224.hasOwnProperty(iter225)) {
              iter225 = viter224[iter225];
              iter225.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecordStartEnd_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3227 = input.readMapBegin();
          const _size226 = _rtmp3227.size || 0;
          for (let _i228 = 0; _i228 < _size226; ++_i228) {
            let key229 = null;
            let val230 = null;
            key229 = input.readI64();
            val230 = [];
            const _rtmp3232 = input.readSetBegin();
            const _size231 = _rtmp3232.size || 0;
            for (let _i233 = 0; _i233 < _size231; ++_i233) {
              let elem234 = null;
              elem234 = new data_ttypes.TObject();
              elem234.read(input);
              val230.push(elem234);
            }
            input.readSetEnd();
            this.success[key229] = val230;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter235 in this.success) {
        if (this.success.hasOwnProperty(kiter235)) {
          let viter236 = this.success[kiter235];
          output.writeI64(kiter235);
          output.writeSetBegin(Thrift.Type.STRUCT, viter236.length);
          for (let iter237 in viter236) {
            if (viter236.hasOwnProperty(iter237)) {
              iter237 = viter236[iter237];
              iter237.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecordStartstrEndstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_chronologizeKeyRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3239 = input.readMapBegin();
          const _size238 = _rtmp3239.size || 0;
          for (let _i240 = 0; _i240 < _size238; ++_i240) {
            let key241 = null;
            let val242 = null;
            key241 = input.readI64();
            val242 = [];
            const _rtmp3244 = input.readSetBegin();
            const _size243 = _rtmp3244.size || 0;
            for (let _i245 = 0; _i245 < _size243; ++_i245) {
              let elem246 = null;
              elem246 = new data_ttypes.TObject();
              elem246.read(input);
              val242.push(elem246);
            }
            input.readSetEnd();
            this.success[key241] = val242;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter247 in this.success) {
        if (this.success.hasOwnProperty(kiter247)) {
          let viter248 = this.success[kiter247];
          output.writeI64(kiter247);
          output.writeSetBegin(Thrift.Type.STRUCT, viter248.length);
          for (let iter249 in viter248) {
            if (viter248.hasOwnProperty(iter249)) {
              iter249 = viter248[iter249];
              iter249.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearRecord_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearRecord_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearRecords_args = class {
  constructor(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3251 = input.readListBegin();
          const _size250 = _rtmp3251.size || 0;
          for (let _i252 = 0; _i252 < _size250; ++_i252) {
            let elem253 = null;
            elem253 = input.readI64();
            this.records.push(elem253);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter254 in this.records) {
        if (this.records.hasOwnProperty(iter254)) {
          iter254 = this.records[iter254];
          output.writeI64(iter254);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearRecords_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearRecords_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearKeyRecord_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeyRecord_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearKeysRecord_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3256 = input.readListBegin();
          const _size255 = _rtmp3256.size || 0;
          for (let _i257 = 0; _i257 < _size255; ++_i257) {
            let elem258 = null;
            elem258 = input.readString();
            this.keys.push(elem258);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter259 in this.keys) {
        if (this.keys.hasOwnProperty(iter259)) {
          iter259 = this.keys[iter259];
          output.writeString(iter259);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearKeysRecord_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeysRecord_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3261 = input.readListBegin();
          const _size260 = _rtmp3261.size || 0;
          for (let _i262 = 0; _i262 < _size260; ++_i262) {
            let elem263 = null;
            elem263 = input.readI64();
            this.records.push(elem263);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter264 in this.records) {
        if (this.records.hasOwnProperty(iter264)) {
          iter264 = this.records[iter264];
          output.writeI64(iter264);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearKeyRecords_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeyRecords_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearKeysRecords_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3266 = input.readListBegin();
          const _size265 = _rtmp3266.size || 0;
          for (let _i267 = 0; _i267 < _size265; ++_i267) {
            let elem268 = null;
            elem268 = input.readString();
            this.keys.push(elem268);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3270 = input.readListBegin();
          const _size269 = _rtmp3270.size || 0;
          for (let _i271 = 0; _i271 < _size269; ++_i271) {
            let elem272 = null;
            elem272 = input.readI64();
            this.records.push(elem272);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter273 in this.keys) {
        if (this.keys.hasOwnProperty(iter273)) {
          iter273 = this.keys[iter273];
          output.writeString(iter273);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter274 in this.records) {
        if (this.records.hasOwnProperty(iter274)) {
          iter274 = this.records[iter274];
          output.writeI64(iter274);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_clearKeysRecords_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeysRecords_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_commit_args = class {
  constructor(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_commit_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_commit_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_commit_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describe_args = class {
  constructor(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describe_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describe_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3276 = input.readSetBegin();
          const _size275 = _rtmp3276.size || 0;
          for (let _i277 = 0; _i277 < _size275; ++_i277) {
            let elem278 = null;
            elem278 = input.readString();
            this.success.push(elem278);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describe_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (let iter279 in this.success) {
        if (this.success.hasOwnProperty(iter279)) {
          iter279 = this.success[iter279];
          output.writeString(iter279);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeTime_args = class {
  constructor(args) {
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeTime_args');
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3281 = input.readSetBegin();
          const _size280 = _rtmp3281.size || 0;
          for (let _i282 = 0; _i282 < _size280; ++_i282) {
            let elem283 = null;
            elem283 = input.readString();
            this.success.push(elem283);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (let iter284 in this.success) {
        if (this.success.hasOwnProperty(iter284)) {
          iter284 = this.success[iter284];
          output.writeString(iter284);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeTimestr_args = class {
  constructor(args) {
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeTimestr_args');
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3286 = input.readSetBegin();
          const _size285 = _rtmp3286.size || 0;
          for (let _i287 = 0; _i287 < _size285; ++_i287) {
            let elem288 = null;
            elem288 = input.readString();
            this.success.push(elem288);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (let iter289 in this.success) {
        if (this.success.hasOwnProperty(iter289)) {
          iter289 = this.success[iter289];
          output.writeString(iter289);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3291 = input.readSetBegin();
          const _size290 = _rtmp3291.size || 0;
          for (let _i292 = 0; _i292 < _size290; ++_i292) {
            let elem293 = null;
            elem293 = input.readString();
            this.success.push(elem293);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (let iter294 in this.success) {
        if (this.success.hasOwnProperty(iter294)) {
          iter294 = this.success[iter294];
          output.writeString(iter294);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecordTime_args = class {
  constructor(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordTime_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3296 = input.readSetBegin();
          const _size295 = _rtmp3296.size || 0;
          for (let _i297 = 0; _i297 < _size295; ++_i297) {
            let elem298 = null;
            elem298 = input.readString();
            this.success.push(elem298);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (let iter299 in this.success) {
        if (this.success.hasOwnProperty(iter299)) {
          iter299 = this.success[iter299];
          output.writeString(iter299);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecordTimestr_args = class {
  constructor(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordTimestr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3301 = input.readSetBegin();
          const _size300 = _rtmp3301.size || 0;
          for (let _i302 = 0; _i302 < _size300; ++_i302) {
            let elem303 = null;
            elem303 = input.readString();
            this.success.push(elem303);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (let iter304 in this.success) {
        if (this.success.hasOwnProperty(iter304)) {
          iter304 = this.success[iter304];
          output.writeString(iter304);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecords_args = class {
  constructor(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3306 = input.readListBegin();
          const _size305 = _rtmp3306.size || 0;
          for (let _i307 = 0; _i307 < _size305; ++_i307) {
            let elem308 = null;
            elem308 = input.readI64();
            this.records.push(elem308);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter309 in this.records) {
        if (this.records.hasOwnProperty(iter309)) {
          iter309 = this.records[iter309];
          output.writeI64(iter309);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3311 = input.readMapBegin();
          const _size310 = _rtmp3311.size || 0;
          for (let _i312 = 0; _i312 < _size310; ++_i312) {
            let key313 = null;
            let val314 = null;
            key313 = input.readI64();
            val314 = [];
            const _rtmp3316 = input.readSetBegin();
            const _size315 = _rtmp3316.size || 0;
            for (let _i317 = 0; _i317 < _size315; ++_i317) {
              let elem318 = null;
              elem318 = input.readString();
              val314.push(elem318);
            }
            input.readSetEnd();
            this.success[key313] = val314;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter319 in this.success) {
        if (this.success.hasOwnProperty(kiter319)) {
          let viter320 = this.success[kiter319];
          output.writeI64(kiter319);
          output.writeSetBegin(Thrift.Type.STRING, viter320.length);
          for (let iter321 in viter320) {
            if (viter320.hasOwnProperty(iter321)) {
              iter321 = viter320[iter321];
              output.writeString(iter321);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecordsTime_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3323 = input.readListBegin();
          const _size322 = _rtmp3323.size || 0;
          for (let _i324 = 0; _i324 < _size322; ++_i324) {
            let elem325 = null;
            elem325 = input.readI64();
            this.records.push(elem325);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter326 in this.records) {
        if (this.records.hasOwnProperty(iter326)) {
          iter326 = this.records[iter326];
          output.writeI64(iter326);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3328 = input.readMapBegin();
          const _size327 = _rtmp3328.size || 0;
          for (let _i329 = 0; _i329 < _size327; ++_i329) {
            let key330 = null;
            let val331 = null;
            key330 = input.readI64();
            val331 = [];
            const _rtmp3333 = input.readSetBegin();
            const _size332 = _rtmp3333.size || 0;
            for (let _i334 = 0; _i334 < _size332; ++_i334) {
              let elem335 = null;
              elem335 = input.readString();
              val331.push(elem335);
            }
            input.readSetEnd();
            this.success[key330] = val331;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter336 in this.success) {
        if (this.success.hasOwnProperty(kiter336)) {
          let viter337 = this.success[kiter336];
          output.writeI64(kiter336);
          output.writeSetBegin(Thrift.Type.STRING, viter337.length);
          for (let iter338 in viter337) {
            if (viter337.hasOwnProperty(iter338)) {
              iter338 = viter337[iter338];
              output.writeString(iter338);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecordsTimestr_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3340 = input.readListBegin();
          const _size339 = _rtmp3340.size || 0;
          for (let _i341 = 0; _i341 < _size339; ++_i341) {
            let elem342 = null;
            elem342 = input.readI64();
            this.records.push(elem342);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter343 in this.records) {
        if (this.records.hasOwnProperty(iter343)) {
          iter343 = this.records[iter343];
          output.writeI64(iter343);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_describeRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3345 = input.readMapBegin();
          const _size344 = _rtmp3345.size || 0;
          for (let _i346 = 0; _i346 < _size344; ++_i346) {
            let key347 = null;
            let val348 = null;
            key347 = input.readI64();
            val348 = [];
            const _rtmp3350 = input.readSetBegin();
            const _size349 = _rtmp3350.size || 0;
            for (let _i351 = 0; _i351 < _size349; ++_i351) {
              let elem352 = null;
              elem352 = input.readString();
              val348.push(elem352);
            }
            input.readSetEnd();
            this.success[key347] = val348;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter353 in this.success) {
        if (this.success.hasOwnProperty(kiter353)) {
          let viter354 = this.success[kiter353];
          output.writeI64(kiter353);
          output.writeSetBegin(Thrift.Type.STRING, viter354.length);
          for (let iter355 in viter354) {
            if (viter354.hasOwnProperty(iter355)) {
              iter355 = viter354[iter355];
              output.writeString(iter355);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffRecordStart_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStart_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3357 = input.readMapBegin();
          const _size356 = _rtmp3357.size || 0;
          for (let _i358 = 0; _i358 < _size356; ++_i358) {
            let key359 = null;
            let val360 = null;
            key359 = input.readString();
            val360 = {};
            const _rtmp3362 = input.readMapBegin();
            const _size361 = _rtmp3362.size || 0;
            for (let _i363 = 0; _i363 < _size361; ++_i363) {
              let key364 = null;
              let val365 = null;
              key364 = input.readI32();
              val365 = [];
              const _rtmp3367 = input.readSetBegin();
              const _size366 = _rtmp3367.size || 0;
              for (let _i368 = 0; _i368 < _size366; ++_i368) {
                let elem369 = null;
                elem369 = new data_ttypes.TObject();
                elem369.read(input);
                val365.push(elem369);
              }
              input.readSetEnd();
              val360[key364] = val365;
            }
            input.readMapEnd();
            this.success[key359] = val360;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter370 in this.success) {
        if (this.success.hasOwnProperty(kiter370)) {
          let viter371 = this.success[kiter370];
          output.writeString(kiter370);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter371));
          for (let kiter372 in viter371) {
            if (viter371.hasOwnProperty(kiter372)) {
              let viter373 = viter371[kiter372];
              output.writeI32(kiter372);
              output.writeSetBegin(Thrift.Type.STRUCT, viter373.length);
              for (let iter374 in viter373) {
                if (viter373.hasOwnProperty(iter374)) {
                  iter374 = viter373[iter374];
                  iter374.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffRecordStartstr_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3376 = input.readMapBegin();
          const _size375 = _rtmp3376.size || 0;
          for (let _i377 = 0; _i377 < _size375; ++_i377) {
            let key378 = null;
            let val379 = null;
            key378 = input.readString();
            val379 = {};
            const _rtmp3381 = input.readMapBegin();
            const _size380 = _rtmp3381.size || 0;
            for (let _i382 = 0; _i382 < _size380; ++_i382) {
              let key383 = null;
              let val384 = null;
              key383 = input.readI32();
              val384 = [];
              const _rtmp3386 = input.readSetBegin();
              const _size385 = _rtmp3386.size || 0;
              for (let _i387 = 0; _i387 < _size385; ++_i387) {
                let elem388 = null;
                elem388 = new data_ttypes.TObject();
                elem388.read(input);
                val384.push(elem388);
              }
              input.readSetEnd();
              val379[key383] = val384;
            }
            input.readMapEnd();
            this.success[key378] = val379;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter389 in this.success) {
        if (this.success.hasOwnProperty(kiter389)) {
          let viter390 = this.success[kiter389];
          output.writeString(kiter389);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter390));
          for (let kiter391 in viter390) {
            if (viter390.hasOwnProperty(kiter391)) {
              let viter392 = viter390[kiter391];
              output.writeI32(kiter391);
              output.writeSetBegin(Thrift.Type.STRUCT, viter392.length);
              for (let iter393 in viter392) {
                if (viter392.hasOwnProperty(iter393)) {
                  iter393 = viter392[iter393];
                  iter393.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffRecordStartEnd_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartEnd_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3395 = input.readMapBegin();
          const _size394 = _rtmp3395.size || 0;
          for (let _i396 = 0; _i396 < _size394; ++_i396) {
            let key397 = null;
            let val398 = null;
            key397 = input.readString();
            val398 = {};
            const _rtmp3400 = input.readMapBegin();
            const _size399 = _rtmp3400.size || 0;
            for (let _i401 = 0; _i401 < _size399; ++_i401) {
              let key402 = null;
              let val403 = null;
              key402 = input.readI32();
              val403 = [];
              const _rtmp3405 = input.readSetBegin();
              const _size404 = _rtmp3405.size || 0;
              for (let _i406 = 0; _i406 < _size404; ++_i406) {
                let elem407 = null;
                elem407 = new data_ttypes.TObject();
                elem407.read(input);
                val403.push(elem407);
              }
              input.readSetEnd();
              val398[key402] = val403;
            }
            input.readMapEnd();
            this.success[key397] = val398;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter408 in this.success) {
        if (this.success.hasOwnProperty(kiter408)) {
          let viter409 = this.success[kiter408];
          output.writeString(kiter408);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter409));
          for (let kiter410 in viter409) {
            if (viter409.hasOwnProperty(kiter410)) {
              let viter411 = viter409[kiter410];
              output.writeI32(kiter410);
              output.writeSetBegin(Thrift.Type.STRUCT, viter411.length);
              for (let iter412 in viter411) {
                if (viter411.hasOwnProperty(iter412)) {
                  iter412 = viter411[iter412];
                  iter412.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffRecordStartstrEndstr_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstrEndstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3414 = input.readMapBegin();
          const _size413 = _rtmp3414.size || 0;
          for (let _i415 = 0; _i415 < _size413; ++_i415) {
            let key416 = null;
            let val417 = null;
            key416 = input.readString();
            val417 = {};
            const _rtmp3419 = input.readMapBegin();
            const _size418 = _rtmp3419.size || 0;
            for (let _i420 = 0; _i420 < _size418; ++_i420) {
              let key421 = null;
              let val422 = null;
              key421 = input.readI32();
              val422 = [];
              const _rtmp3424 = input.readSetBegin();
              const _size423 = _rtmp3424.size || 0;
              for (let _i425 = 0; _i425 < _size423; ++_i425) {
                let elem426 = null;
                elem426 = new data_ttypes.TObject();
                elem426.read(input);
                val422.push(elem426);
              }
              input.readSetEnd();
              val417[key421] = val422;
            }
            input.readMapEnd();
            this.success[key416] = val417;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter427 in this.success) {
        if (this.success.hasOwnProperty(kiter427)) {
          let viter428 = this.success[kiter427];
          output.writeString(kiter427);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter428));
          for (let kiter429 in viter428) {
            if (viter428.hasOwnProperty(kiter429)) {
              let viter430 = viter428[kiter429];
              output.writeI32(kiter429);
              output.writeSetBegin(Thrift.Type.STRUCT, viter430.length);
              for (let iter431 in viter430) {
                if (viter430.hasOwnProperty(iter431)) {
                  iter431 = viter430[iter431];
                  iter431.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyRecordStart_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3433 = input.readMapBegin();
          const _size432 = _rtmp3433.size || 0;
          for (let _i434 = 0; _i434 < _size432; ++_i434) {
            let key435 = null;
            let val436 = null;
            key435 = input.readI32();
            val436 = [];
            const _rtmp3438 = input.readSetBegin();
            const _size437 = _rtmp3438.size || 0;
            for (let _i439 = 0; _i439 < _size437; ++_i439) {
              let elem440 = null;
              elem440 = new data_ttypes.TObject();
              elem440.read(input);
              val436.push(elem440);
            }
            input.readSetEnd();
            this.success[key435] = val436;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter441 in this.success) {
        if (this.success.hasOwnProperty(kiter441)) {
          let viter442 = this.success[kiter441];
          output.writeI32(kiter441);
          output.writeSetBegin(Thrift.Type.STRUCT, viter442.length);
          for (let iter443 in viter442) {
            if (viter442.hasOwnProperty(iter443)) {
              iter443 = viter442[iter443];
              iter443.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyRecordStartstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3445 = input.readMapBegin();
          const _size444 = _rtmp3445.size || 0;
          for (let _i446 = 0; _i446 < _size444; ++_i446) {
            let key447 = null;
            let val448 = null;
            key447 = input.readI32();
            val448 = [];
            const _rtmp3450 = input.readSetBegin();
            const _size449 = _rtmp3450.size || 0;
            for (let _i451 = 0; _i451 < _size449; ++_i451) {
              let elem452 = null;
              elem452 = new data_ttypes.TObject();
              elem452.read(input);
              val448.push(elem452);
            }
            input.readSetEnd();
            this.success[key447] = val448;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter453 in this.success) {
        if (this.success.hasOwnProperty(kiter453)) {
          let viter454 = this.success[kiter453];
          output.writeI32(kiter453);
          output.writeSetBegin(Thrift.Type.STRUCT, viter454.length);
          for (let iter455 in viter454) {
            if (viter454.hasOwnProperty(iter455)) {
              iter455 = viter454[iter455];
              iter455.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyRecordStartEnd_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3457 = input.readMapBegin();
          const _size456 = _rtmp3457.size || 0;
          for (let _i458 = 0; _i458 < _size456; ++_i458) {
            let key459 = null;
            let val460 = null;
            key459 = input.readI32();
            val460 = [];
            const _rtmp3462 = input.readSetBegin();
            const _size461 = _rtmp3462.size || 0;
            for (let _i463 = 0; _i463 < _size461; ++_i463) {
              let elem464 = null;
              elem464 = new data_ttypes.TObject();
              elem464.read(input);
              val460.push(elem464);
            }
            input.readSetEnd();
            this.success[key459] = val460;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter465 in this.success) {
        if (this.success.hasOwnProperty(kiter465)) {
          let viter466 = this.success[kiter465];
          output.writeI32(kiter465);
          output.writeSetBegin(Thrift.Type.STRUCT, viter466.length);
          for (let iter467 in viter466) {
            if (viter466.hasOwnProperty(iter467)) {
              iter467 = viter466[iter467];
              iter467.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyRecordStartstrEndstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3469 = input.readMapBegin();
          const _size468 = _rtmp3469.size || 0;
          for (let _i470 = 0; _i470 < _size468; ++_i470) {
            let key471 = null;
            let val472 = null;
            key471 = input.readI32();
            val472 = [];
            const _rtmp3474 = input.readSetBegin();
            const _size473 = _rtmp3474.size || 0;
            for (let _i475 = 0; _i475 < _size473; ++_i475) {
              let elem476 = null;
              elem476 = new data_ttypes.TObject();
              elem476.read(input);
              val472.push(elem476);
            }
            input.readSetEnd();
            this.success[key471] = val472;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter477 in this.success) {
        if (this.success.hasOwnProperty(kiter477)) {
          let viter478 = this.success[kiter477];
          output.writeI32(kiter477);
          output.writeSetBegin(Thrift.Type.STRUCT, viter478.length);
          for (let iter479 in viter478) {
            if (viter478.hasOwnProperty(iter479)) {
              iter479 = viter478[iter479];
              iter479.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyStart_args = class {
  constructor(args) {
    this.key = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3481 = input.readMapBegin();
          const _size480 = _rtmp3481.size || 0;
          for (let _i482 = 0; _i482 < _size480; ++_i482) {
            let key483 = null;
            let val484 = null;
            key483 = new data_ttypes.TObject();
            key483.read(input);
            val484 = {};
            const _rtmp3486 = input.readMapBegin();
            const _size485 = _rtmp3486.size || 0;
            for (let _i487 = 0; _i487 < _size485; ++_i487) {
              let key488 = null;
              let val489 = null;
              key488 = input.readI32();
              val489 = [];
              const _rtmp3491 = input.readSetBegin();
              const _size490 = _rtmp3491.size || 0;
              for (let _i492 = 0; _i492 < _size490; ++_i492) {
                let elem493 = null;
                elem493 = input.readI64();
                val489.push(elem493);
              }
              input.readSetEnd();
              val484[key488] = val489;
            }
            input.readMapEnd();
            this.success[key483] = val484;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter494 in this.success) {
        if (this.success.hasOwnProperty(kiter494)) {
          let viter495 = this.success[kiter494];
          kiter494.write(output);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter495));
          for (let kiter496 in viter495) {
            if (viter495.hasOwnProperty(kiter496)) {
              let viter497 = viter495[kiter496];
              output.writeI32(kiter496);
              output.writeSetBegin(Thrift.Type.I64, viter497.length);
              for (let iter498 in viter497) {
                if (viter497.hasOwnProperty(iter498)) {
                  iter498 = viter497[iter498];
                  output.writeI64(iter498);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyStartstr_args = class {
  constructor(args) {
    this.key = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3500 = input.readMapBegin();
          const _size499 = _rtmp3500.size || 0;
          for (let _i501 = 0; _i501 < _size499; ++_i501) {
            let key502 = null;
            let val503 = null;
            key502 = new data_ttypes.TObject();
            key502.read(input);
            val503 = {};
            const _rtmp3505 = input.readMapBegin();
            const _size504 = _rtmp3505.size || 0;
            for (let _i506 = 0; _i506 < _size504; ++_i506) {
              let key507 = null;
              let val508 = null;
              key507 = input.readI32();
              val508 = [];
              const _rtmp3510 = input.readSetBegin();
              const _size509 = _rtmp3510.size || 0;
              for (let _i511 = 0; _i511 < _size509; ++_i511) {
                let elem512 = null;
                elem512 = input.readI64();
                val508.push(elem512);
              }
              input.readSetEnd();
              val503[key507] = val508;
            }
            input.readMapEnd();
            this.success[key502] = val503;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter513 in this.success) {
        if (this.success.hasOwnProperty(kiter513)) {
          let viter514 = this.success[kiter513];
          kiter513.write(output);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter514));
          for (let kiter515 in viter514) {
            if (viter514.hasOwnProperty(kiter515)) {
              let viter516 = viter514[kiter515];
              output.writeI32(kiter515);
              output.writeSetBegin(Thrift.Type.I64, viter516.length);
              for (let iter517 in viter516) {
                if (viter516.hasOwnProperty(iter517)) {
                  iter517 = viter516[iter517];
                  output.writeI64(iter517);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyStartEnd_args = class {
  constructor(args) {
    this.key = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3519 = input.readMapBegin();
          const _size518 = _rtmp3519.size || 0;
          for (let _i520 = 0; _i520 < _size518; ++_i520) {
            let key521 = null;
            let val522 = null;
            key521 = new data_ttypes.TObject();
            key521.read(input);
            val522 = {};
            const _rtmp3524 = input.readMapBegin();
            const _size523 = _rtmp3524.size || 0;
            for (let _i525 = 0; _i525 < _size523; ++_i525) {
              let key526 = null;
              let val527 = null;
              key526 = input.readI32();
              val527 = [];
              const _rtmp3529 = input.readSetBegin();
              const _size528 = _rtmp3529.size || 0;
              for (let _i530 = 0; _i530 < _size528; ++_i530) {
                let elem531 = null;
                elem531 = input.readI64();
                val527.push(elem531);
              }
              input.readSetEnd();
              val522[key526] = val527;
            }
            input.readMapEnd();
            this.success[key521] = val522;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter532 in this.success) {
        if (this.success.hasOwnProperty(kiter532)) {
          let viter533 = this.success[kiter532];
          kiter532.write(output);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter533));
          for (let kiter534 in viter533) {
            if (viter533.hasOwnProperty(kiter534)) {
              let viter535 = viter533[kiter534];
              output.writeI32(kiter534);
              output.writeSetBegin(Thrift.Type.I64, viter535.length);
              for (let iter536 in viter535) {
                if (viter535.hasOwnProperty(iter536)) {
                  iter536 = viter535[iter536];
                  output.writeI64(iter536);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyStartstrEndstr_args = class {
  constructor(args) {
    this.key = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_diffKeyStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3538 = input.readMapBegin();
          const _size537 = _rtmp3538.size || 0;
          for (let _i539 = 0; _i539 < _size537; ++_i539) {
            let key540 = null;
            let val541 = null;
            key540 = new data_ttypes.TObject();
            key540.read(input);
            val541 = {};
            const _rtmp3543 = input.readMapBegin();
            const _size542 = _rtmp3543.size || 0;
            for (let _i544 = 0; _i544 < _size542; ++_i544) {
              let key545 = null;
              let val546 = null;
              key545 = input.readI32();
              val546 = [];
              const _rtmp3548 = input.readSetBegin();
              const _size547 = _rtmp3548.size || 0;
              for (let _i549 = 0; _i549 < _size547; ++_i549) {
                let elem550 = null;
                elem550 = input.readI64();
                val546.push(elem550);
              }
              input.readSetEnd();
              val541[key545] = val546;
            }
            input.readMapEnd();
            this.success[key540] = val541;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter551 in this.success) {
        if (this.success.hasOwnProperty(kiter551)) {
          let viter552 = this.success[kiter551];
          kiter551.write(output);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter552));
          for (let kiter553 in viter552) {
            if (viter552.hasOwnProperty(kiter553)) {
              let viter554 = viter552[kiter553];
              output.writeI32(kiter553);
              output.writeSetBegin(Thrift.Type.I64, viter554.length);
              for (let iter555 in viter554) {
                if (viter554.hasOwnProperty(iter555)) {
                  iter555 = viter554[iter555];
                  output.writeI64(iter555);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_invokePlugin_args = class {
  constructor(args) {
    this.id = null;
    this.method = null;
    this.params = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [complex_ttypes.ComplexTObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.method = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.params = [];
          const _rtmp3557 = input.readListBegin();
          const _size556 = _rtmp3557.size || 0;
          for (let _i558 = 0; _i558 < _size556; ++_i558) {
            let elem559 = null;
            elem559 = new complex_ttypes.ComplexTObject();
            elem559.read(input);
            this.params.push(elem559);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_invokePlugin_args');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 2);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (let iter560 in this.params) {
        if (this.params.hasOwnProperty(iter560)) {
          iter560 = this.params[iter560];
          iter560.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_invokePlugin_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new complex_ttypes.ComplexTObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new complex_ttypes.ComplexTObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_invokePlugin_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_login_args = class {
  constructor(args) {
    this.username = null;
    this.password = null;
    this.environment = null;
    if (args) {
      if (args.username !== undefined && args.username !== null) {
        this.username = args.username;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.username = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_login_args');
    if (this.username !== null && this.username !== undefined) {
      output.writeFieldBegin('username', Thrift.Type.STRING, 1);
      output.writeBinary(this.username);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeBinary(this.password);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_login_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new shared_ttypes.AccessToken(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new shared_ttypes.AccessToken();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_login_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_logout_args = class {
  constructor(args) {
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.AccessToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.AccessToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_logout_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 2);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_logout_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_logout_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_stage_args = class {
  constructor(args) {
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.AccessToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.AccessToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_stage_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 2);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_stage_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new shared_ttypes.TransactionToken(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new shared_ttypes.TransactionToken();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_stage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_insertJson_args = class {
  constructor(args) {
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJson_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_insertJson_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3562 = input.readSetBegin();
          const _size561 = _rtmp3562.size || 0;
          for (let _i563 = 0; _i563 < _size561; ++_i563) {
            let elem564 = null;
            elem564 = input.readI64();
            this.success.push(elem564);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJson_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter565 in this.success) {
        if (this.success.hasOwnProperty(iter565)) {
          iter565 = this.success[iter565];
          output.writeI64(iter565);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_insertJsonRecord_args = class {
  constructor(args) {
    this.json = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJsonRecord_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_insertJsonRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJsonRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_insertJsonRecords_args = class {
  constructor(args) {
    this.json = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3567 = input.readListBegin();
          const _size566 = _rtmp3567.size || 0;
          for (let _i568 = 0; _i568 < _size566; ++_i568) {
            let elem569 = null;
            elem569 = input.readI64();
            this.records.push(elem569);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJsonRecords_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter570 in this.records) {
        if (this.records.hasOwnProperty(iter570)) {
          iter570 = this.records[iter570];
          output.writeI64(iter570);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_insertJsonRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3572 = input.readMapBegin();
          const _size571 = _rtmp3572.size || 0;
          for (let _i573 = 0; _i573 < _size571; ++_i573) {
            let key574 = null;
            let val575 = null;
            key574 = input.readI64();
            val575 = input.readBool();
            this.success[key574] = val575;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJsonRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.success));
      for (let kiter576 in this.success) {
        if (this.success.hasOwnProperty(kiter576)) {
          let viter577 = this.success[kiter576];
          output.writeI64(kiter576);
          output.writeBool(viter577);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_removeKeyValueRecord_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_removeKeyValueRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_removeKeyValueRecords_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3579 = input.readListBegin();
          const _size578 = _rtmp3579.size || 0;
          for (let _i580 = 0; _i580 < _size578; ++_i580) {
            let elem581 = null;
            elem581 = input.readI64();
            this.records.push(elem581);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter582 in this.records) {
        if (this.records.hasOwnProperty(iter582)) {
          iter582 = this.records[iter582];
          output.writeI64(iter582);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_removeKeyValueRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3584 = input.readMapBegin();
          const _size583 = _rtmp3584.size || 0;
          for (let _i585 = 0; _i585 < _size583; ++_i585) {
            let key586 = null;
            let val587 = null;
            key586 = input.readI64();
            val587 = input.readBool();
            this.success[key586] = val587;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.success));
      for (let kiter588 in this.success) {
        if (this.success.hasOwnProperty(kiter588)) {
          let viter589 = this.success[kiter588];
          output.writeI64(kiter588);
          output.writeBool(viter589);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_setKeyValueRecord_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_setKeyValueRecord_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecord_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_setKeyValue_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_setKeyValue_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValue_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_setKeyValueRecords_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3591 = input.readListBegin();
          const _size590 = _rtmp3591.size || 0;
          for (let _i592 = 0; _i592 < _size590; ++_i592) {
            let elem593 = null;
            elem593 = input.readI64();
            this.records.push(elem593);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter594 in this.records) {
        if (this.records.hasOwnProperty(iter594)) {
          iter594 = this.records[iter594];
          output.writeI64(iter594);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_setKeyValueRecords_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecords_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_reconcileKeyRecordValues_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.SET) {
          this.values = [];
          const _rtmp3596 = input.readSetBegin();
          const _size595 = _rtmp3596.size || 0;
          for (let _i597 = 0; _i597 < _size595; ++_i597) {
            let elem598 = null;
            elem598 = new data_ttypes.TObject();
            elem598.read(input);
            this.values.push(elem598);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_reconcileKeyRecordValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.SET, 3);
      output.writeSetBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter599 in this.values) {
        if (this.values.hasOwnProperty(iter599)) {
          iter599 = this.values[iter599];
          iter599.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_reconcileKeyRecordValues_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_reconcileKeyRecordValues_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_inventory_args = class {
  constructor(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_inventory_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_inventory_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3601 = input.readSetBegin();
          const _size600 = _rtmp3601.size || 0;
          for (let _i602 = 0; _i602 < _size600; ++_i602) {
            let elem603 = null;
            elem603 = input.readI64();
            this.success.push(elem603);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_inventory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter604 in this.success) {
        if (this.success.hasOwnProperty(iter604)) {
          iter604 = this.success[iter604];
          output.writeI64(iter604);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3606 = input.readMapBegin();
          const _size605 = _rtmp3606.size || 0;
          for (let _i607 = 0; _i607 < _size605; ++_i607) {
            let key608 = null;
            let val609 = null;
            key608 = input.readString();
            val609 = [];
            const _rtmp3611 = input.readSetBegin();
            const _size610 = _rtmp3611.size || 0;
            for (let _i612 = 0; _i612 < _size610; ++_i612) {
              let elem613 = null;
              elem613 = new data_ttypes.TObject();
              elem613.read(input);
              val609.push(elem613);
            }
            input.readSetEnd();
            this.success[key608] = val609;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter614 in this.success) {
        if (this.success.hasOwnProperty(kiter614)) {
          let viter615 = this.success[kiter614];
          output.writeString(kiter614);
          output.writeSetBegin(Thrift.Type.STRUCT, viter615.length);
          for (let iter616 in viter615) {
            if (viter615.hasOwnProperty(iter616)) {
              iter616 = viter615[iter616];
              iter616.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecords_args = class {
  constructor(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3618 = input.readListBegin();
          const _size617 = _rtmp3618.size || 0;
          for (let _i619 = 0; _i619 < _size617; ++_i619) {
            let elem620 = null;
            elem620 = input.readI64();
            this.records.push(elem620);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter621 in this.records) {
        if (this.records.hasOwnProperty(iter621)) {
          iter621 = this.records[iter621];
          output.writeI64(iter621);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3623 = input.readMapBegin();
          const _size622 = _rtmp3623.size || 0;
          for (let _i624 = 0; _i624 < _size622; ++_i624) {
            let key625 = null;
            let val626 = null;
            key625 = input.readI64();
            val626 = {};
            const _rtmp3628 = input.readMapBegin();
            const _size627 = _rtmp3628.size || 0;
            for (let _i629 = 0; _i629 < _size627; ++_i629) {
              let key630 = null;
              let val631 = null;
              key630 = input.readString();
              val631 = [];
              const _rtmp3633 = input.readSetBegin();
              const _size632 = _rtmp3633.size || 0;
              for (let _i634 = 0; _i634 < _size632; ++_i634) {
                let elem635 = null;
                elem635 = new data_ttypes.TObject();
                elem635.read(input);
                val631.push(elem635);
              }
              input.readSetEnd();
              val626[key630] = val631;
            }
            input.readMapEnd();
            this.success[key625] = val626;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter636 in this.success) {
        if (this.success.hasOwnProperty(kiter636)) {
          let viter637 = this.success[kiter636];
          output.writeI64(kiter636);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter637));
          for (let kiter638 in viter637) {
            if (viter637.hasOwnProperty(kiter638)) {
              let viter639 = viter637[kiter638];
              output.writeString(kiter638);
              output.writeSetBegin(Thrift.Type.STRUCT, viter639.length);
              for (let iter640 in viter639) {
                if (viter639.hasOwnProperty(iter640)) {
                  iter640 = viter639[iter640];
                  iter640.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecordTime_args = class {
  constructor(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordTime_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3642 = input.readMapBegin();
          const _size641 = _rtmp3642.size || 0;
          for (let _i643 = 0; _i643 < _size641; ++_i643) {
            let key644 = null;
            let val645 = null;
            key644 = input.readString();
            val645 = [];
            const _rtmp3647 = input.readSetBegin();
            const _size646 = _rtmp3647.size || 0;
            for (let _i648 = 0; _i648 < _size646; ++_i648) {
              let elem649 = null;
              elem649 = new data_ttypes.TObject();
              elem649.read(input);
              val645.push(elem649);
            }
            input.readSetEnd();
            this.success[key644] = val645;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter650 in this.success) {
        if (this.success.hasOwnProperty(kiter650)) {
          let viter651 = this.success[kiter650];
          output.writeString(kiter650);
          output.writeSetBegin(Thrift.Type.STRUCT, viter651.length);
          for (let iter652 in viter651) {
            if (viter651.hasOwnProperty(iter652)) {
              iter652 = viter651[iter652];
              iter652.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecordTimestr_args = class {
  constructor(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordTimestr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3654 = input.readMapBegin();
          const _size653 = _rtmp3654.size || 0;
          for (let _i655 = 0; _i655 < _size653; ++_i655) {
            let key656 = null;
            let val657 = null;
            key656 = input.readString();
            val657 = [];
            const _rtmp3659 = input.readSetBegin();
            const _size658 = _rtmp3659.size || 0;
            for (let _i660 = 0; _i660 < _size658; ++_i660) {
              let elem661 = null;
              elem661 = new data_ttypes.TObject();
              elem661.read(input);
              val657.push(elem661);
            }
            input.readSetEnd();
            this.success[key656] = val657;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter662 in this.success) {
        if (this.success.hasOwnProperty(kiter662)) {
          let viter663 = this.success[kiter662];
          output.writeString(kiter662);
          output.writeSetBegin(Thrift.Type.STRUCT, viter663.length);
          for (let iter664 in viter663) {
            if (viter663.hasOwnProperty(iter664)) {
              iter664 = viter663[iter664];
              iter664.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecordsTime_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3666 = input.readListBegin();
          const _size665 = _rtmp3666.size || 0;
          for (let _i667 = 0; _i667 < _size665; ++_i667) {
            let elem668 = null;
            elem668 = input.readI64();
            this.records.push(elem668);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter669 in this.records) {
        if (this.records.hasOwnProperty(iter669)) {
          iter669 = this.records[iter669];
          output.writeI64(iter669);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3671 = input.readMapBegin();
          const _size670 = _rtmp3671.size || 0;
          for (let _i672 = 0; _i672 < _size670; ++_i672) {
            let key673 = null;
            let val674 = null;
            key673 = input.readI64();
            val674 = {};
            const _rtmp3676 = input.readMapBegin();
            const _size675 = _rtmp3676.size || 0;
            for (let _i677 = 0; _i677 < _size675; ++_i677) {
              let key678 = null;
              let val679 = null;
              key678 = input.readString();
              val679 = [];
              const _rtmp3681 = input.readSetBegin();
              const _size680 = _rtmp3681.size || 0;
              for (let _i682 = 0; _i682 < _size680; ++_i682) {
                let elem683 = null;
                elem683 = new data_ttypes.TObject();
                elem683.read(input);
                val679.push(elem683);
              }
              input.readSetEnd();
              val674[key678] = val679;
            }
            input.readMapEnd();
            this.success[key673] = val674;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter684 in this.success) {
        if (this.success.hasOwnProperty(kiter684)) {
          let viter685 = this.success[kiter684];
          output.writeI64(kiter684);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter685));
          for (let kiter686 in viter685) {
            if (viter685.hasOwnProperty(kiter686)) {
              let viter687 = viter685[kiter686];
              output.writeString(kiter686);
              output.writeSetBegin(Thrift.Type.STRUCT, viter687.length);
              for (let iter688 in viter687) {
                if (viter687.hasOwnProperty(iter688)) {
                  iter688 = viter687[iter688];
                  iter688.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecordsTimestr_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3690 = input.readListBegin();
          const _size689 = _rtmp3690.size || 0;
          for (let _i691 = 0; _i691 < _size689; ++_i691) {
            let elem692 = null;
            elem692 = input.readI64();
            this.records.push(elem692);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter693 in this.records) {
        if (this.records.hasOwnProperty(iter693)) {
          iter693 = this.records[iter693];
          output.writeI64(iter693);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3695 = input.readMapBegin();
          const _size694 = _rtmp3695.size || 0;
          for (let _i696 = 0; _i696 < _size694; ++_i696) {
            let key697 = null;
            let val698 = null;
            key697 = input.readI64();
            val698 = {};
            const _rtmp3700 = input.readMapBegin();
            const _size699 = _rtmp3700.size || 0;
            for (let _i701 = 0; _i701 < _size699; ++_i701) {
              let key702 = null;
              let val703 = null;
              key702 = input.readString();
              val703 = [];
              const _rtmp3705 = input.readSetBegin();
              const _size704 = _rtmp3705.size || 0;
              for (let _i706 = 0; _i706 < _size704; ++_i706) {
                let elem707 = null;
                elem707 = new data_ttypes.TObject();
                elem707.read(input);
                val703.push(elem707);
              }
              input.readSetEnd();
              val698[key702] = val703;
            }
            input.readMapEnd();
            this.success[key697] = val698;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter708 in this.success) {
        if (this.success.hasOwnProperty(kiter708)) {
          let viter709 = this.success[kiter708];
          output.writeI64(kiter708);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter709));
          for (let kiter710 in viter709) {
            if (viter709.hasOwnProperty(kiter710)) {
              let viter711 = viter709[kiter710];
              output.writeString(kiter710);
              output.writeSetBegin(Thrift.Type.STRUCT, viter711.length);
              for (let iter712 in viter711) {
                if (viter711.hasOwnProperty(iter712)) {
                  iter712 = viter711[iter712];
                  iter712.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3714 = input.readSetBegin();
          const _size713 = _rtmp3714.size || 0;
          for (let _i715 = 0; _i715 < _size713; ++_i715) {
            let elem716 = null;
            elem716 = new data_ttypes.TObject();
            elem716.read(input);
            this.success.push(elem716);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter717 in this.success) {
        if (this.success.hasOwnProperty(iter717)) {
          iter717 = this.success[iter717];
          iter717.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3719 = input.readSetBegin();
          const _size718 = _rtmp3719.size || 0;
          for (let _i720 = 0; _i720 < _size718; ++_i720) {
            let elem721 = null;
            elem721 = new data_ttypes.TObject();
            elem721.read(input);
            this.success.push(elem721);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter722 in this.success) {
        if (this.success.hasOwnProperty(iter722)) {
          iter722 = this.success[iter722];
          iter722.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3724 = input.readSetBegin();
          const _size723 = _rtmp3724.size || 0;
          for (let _i725 = 0; _i725 < _size723; ++_i725) {
            let elem726 = null;
            elem726 = new data_ttypes.TObject();
            elem726.read(input);
            this.success.push(elem726);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter727 in this.success) {
        if (this.success.hasOwnProperty(iter727)) {
          iter727 = this.success[iter727];
          iter727.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecord_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3729 = input.readListBegin();
          const _size728 = _rtmp3729.size || 0;
          for (let _i730 = 0; _i730 < _size728; ++_i730) {
            let elem731 = null;
            elem731 = input.readString();
            this.keys.push(elem731);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter732 in this.keys) {
        if (this.keys.hasOwnProperty(iter732)) {
          iter732 = this.keys[iter732];
          output.writeString(iter732);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3734 = input.readMapBegin();
          const _size733 = _rtmp3734.size || 0;
          for (let _i735 = 0; _i735 < _size733; ++_i735) {
            let key736 = null;
            let val737 = null;
            key736 = input.readString();
            val737 = [];
            const _rtmp3739 = input.readSetBegin();
            const _size738 = _rtmp3739.size || 0;
            for (let _i740 = 0; _i740 < _size738; ++_i740) {
              let elem741 = null;
              elem741 = new data_ttypes.TObject();
              elem741.read(input);
              val737.push(elem741);
            }
            input.readSetEnd();
            this.success[key736] = val737;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter742 in this.success) {
        if (this.success.hasOwnProperty(kiter742)) {
          let viter743 = this.success[kiter742];
          output.writeString(kiter742);
          output.writeSetBegin(Thrift.Type.STRUCT, viter743.length);
          for (let iter744 in viter743) {
            if (viter743.hasOwnProperty(iter744)) {
              iter744 = viter743[iter744];
              iter744.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecordTime_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3746 = input.readListBegin();
          const _size745 = _rtmp3746.size || 0;
          for (let _i747 = 0; _i747 < _size745; ++_i747) {
            let elem748 = null;
            elem748 = input.readString();
            this.keys.push(elem748);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter749 in this.keys) {
        if (this.keys.hasOwnProperty(iter749)) {
          iter749 = this.keys[iter749];
          output.writeString(iter749);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3751 = input.readMapBegin();
          const _size750 = _rtmp3751.size || 0;
          for (let _i752 = 0; _i752 < _size750; ++_i752) {
            let key753 = null;
            let val754 = null;
            key753 = input.readString();
            val754 = [];
            const _rtmp3756 = input.readSetBegin();
            const _size755 = _rtmp3756.size || 0;
            for (let _i757 = 0; _i757 < _size755; ++_i757) {
              let elem758 = null;
              elem758 = new data_ttypes.TObject();
              elem758.read(input);
              val754.push(elem758);
            }
            input.readSetEnd();
            this.success[key753] = val754;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter759 in this.success) {
        if (this.success.hasOwnProperty(kiter759)) {
          let viter760 = this.success[kiter759];
          output.writeString(kiter759);
          output.writeSetBegin(Thrift.Type.STRUCT, viter760.length);
          for (let iter761 in viter760) {
            if (viter760.hasOwnProperty(iter761)) {
              iter761 = viter760[iter761];
              iter761.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecordTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3763 = input.readListBegin();
          const _size762 = _rtmp3763.size || 0;
          for (let _i764 = 0; _i764 < _size762; ++_i764) {
            let elem765 = null;
            elem765 = input.readString();
            this.keys.push(elem765);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter766 in this.keys) {
        if (this.keys.hasOwnProperty(iter766)) {
          iter766 = this.keys[iter766];
          output.writeString(iter766);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3768 = input.readMapBegin();
          const _size767 = _rtmp3768.size || 0;
          for (let _i769 = 0; _i769 < _size767; ++_i769) {
            let key770 = null;
            let val771 = null;
            key770 = input.readString();
            val771 = [];
            const _rtmp3773 = input.readSetBegin();
            const _size772 = _rtmp3773.size || 0;
            for (let _i774 = 0; _i774 < _size772; ++_i774) {
              let elem775 = null;
              elem775 = new data_ttypes.TObject();
              elem775.read(input);
              val771.push(elem775);
            }
            input.readSetEnd();
            this.success[key770] = val771;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter776 in this.success) {
        if (this.success.hasOwnProperty(kiter776)) {
          let viter777 = this.success[kiter776];
          output.writeString(kiter776);
          output.writeSetBegin(Thrift.Type.STRUCT, viter777.length);
          for (let iter778 in viter777) {
            if (viter777.hasOwnProperty(iter778)) {
              iter778 = viter777[iter778];
              iter778.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecords_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3780 = input.readListBegin();
          const _size779 = _rtmp3780.size || 0;
          for (let _i781 = 0; _i781 < _size779; ++_i781) {
            let elem782 = null;
            elem782 = input.readString();
            this.keys.push(elem782);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3784 = input.readListBegin();
          const _size783 = _rtmp3784.size || 0;
          for (let _i785 = 0; _i785 < _size783; ++_i785) {
            let elem786 = null;
            elem786 = input.readI64();
            this.records.push(elem786);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter787 in this.keys) {
        if (this.keys.hasOwnProperty(iter787)) {
          iter787 = this.keys[iter787];
          output.writeString(iter787);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter788 in this.records) {
        if (this.records.hasOwnProperty(iter788)) {
          iter788 = this.records[iter788];
          output.writeI64(iter788);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3790 = input.readMapBegin();
          const _size789 = _rtmp3790.size || 0;
          for (let _i791 = 0; _i791 < _size789; ++_i791) {
            let key792 = null;
            let val793 = null;
            key792 = input.readI64();
            val793 = {};
            const _rtmp3795 = input.readMapBegin();
            const _size794 = _rtmp3795.size || 0;
            for (let _i796 = 0; _i796 < _size794; ++_i796) {
              let key797 = null;
              let val798 = null;
              key797 = input.readString();
              val798 = [];
              const _rtmp3800 = input.readSetBegin();
              const _size799 = _rtmp3800.size || 0;
              for (let _i801 = 0; _i801 < _size799; ++_i801) {
                let elem802 = null;
                elem802 = new data_ttypes.TObject();
                elem802.read(input);
                val798.push(elem802);
              }
              input.readSetEnd();
              val793[key797] = val798;
            }
            input.readMapEnd();
            this.success[key792] = val793;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter803 in this.success) {
        if (this.success.hasOwnProperty(kiter803)) {
          let viter804 = this.success[kiter803];
          output.writeI64(kiter803);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter804));
          for (let kiter805 in viter804) {
            if (viter804.hasOwnProperty(kiter805)) {
              let viter806 = viter804[kiter805];
              output.writeString(kiter805);
              output.writeSetBegin(Thrift.Type.STRUCT, viter806.length);
              for (let iter807 in viter806) {
                if (viter806.hasOwnProperty(iter807)) {
                  iter807 = viter806[iter807];
                  iter807.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3809 = input.readListBegin();
          const _size808 = _rtmp3809.size || 0;
          for (let _i810 = 0; _i810 < _size808; ++_i810) {
            let elem811 = null;
            elem811 = input.readI64();
            this.records.push(elem811);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter812 in this.records) {
        if (this.records.hasOwnProperty(iter812)) {
          iter812 = this.records[iter812];
          output.writeI64(iter812);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3814 = input.readMapBegin();
          const _size813 = _rtmp3814.size || 0;
          for (let _i815 = 0; _i815 < _size813; ++_i815) {
            let key816 = null;
            let val817 = null;
            key816 = input.readI64();
            val817 = [];
            const _rtmp3819 = input.readSetBegin();
            const _size818 = _rtmp3819.size || 0;
            for (let _i820 = 0; _i820 < _size818; ++_i820) {
              let elem821 = null;
              elem821 = new data_ttypes.TObject();
              elem821.read(input);
              val817.push(elem821);
            }
            input.readSetEnd();
            this.success[key816] = val817;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter822 in this.success) {
        if (this.success.hasOwnProperty(kiter822)) {
          let viter823 = this.success[kiter822];
          output.writeI64(kiter822);
          output.writeSetBegin(Thrift.Type.STRUCT, viter823.length);
          for (let iter824 in viter823) {
            if (viter823.hasOwnProperty(iter824)) {
              iter824 = viter823[iter824];
              iter824.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3826 = input.readListBegin();
          const _size825 = _rtmp3826.size || 0;
          for (let _i827 = 0; _i827 < _size825; ++_i827) {
            let elem828 = null;
            elem828 = input.readI64();
            this.records.push(elem828);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter829 in this.records) {
        if (this.records.hasOwnProperty(iter829)) {
          iter829 = this.records[iter829];
          output.writeI64(iter829);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3831 = input.readMapBegin();
          const _size830 = _rtmp3831.size || 0;
          for (let _i832 = 0; _i832 < _size830; ++_i832) {
            let key833 = null;
            let val834 = null;
            key833 = input.readI64();
            val834 = [];
            const _rtmp3836 = input.readSetBegin();
            const _size835 = _rtmp3836.size || 0;
            for (let _i837 = 0; _i837 < _size835; ++_i837) {
              let elem838 = null;
              elem838 = new data_ttypes.TObject();
              elem838.read(input);
              val834.push(elem838);
            }
            input.readSetEnd();
            this.success[key833] = val834;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter839 in this.success) {
        if (this.success.hasOwnProperty(kiter839)) {
          let viter840 = this.success[kiter839];
          output.writeI64(kiter839);
          output.writeSetBegin(Thrift.Type.STRUCT, viter840.length);
          for (let iter841 in viter840) {
            if (viter840.hasOwnProperty(iter841)) {
              iter841 = viter840[iter841];
              iter841.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3843 = input.readListBegin();
          const _size842 = _rtmp3843.size || 0;
          for (let _i844 = 0; _i844 < _size842; ++_i844) {
            let elem845 = null;
            elem845 = input.readI64();
            this.records.push(elem845);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter846 in this.records) {
        if (this.records.hasOwnProperty(iter846)) {
          iter846 = this.records[iter846];
          output.writeI64(iter846);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3848 = input.readMapBegin();
          const _size847 = _rtmp3848.size || 0;
          for (let _i849 = 0; _i849 < _size847; ++_i849) {
            let key850 = null;
            let val851 = null;
            key850 = input.readI64();
            val851 = [];
            const _rtmp3853 = input.readSetBegin();
            const _size852 = _rtmp3853.size || 0;
            for (let _i854 = 0; _i854 < _size852; ++_i854) {
              let elem855 = null;
              elem855 = new data_ttypes.TObject();
              elem855.read(input);
              val851.push(elem855);
            }
            input.readSetEnd();
            this.success[key850] = val851;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter856 in this.success) {
        if (this.success.hasOwnProperty(kiter856)) {
          let viter857 = this.success[kiter856];
          output.writeI64(kiter856);
          output.writeSetBegin(Thrift.Type.STRUCT, viter857.length);
          for (let iter858 in viter857) {
            if (viter857.hasOwnProperty(iter858)) {
              iter858 = viter857[iter858];
              iter858.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecordsTime_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3860 = input.readListBegin();
          const _size859 = _rtmp3860.size || 0;
          for (let _i861 = 0; _i861 < _size859; ++_i861) {
            let elem862 = null;
            elem862 = input.readString();
            this.keys.push(elem862);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3864 = input.readListBegin();
          const _size863 = _rtmp3864.size || 0;
          for (let _i865 = 0; _i865 < _size863; ++_i865) {
            let elem866 = null;
            elem866 = input.readI64();
            this.records.push(elem866);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter867 in this.keys) {
        if (this.keys.hasOwnProperty(iter867)) {
          iter867 = this.keys[iter867];
          output.writeString(iter867);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter868 in this.records) {
        if (this.records.hasOwnProperty(iter868)) {
          iter868 = this.records[iter868];
          output.writeI64(iter868);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3870 = input.readMapBegin();
          const _size869 = _rtmp3870.size || 0;
          for (let _i871 = 0; _i871 < _size869; ++_i871) {
            let key872 = null;
            let val873 = null;
            key872 = input.readI64();
            val873 = {};
            const _rtmp3875 = input.readMapBegin();
            const _size874 = _rtmp3875.size || 0;
            for (let _i876 = 0; _i876 < _size874; ++_i876) {
              let key877 = null;
              let val878 = null;
              key877 = input.readString();
              val878 = [];
              const _rtmp3880 = input.readSetBegin();
              const _size879 = _rtmp3880.size || 0;
              for (let _i881 = 0; _i881 < _size879; ++_i881) {
                let elem882 = null;
                elem882 = new data_ttypes.TObject();
                elem882.read(input);
                val878.push(elem882);
              }
              input.readSetEnd();
              val873[key877] = val878;
            }
            input.readMapEnd();
            this.success[key872] = val873;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter883 in this.success) {
        if (this.success.hasOwnProperty(kiter883)) {
          let viter884 = this.success[kiter883];
          output.writeI64(kiter883);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter884));
          for (let kiter885 in viter884) {
            if (viter884.hasOwnProperty(kiter885)) {
              let viter886 = viter884[kiter885];
              output.writeString(kiter885);
              output.writeSetBegin(Thrift.Type.STRUCT, viter886.length);
              for (let iter887 in viter886) {
                if (viter886.hasOwnProperty(iter887)) {
                  iter887 = viter886[iter887];
                  iter887.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecordsTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp3889 = input.readListBegin();
          const _size888 = _rtmp3889.size || 0;
          for (let _i890 = 0; _i890 < _size888; ++_i890) {
            let elem891 = null;
            elem891 = input.readString();
            this.keys.push(elem891);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp3893 = input.readListBegin();
          const _size892 = _rtmp3893.size || 0;
          for (let _i894 = 0; _i894 < _size892; ++_i894) {
            let elem895 = null;
            elem895 = input.readI64();
            this.records.push(elem895);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter896 in this.keys) {
        if (this.keys.hasOwnProperty(iter896)) {
          iter896 = this.keys[iter896];
          output.writeString(iter896);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter897 in this.records) {
        if (this.records.hasOwnProperty(iter897)) {
          iter897 = this.records[iter897];
          output.writeI64(iter897);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3899 = input.readMapBegin();
          const _size898 = _rtmp3899.size || 0;
          for (let _i900 = 0; _i900 < _size898; ++_i900) {
            let key901 = null;
            let val902 = null;
            key901 = input.readI64();
            val902 = {};
            const _rtmp3904 = input.readMapBegin();
            const _size903 = _rtmp3904.size || 0;
            for (let _i905 = 0; _i905 < _size903; ++_i905) {
              let key906 = null;
              let val907 = null;
              key906 = input.readString();
              val907 = [];
              const _rtmp3909 = input.readSetBegin();
              const _size908 = _rtmp3909.size || 0;
              for (let _i910 = 0; _i910 < _size908; ++_i910) {
                let elem911 = null;
                elem911 = new data_ttypes.TObject();
                elem911.read(input);
                val907.push(elem911);
              }
              input.readSetEnd();
              val902[key906] = val907;
            }
            input.readMapEnd();
            this.success[key901] = val902;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter912 in this.success) {
        if (this.success.hasOwnProperty(kiter912)) {
          let viter913 = this.success[kiter912];
          output.writeI64(kiter912);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter913));
          for (let kiter914 in viter913) {
            if (viter913.hasOwnProperty(kiter914)) {
              let viter915 = viter913[kiter914];
              output.writeString(kiter914);
              output.writeSetBegin(Thrift.Type.STRUCT, viter915.length);
              for (let iter916 in viter915) {
                if (viter915.hasOwnProperty(iter916)) {
                  iter916 = viter915[iter916];
                  iter916.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCriteria_args = class {
  constructor(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3918 = input.readMapBegin();
          const _size917 = _rtmp3918.size || 0;
          for (let _i919 = 0; _i919 < _size917; ++_i919) {
            let key920 = null;
            let val921 = null;
            key920 = input.readI64();
            val921 = {};
            const _rtmp3923 = input.readMapBegin();
            const _size922 = _rtmp3923.size || 0;
            for (let _i924 = 0; _i924 < _size922; ++_i924) {
              let key925 = null;
              let val926 = null;
              key925 = input.readString();
              val926 = [];
              const _rtmp3928 = input.readSetBegin();
              const _size927 = _rtmp3928.size || 0;
              for (let _i929 = 0; _i929 < _size927; ++_i929) {
                let elem930 = null;
                elem930 = new data_ttypes.TObject();
                elem930.read(input);
                val926.push(elem930);
              }
              input.readSetEnd();
              val921[key925] = val926;
            }
            input.readMapEnd();
            this.success[key920] = val921;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter931 in this.success) {
        if (this.success.hasOwnProperty(kiter931)) {
          let viter932 = this.success[kiter931];
          output.writeI64(kiter931);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter932));
          for (let kiter933 in viter932) {
            if (viter932.hasOwnProperty(kiter933)) {
              let viter934 = viter932[kiter933];
              output.writeString(kiter933);
              output.writeSetBegin(Thrift.Type.STRUCT, viter934.length);
              for (let iter935 in viter934) {
                if (viter934.hasOwnProperty(iter935)) {
                  iter935 = viter934[iter935];
                  iter935.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCcl_args = class {
  constructor(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3937 = input.readMapBegin();
          const _size936 = _rtmp3937.size || 0;
          for (let _i938 = 0; _i938 < _size936; ++_i938) {
            let key939 = null;
            let val940 = null;
            key939 = input.readI64();
            val940 = {};
            const _rtmp3942 = input.readMapBegin();
            const _size941 = _rtmp3942.size || 0;
            for (let _i943 = 0; _i943 < _size941; ++_i943) {
              let key944 = null;
              let val945 = null;
              key944 = input.readString();
              val945 = [];
              const _rtmp3947 = input.readSetBegin();
              const _size946 = _rtmp3947.size || 0;
              for (let _i948 = 0; _i948 < _size946; ++_i948) {
                let elem949 = null;
                elem949 = new data_ttypes.TObject();
                elem949.read(input);
                val945.push(elem949);
              }
              input.readSetEnd();
              val940[key944] = val945;
            }
            input.readMapEnd();
            this.success[key939] = val940;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter950 in this.success) {
        if (this.success.hasOwnProperty(kiter950)) {
          let viter951 = this.success[kiter950];
          output.writeI64(kiter950);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter951));
          for (let kiter952 in viter951) {
            if (viter951.hasOwnProperty(kiter952)) {
              let viter953 = viter951[kiter952];
              output.writeString(kiter952);
              output.writeSetBegin(Thrift.Type.STRUCT, viter953.length);
              for (let iter954 in viter953) {
                if (viter953.hasOwnProperty(iter954)) {
                  iter954 = viter953[iter954];
                  iter954.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCriteriaTime_args = class {
  constructor(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTime_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3956 = input.readMapBegin();
          const _size955 = _rtmp3956.size || 0;
          for (let _i957 = 0; _i957 < _size955; ++_i957) {
            let key958 = null;
            let val959 = null;
            key958 = input.readI64();
            val959 = {};
            const _rtmp3961 = input.readMapBegin();
            const _size960 = _rtmp3961.size || 0;
            for (let _i962 = 0; _i962 < _size960; ++_i962) {
              let key963 = null;
              let val964 = null;
              key963 = input.readString();
              val964 = [];
              const _rtmp3966 = input.readSetBegin();
              const _size965 = _rtmp3966.size || 0;
              for (let _i967 = 0; _i967 < _size965; ++_i967) {
                let elem968 = null;
                elem968 = new data_ttypes.TObject();
                elem968.read(input);
                val964.push(elem968);
              }
              input.readSetEnd();
              val959[key963] = val964;
            }
            input.readMapEnd();
            this.success[key958] = val959;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter969 in this.success) {
        if (this.success.hasOwnProperty(kiter969)) {
          let viter970 = this.success[kiter969];
          output.writeI64(kiter969);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter970));
          for (let kiter971 in viter970) {
            if (viter970.hasOwnProperty(kiter971)) {
              let viter972 = viter970[kiter971];
              output.writeString(kiter971);
              output.writeSetBegin(Thrift.Type.STRUCT, viter972.length);
              for (let iter973 in viter972) {
                if (viter972.hasOwnProperty(iter973)) {
                  iter973 = viter972[iter973];
                  iter973.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCriteriaTimestr_args = class {
  constructor(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTimestr_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3975 = input.readMapBegin();
          const _size974 = _rtmp3975.size || 0;
          for (let _i976 = 0; _i976 < _size974; ++_i976) {
            let key977 = null;
            let val978 = null;
            key977 = input.readI64();
            val978 = {};
            const _rtmp3980 = input.readMapBegin();
            const _size979 = _rtmp3980.size || 0;
            for (let _i981 = 0; _i981 < _size979; ++_i981) {
              let key982 = null;
              let val983 = null;
              key982 = input.readString();
              val983 = [];
              const _rtmp3985 = input.readSetBegin();
              const _size984 = _rtmp3985.size || 0;
              for (let _i986 = 0; _i986 < _size984; ++_i986) {
                let elem987 = null;
                elem987 = new data_ttypes.TObject();
                elem987.read(input);
                val983.push(elem987);
              }
              input.readSetEnd();
              val978[key982] = val983;
            }
            input.readMapEnd();
            this.success[key977] = val978;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter988 in this.success) {
        if (this.success.hasOwnProperty(kiter988)) {
          let viter989 = this.success[kiter988];
          output.writeI64(kiter988);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter989));
          for (let kiter990 in viter989) {
            if (viter989.hasOwnProperty(kiter990)) {
              let viter991 = viter989[kiter990];
              output.writeString(kiter990);
              output.writeSetBegin(Thrift.Type.STRUCT, viter991.length);
              for (let iter992 in viter991) {
                if (viter991.hasOwnProperty(iter992)) {
                  iter992 = viter991[iter992];
                  iter992.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCclTime_args = class {
  constructor(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCclTime_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3994 = input.readMapBegin();
          const _size993 = _rtmp3994.size || 0;
          for (let _i995 = 0; _i995 < _size993; ++_i995) {
            let key996 = null;
            let val997 = null;
            key996 = input.readI64();
            val997 = {};
            const _rtmp3999 = input.readMapBegin();
            const _size998 = _rtmp3999.size || 0;
            for (let _i1000 = 0; _i1000 < _size998; ++_i1000) {
              let key1001 = null;
              let val1002 = null;
              key1001 = input.readString();
              val1002 = [];
              const _rtmp31004 = input.readSetBegin();
              const _size1003 = _rtmp31004.size || 0;
              for (let _i1005 = 0; _i1005 < _size1003; ++_i1005) {
                let elem1006 = null;
                elem1006 = new data_ttypes.TObject();
                elem1006.read(input);
                val1002.push(elem1006);
              }
              input.readSetEnd();
              val997[key1001] = val1002;
            }
            input.readMapEnd();
            this.success[key996] = val997;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1007 in this.success) {
        if (this.success.hasOwnProperty(kiter1007)) {
          let viter1008 = this.success[kiter1007];
          output.writeI64(kiter1007);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1008));
          for (let kiter1009 in viter1008) {
            if (viter1008.hasOwnProperty(kiter1009)) {
              let viter1010 = viter1008[kiter1009];
              output.writeString(kiter1009);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1010.length);
              for (let iter1011 in viter1010) {
                if (viter1010.hasOwnProperty(iter1011)) {
                  iter1011 = viter1010[iter1011];
                  iter1011.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCclTimestr_args = class {
  constructor(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCclTimestr_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31013 = input.readMapBegin();
          const _size1012 = _rtmp31013.size || 0;
          for (let _i1014 = 0; _i1014 < _size1012; ++_i1014) {
            let key1015 = null;
            let val1016 = null;
            key1015 = input.readI64();
            val1016 = {};
            const _rtmp31018 = input.readMapBegin();
            const _size1017 = _rtmp31018.size || 0;
            for (let _i1019 = 0; _i1019 < _size1017; ++_i1019) {
              let key1020 = null;
              let val1021 = null;
              key1020 = input.readString();
              val1021 = [];
              const _rtmp31023 = input.readSetBegin();
              const _size1022 = _rtmp31023.size || 0;
              for (let _i1024 = 0; _i1024 < _size1022; ++_i1024) {
                let elem1025 = null;
                elem1025 = new data_ttypes.TObject();
                elem1025.read(input);
                val1021.push(elem1025);
              }
              input.readSetEnd();
              val1016[key1020] = val1021;
            }
            input.readMapEnd();
            this.success[key1015] = val1016;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1026 in this.success) {
        if (this.success.hasOwnProperty(kiter1026)) {
          let viter1027 = this.success[kiter1026];
          output.writeI64(kiter1026);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1027));
          for (let kiter1028 in viter1027) {
            if (viter1027.hasOwnProperty(kiter1028)) {
              let viter1029 = viter1027[kiter1028];
              output.writeString(kiter1028);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1029.length);
              for (let iter1030 in viter1029) {
                if (viter1029.hasOwnProperty(iter1030)) {
                  iter1030 = viter1029[iter1030];
                  iter1030.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31032 = input.readMapBegin();
          const _size1031 = _rtmp31032.size || 0;
          for (let _i1033 = 0; _i1033 < _size1031; ++_i1033) {
            let key1034 = null;
            let val1035 = null;
            key1034 = input.readI64();
            val1035 = [];
            const _rtmp31037 = input.readSetBegin();
            const _size1036 = _rtmp31037.size || 0;
            for (let _i1038 = 0; _i1038 < _size1036; ++_i1038) {
              let elem1039 = null;
              elem1039 = new data_ttypes.TObject();
              elem1039.read(input);
              val1035.push(elem1039);
            }
            input.readSetEnd();
            this.success[key1034] = val1035;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1040 in this.success) {
        if (this.success.hasOwnProperty(kiter1040)) {
          let viter1041 = this.success[kiter1040];
          output.writeI64(kiter1040);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1041.length);
          for (let iter1042 in viter1041) {
            if (viter1041.hasOwnProperty(iter1042)) {
              iter1042 = viter1041[iter1042];
              iter1042.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31044 = input.readMapBegin();
          const _size1043 = _rtmp31044.size || 0;
          for (let _i1045 = 0; _i1045 < _size1043; ++_i1045) {
            let key1046 = null;
            let val1047 = null;
            key1046 = input.readI64();
            val1047 = [];
            const _rtmp31049 = input.readSetBegin();
            const _size1048 = _rtmp31049.size || 0;
            for (let _i1050 = 0; _i1050 < _size1048; ++_i1050) {
              let elem1051 = null;
              elem1051 = new data_ttypes.TObject();
              elem1051.read(input);
              val1047.push(elem1051);
            }
            input.readSetEnd();
            this.success[key1046] = val1047;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1052 in this.success) {
        if (this.success.hasOwnProperty(kiter1052)) {
          let viter1053 = this.success[kiter1052];
          output.writeI64(kiter1052);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1053.length);
          for (let iter1054 in viter1053) {
            if (viter1053.hasOwnProperty(iter1054)) {
              iter1054 = viter1053[iter1054];
              iter1054.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31056 = input.readMapBegin();
          const _size1055 = _rtmp31056.size || 0;
          for (let _i1057 = 0; _i1057 < _size1055; ++_i1057) {
            let key1058 = null;
            let val1059 = null;
            key1058 = input.readI64();
            val1059 = [];
            const _rtmp31061 = input.readSetBegin();
            const _size1060 = _rtmp31061.size || 0;
            for (let _i1062 = 0; _i1062 < _size1060; ++_i1062) {
              let elem1063 = null;
              elem1063 = new data_ttypes.TObject();
              elem1063.read(input);
              val1059.push(elem1063);
            }
            input.readSetEnd();
            this.success[key1058] = val1059;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1064 in this.success) {
        if (this.success.hasOwnProperty(kiter1064)) {
          let viter1065 = this.success[kiter1064];
          output.writeI64(kiter1064);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1065.length);
          for (let iter1066 in viter1065) {
            if (viter1065.hasOwnProperty(iter1066)) {
              iter1066 = viter1065[iter1066];
              iter1066.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31068 = input.readMapBegin();
          const _size1067 = _rtmp31068.size || 0;
          for (let _i1069 = 0; _i1069 < _size1067; ++_i1069) {
            let key1070 = null;
            let val1071 = null;
            key1070 = input.readI64();
            val1071 = [];
            const _rtmp31073 = input.readSetBegin();
            const _size1072 = _rtmp31073.size || 0;
            for (let _i1074 = 0; _i1074 < _size1072; ++_i1074) {
              let elem1075 = null;
              elem1075 = new data_ttypes.TObject();
              elem1075.read(input);
              val1071.push(elem1075);
            }
            input.readSetEnd();
            this.success[key1070] = val1071;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1076 in this.success) {
        if (this.success.hasOwnProperty(kiter1076)) {
          let viter1077 = this.success[kiter1076];
          output.writeI64(kiter1076);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1077.length);
          for (let iter1078 in viter1077) {
            if (viter1077.hasOwnProperty(iter1078)) {
              iter1078 = viter1077[iter1078];
              iter1078.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31080 = input.readMapBegin();
          const _size1079 = _rtmp31080.size || 0;
          for (let _i1081 = 0; _i1081 < _size1079; ++_i1081) {
            let key1082 = null;
            let val1083 = null;
            key1082 = input.readI64();
            val1083 = [];
            const _rtmp31085 = input.readSetBegin();
            const _size1084 = _rtmp31085.size || 0;
            for (let _i1086 = 0; _i1086 < _size1084; ++_i1086) {
              let elem1087 = null;
              elem1087 = new data_ttypes.TObject();
              elem1087.read(input);
              val1083.push(elem1087);
            }
            input.readSetEnd();
            this.success[key1082] = val1083;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1088 in this.success) {
        if (this.success.hasOwnProperty(kiter1088)) {
          let viter1089 = this.success[kiter1088];
          output.writeI64(kiter1088);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1089.length);
          for (let iter1090 in viter1089) {
            if (viter1089.hasOwnProperty(iter1090)) {
              iter1090 = viter1089[iter1090];
              iter1090.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31092 = input.readMapBegin();
          const _size1091 = _rtmp31092.size || 0;
          for (let _i1093 = 0; _i1093 < _size1091; ++_i1093) {
            let key1094 = null;
            let val1095 = null;
            key1094 = input.readI64();
            val1095 = [];
            const _rtmp31097 = input.readSetBegin();
            const _size1096 = _rtmp31097.size || 0;
            for (let _i1098 = 0; _i1098 < _size1096; ++_i1098) {
              let elem1099 = null;
              elem1099 = new data_ttypes.TObject();
              elem1099.read(input);
              val1095.push(elem1099);
            }
            input.readSetEnd();
            this.success[key1094] = val1095;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1100 in this.success) {
        if (this.success.hasOwnProperty(kiter1100)) {
          let viter1101 = this.success[kiter1100];
          output.writeI64(kiter1100);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1101.length);
          for (let iter1102 in viter1101) {
            if (viter1101.hasOwnProperty(iter1102)) {
              iter1102 = viter1101[iter1102];
              iter1102.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCriteria_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31104 = input.readListBegin();
          const _size1103 = _rtmp31104.size || 0;
          for (let _i1105 = 0; _i1105 < _size1103; ++_i1105) {
            let elem1106 = null;
            elem1106 = input.readString();
            this.keys.push(elem1106);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1107 in this.keys) {
        if (this.keys.hasOwnProperty(iter1107)) {
          iter1107 = this.keys[iter1107];
          output.writeString(iter1107);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31109 = input.readMapBegin();
          const _size1108 = _rtmp31109.size || 0;
          for (let _i1110 = 0; _i1110 < _size1108; ++_i1110) {
            let key1111 = null;
            let val1112 = null;
            key1111 = input.readI64();
            val1112 = {};
            const _rtmp31114 = input.readMapBegin();
            const _size1113 = _rtmp31114.size || 0;
            for (let _i1115 = 0; _i1115 < _size1113; ++_i1115) {
              let key1116 = null;
              let val1117 = null;
              key1116 = input.readString();
              val1117 = [];
              const _rtmp31119 = input.readSetBegin();
              const _size1118 = _rtmp31119.size || 0;
              for (let _i1120 = 0; _i1120 < _size1118; ++_i1120) {
                let elem1121 = null;
                elem1121 = new data_ttypes.TObject();
                elem1121.read(input);
                val1117.push(elem1121);
              }
              input.readSetEnd();
              val1112[key1116] = val1117;
            }
            input.readMapEnd();
            this.success[key1111] = val1112;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1122 in this.success) {
        if (this.success.hasOwnProperty(kiter1122)) {
          let viter1123 = this.success[kiter1122];
          output.writeI64(kiter1122);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1123));
          for (let kiter1124 in viter1123) {
            if (viter1123.hasOwnProperty(kiter1124)) {
              let viter1125 = viter1123[kiter1124];
              output.writeString(kiter1124);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1125.length);
              for (let iter1126 in viter1125) {
                if (viter1125.hasOwnProperty(iter1126)) {
                  iter1126 = viter1125[iter1126];
                  iter1126.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCcl_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31128 = input.readListBegin();
          const _size1127 = _rtmp31128.size || 0;
          for (let _i1129 = 0; _i1129 < _size1127; ++_i1129) {
            let elem1130 = null;
            elem1130 = input.readString();
            this.keys.push(elem1130);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1131 in this.keys) {
        if (this.keys.hasOwnProperty(iter1131)) {
          iter1131 = this.keys[iter1131];
          output.writeString(iter1131);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31133 = input.readMapBegin();
          const _size1132 = _rtmp31133.size || 0;
          for (let _i1134 = 0; _i1134 < _size1132; ++_i1134) {
            let key1135 = null;
            let val1136 = null;
            key1135 = input.readI64();
            val1136 = {};
            const _rtmp31138 = input.readMapBegin();
            const _size1137 = _rtmp31138.size || 0;
            for (let _i1139 = 0; _i1139 < _size1137; ++_i1139) {
              let key1140 = null;
              let val1141 = null;
              key1140 = input.readString();
              val1141 = [];
              const _rtmp31143 = input.readSetBegin();
              const _size1142 = _rtmp31143.size || 0;
              for (let _i1144 = 0; _i1144 < _size1142; ++_i1144) {
                let elem1145 = null;
                elem1145 = new data_ttypes.TObject();
                elem1145.read(input);
                val1141.push(elem1145);
              }
              input.readSetEnd();
              val1136[key1140] = val1141;
            }
            input.readMapEnd();
            this.success[key1135] = val1136;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1146 in this.success) {
        if (this.success.hasOwnProperty(kiter1146)) {
          let viter1147 = this.success[kiter1146];
          output.writeI64(kiter1146);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1147));
          for (let kiter1148 in viter1147) {
            if (viter1147.hasOwnProperty(kiter1148)) {
              let viter1149 = viter1147[kiter1148];
              output.writeString(kiter1148);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1149.length);
              for (let iter1150 in viter1149) {
                if (viter1149.hasOwnProperty(iter1150)) {
                  iter1150 = viter1149[iter1150];
                  iter1150.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCriteriaTime_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31152 = input.readListBegin();
          const _size1151 = _rtmp31152.size || 0;
          for (let _i1153 = 0; _i1153 < _size1151; ++_i1153) {
            let elem1154 = null;
            elem1154 = input.readString();
            this.keys.push(elem1154);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1155 in this.keys) {
        if (this.keys.hasOwnProperty(iter1155)) {
          iter1155 = this.keys[iter1155];
          output.writeString(iter1155);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31157 = input.readMapBegin();
          const _size1156 = _rtmp31157.size || 0;
          for (let _i1158 = 0; _i1158 < _size1156; ++_i1158) {
            let key1159 = null;
            let val1160 = null;
            key1159 = input.readI64();
            val1160 = {};
            const _rtmp31162 = input.readMapBegin();
            const _size1161 = _rtmp31162.size || 0;
            for (let _i1163 = 0; _i1163 < _size1161; ++_i1163) {
              let key1164 = null;
              let val1165 = null;
              key1164 = input.readString();
              val1165 = [];
              const _rtmp31167 = input.readSetBegin();
              const _size1166 = _rtmp31167.size || 0;
              for (let _i1168 = 0; _i1168 < _size1166; ++_i1168) {
                let elem1169 = null;
                elem1169 = new data_ttypes.TObject();
                elem1169.read(input);
                val1165.push(elem1169);
              }
              input.readSetEnd();
              val1160[key1164] = val1165;
            }
            input.readMapEnd();
            this.success[key1159] = val1160;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1170 in this.success) {
        if (this.success.hasOwnProperty(kiter1170)) {
          let viter1171 = this.success[kiter1170];
          output.writeI64(kiter1170);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1171));
          for (let kiter1172 in viter1171) {
            if (viter1171.hasOwnProperty(kiter1172)) {
              let viter1173 = viter1171[kiter1172];
              output.writeString(kiter1172);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1173.length);
              for (let iter1174 in viter1173) {
                if (viter1173.hasOwnProperty(iter1174)) {
                  iter1174 = viter1173[iter1174];
                  iter1174.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCriteriaTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31176 = input.readListBegin();
          const _size1175 = _rtmp31176.size || 0;
          for (let _i1177 = 0; _i1177 < _size1175; ++_i1177) {
            let elem1178 = null;
            elem1178 = input.readString();
            this.keys.push(elem1178);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1179 in this.keys) {
        if (this.keys.hasOwnProperty(iter1179)) {
          iter1179 = this.keys[iter1179];
          output.writeString(iter1179);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31181 = input.readMapBegin();
          const _size1180 = _rtmp31181.size || 0;
          for (let _i1182 = 0; _i1182 < _size1180; ++_i1182) {
            let key1183 = null;
            let val1184 = null;
            key1183 = input.readI64();
            val1184 = {};
            const _rtmp31186 = input.readMapBegin();
            const _size1185 = _rtmp31186.size || 0;
            for (let _i1187 = 0; _i1187 < _size1185; ++_i1187) {
              let key1188 = null;
              let val1189 = null;
              key1188 = input.readString();
              val1189 = [];
              const _rtmp31191 = input.readSetBegin();
              const _size1190 = _rtmp31191.size || 0;
              for (let _i1192 = 0; _i1192 < _size1190; ++_i1192) {
                let elem1193 = null;
                elem1193 = new data_ttypes.TObject();
                elem1193.read(input);
                val1189.push(elem1193);
              }
              input.readSetEnd();
              val1184[key1188] = val1189;
            }
            input.readMapEnd();
            this.success[key1183] = val1184;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1194 in this.success) {
        if (this.success.hasOwnProperty(kiter1194)) {
          let viter1195 = this.success[kiter1194];
          output.writeI64(kiter1194);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1195));
          for (let kiter1196 in viter1195) {
            if (viter1195.hasOwnProperty(kiter1196)) {
              let viter1197 = viter1195[kiter1196];
              output.writeString(kiter1196);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1197.length);
              for (let iter1198 in viter1197) {
                if (viter1197.hasOwnProperty(iter1198)) {
                  iter1198 = viter1197[iter1198];
                  iter1198.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCclTime_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31200 = input.readListBegin();
          const _size1199 = _rtmp31200.size || 0;
          for (let _i1201 = 0; _i1201 < _size1199; ++_i1201) {
            let elem1202 = null;
            elem1202 = input.readString();
            this.keys.push(elem1202);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1203 in this.keys) {
        if (this.keys.hasOwnProperty(iter1203)) {
          iter1203 = this.keys[iter1203];
          output.writeString(iter1203);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31205 = input.readMapBegin();
          const _size1204 = _rtmp31205.size || 0;
          for (let _i1206 = 0; _i1206 < _size1204; ++_i1206) {
            let key1207 = null;
            let val1208 = null;
            key1207 = input.readI64();
            val1208 = {};
            const _rtmp31210 = input.readMapBegin();
            const _size1209 = _rtmp31210.size || 0;
            for (let _i1211 = 0; _i1211 < _size1209; ++_i1211) {
              let key1212 = null;
              let val1213 = null;
              key1212 = input.readString();
              val1213 = [];
              const _rtmp31215 = input.readSetBegin();
              const _size1214 = _rtmp31215.size || 0;
              for (let _i1216 = 0; _i1216 < _size1214; ++_i1216) {
                let elem1217 = null;
                elem1217 = new data_ttypes.TObject();
                elem1217.read(input);
                val1213.push(elem1217);
              }
              input.readSetEnd();
              val1208[key1212] = val1213;
            }
            input.readMapEnd();
            this.success[key1207] = val1208;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1218 in this.success) {
        if (this.success.hasOwnProperty(kiter1218)) {
          let viter1219 = this.success[kiter1218];
          output.writeI64(kiter1218);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1219));
          for (let kiter1220 in viter1219) {
            if (viter1219.hasOwnProperty(kiter1220)) {
              let viter1221 = viter1219[kiter1220];
              output.writeString(kiter1220);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1221.length);
              for (let iter1222 in viter1221) {
                if (viter1221.hasOwnProperty(iter1222)) {
                  iter1222 = viter1221[iter1222];
                  iter1222.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCclTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31224 = input.readListBegin();
          const _size1223 = _rtmp31224.size || 0;
          for (let _i1225 = 0; _i1225 < _size1223; ++_i1225) {
            let elem1226 = null;
            elem1226 = input.readString();
            this.keys.push(elem1226);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1227 in this.keys) {
        if (this.keys.hasOwnProperty(iter1227)) {
          iter1227 = this.keys[iter1227];
          output.writeString(iter1227);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_selectKeysCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31229 = input.readMapBegin();
          const _size1228 = _rtmp31229.size || 0;
          for (let _i1230 = 0; _i1230 < _size1228; ++_i1230) {
            let key1231 = null;
            let val1232 = null;
            key1231 = input.readI64();
            val1232 = {};
            const _rtmp31234 = input.readMapBegin();
            const _size1233 = _rtmp31234.size || 0;
            for (let _i1235 = 0; _i1235 < _size1233; ++_i1235) {
              let key1236 = null;
              let val1237 = null;
              key1236 = input.readString();
              val1237 = [];
              const _rtmp31239 = input.readSetBegin();
              const _size1238 = _rtmp31239.size || 0;
              for (let _i1240 = 0; _i1240 < _size1238; ++_i1240) {
                let elem1241 = null;
                elem1241 = new data_ttypes.TObject();
                elem1241.read(input);
                val1237.push(elem1241);
              }
              input.readSetEnd();
              val1232[key1236] = val1237;
            }
            input.readMapEnd();
            this.success[key1231] = val1232;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1242 in this.success) {
        if (this.success.hasOwnProperty(kiter1242)) {
          let viter1243 = this.success[kiter1242];
          output.writeI64(kiter1242);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1243));
          for (let kiter1244 in viter1243) {
            if (viter1243.hasOwnProperty(kiter1244)) {
              let viter1245 = viter1243[kiter1244];
              output.writeString(kiter1244);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1245.length);
              for (let iter1246 in viter1245) {
                if (viter1245.hasOwnProperty(iter1246)) {
                  iter1246 = viter1245[iter1246];
                  iter1246.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecord_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31248 = input.readListBegin();
          const _size1247 = _rtmp31248.size || 0;
          for (let _i1249 = 0; _i1249 < _size1247; ++_i1249) {
            let elem1250 = null;
            elem1250 = input.readString();
            this.keys.push(elem1250);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1251 in this.keys) {
        if (this.keys.hasOwnProperty(iter1251)) {
          iter1251 = this.keys[iter1251];
          output.writeString(iter1251);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31253 = input.readMapBegin();
          const _size1252 = _rtmp31253.size || 0;
          for (let _i1254 = 0; _i1254 < _size1252; ++_i1254) {
            let key1255 = null;
            let val1256 = null;
            key1255 = input.readString();
            val1256 = new data_ttypes.TObject();
            val1256.read(input);
            this.success[key1255] = val1256;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1257 in this.success) {
        if (this.success.hasOwnProperty(kiter1257)) {
          let viter1258 = this.success[kiter1257];
          output.writeString(kiter1257);
          viter1258.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecordTime_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31260 = input.readListBegin();
          const _size1259 = _rtmp31260.size || 0;
          for (let _i1261 = 0; _i1261 < _size1259; ++_i1261) {
            let elem1262 = null;
            elem1262 = input.readString();
            this.keys.push(elem1262);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1263 in this.keys) {
        if (this.keys.hasOwnProperty(iter1263)) {
          iter1263 = this.keys[iter1263];
          output.writeString(iter1263);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31265 = input.readMapBegin();
          const _size1264 = _rtmp31265.size || 0;
          for (let _i1266 = 0; _i1266 < _size1264; ++_i1266) {
            let key1267 = null;
            let val1268 = null;
            key1267 = input.readString();
            val1268 = new data_ttypes.TObject();
            val1268.read(input);
            this.success[key1267] = val1268;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1269 in this.success) {
        if (this.success.hasOwnProperty(kiter1269)) {
          let viter1270 = this.success[kiter1269];
          output.writeString(kiter1269);
          viter1270.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecordTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31272 = input.readListBegin();
          const _size1271 = _rtmp31272.size || 0;
          for (let _i1273 = 0; _i1273 < _size1271; ++_i1273) {
            let elem1274 = null;
            elem1274 = input.readString();
            this.keys.push(elem1274);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1275 in this.keys) {
        if (this.keys.hasOwnProperty(iter1275)) {
          iter1275 = this.keys[iter1275];
          output.writeString(iter1275);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31277 = input.readMapBegin();
          const _size1276 = _rtmp31277.size || 0;
          for (let _i1278 = 0; _i1278 < _size1276; ++_i1278) {
            let key1279 = null;
            let val1280 = null;
            key1279 = input.readString();
            val1280 = new data_ttypes.TObject();
            val1280.read(input);
            this.success[key1279] = val1280;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1281 in this.success) {
        if (this.success.hasOwnProperty(kiter1281)) {
          let viter1282 = this.success[kiter1281];
          output.writeString(kiter1281);
          viter1282.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecords_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31284 = input.readListBegin();
          const _size1283 = _rtmp31284.size || 0;
          for (let _i1285 = 0; _i1285 < _size1283; ++_i1285) {
            let elem1286 = null;
            elem1286 = input.readString();
            this.keys.push(elem1286);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31288 = input.readListBegin();
          const _size1287 = _rtmp31288.size || 0;
          for (let _i1289 = 0; _i1289 < _size1287; ++_i1289) {
            let elem1290 = null;
            elem1290 = input.readI64();
            this.records.push(elem1290);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1291 in this.keys) {
        if (this.keys.hasOwnProperty(iter1291)) {
          iter1291 = this.keys[iter1291];
          output.writeString(iter1291);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1292 in this.records) {
        if (this.records.hasOwnProperty(iter1292)) {
          iter1292 = this.records[iter1292];
          output.writeI64(iter1292);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31294 = input.readMapBegin();
          const _size1293 = _rtmp31294.size || 0;
          for (let _i1295 = 0; _i1295 < _size1293; ++_i1295) {
            let key1296 = null;
            let val1297 = null;
            key1296 = input.readI64();
            val1297 = {};
            const _rtmp31299 = input.readMapBegin();
            const _size1298 = _rtmp31299.size || 0;
            for (let _i1300 = 0; _i1300 < _size1298; ++_i1300) {
              let key1301 = null;
              let val1302 = null;
              key1301 = input.readString();
              val1302 = new data_ttypes.TObject();
              val1302.read(input);
              val1297[key1301] = val1302;
            }
            input.readMapEnd();
            this.success[key1296] = val1297;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1303 in this.success) {
        if (this.success.hasOwnProperty(kiter1303)) {
          let viter1304 = this.success[kiter1303];
          output.writeI64(kiter1303);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1304));
          for (let kiter1305 in viter1304) {
            if (viter1304.hasOwnProperty(kiter1305)) {
              let viter1306 = viter1304[kiter1305];
              output.writeString(kiter1305);
              viter1306.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31308 = input.readListBegin();
          const _size1307 = _rtmp31308.size || 0;
          for (let _i1309 = 0; _i1309 < _size1307; ++_i1309) {
            let elem1310 = null;
            elem1310 = input.readI64();
            this.records.push(elem1310);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1311 in this.records) {
        if (this.records.hasOwnProperty(iter1311)) {
          iter1311 = this.records[iter1311];
          output.writeI64(iter1311);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31313 = input.readMapBegin();
          const _size1312 = _rtmp31313.size || 0;
          for (let _i1314 = 0; _i1314 < _size1312; ++_i1314) {
            let key1315 = null;
            let val1316 = null;
            key1315 = input.readI64();
            val1316 = new data_ttypes.TObject();
            val1316.read(input);
            this.success[key1315] = val1316;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1317 in this.success) {
        if (this.success.hasOwnProperty(kiter1317)) {
          let viter1318 = this.success[kiter1317];
          output.writeI64(kiter1317);
          viter1318.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31320 = input.readListBegin();
          const _size1319 = _rtmp31320.size || 0;
          for (let _i1321 = 0; _i1321 < _size1319; ++_i1321) {
            let elem1322 = null;
            elem1322 = input.readI64();
            this.records.push(elem1322);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1323 in this.records) {
        if (this.records.hasOwnProperty(iter1323)) {
          iter1323 = this.records[iter1323];
          output.writeI64(iter1323);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31325 = input.readMapBegin();
          const _size1324 = _rtmp31325.size || 0;
          for (let _i1326 = 0; _i1326 < _size1324; ++_i1326) {
            let key1327 = null;
            let val1328 = null;
            key1327 = input.readI64();
            val1328 = new data_ttypes.TObject();
            val1328.read(input);
            this.success[key1327] = val1328;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1329 in this.success) {
        if (this.success.hasOwnProperty(kiter1329)) {
          let viter1330 = this.success[kiter1329];
          output.writeI64(kiter1329);
          viter1330.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31332 = input.readListBegin();
          const _size1331 = _rtmp31332.size || 0;
          for (let _i1333 = 0; _i1333 < _size1331; ++_i1333) {
            let elem1334 = null;
            elem1334 = input.readI64();
            this.records.push(elem1334);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1335 in this.records) {
        if (this.records.hasOwnProperty(iter1335)) {
          iter1335 = this.records[iter1335];
          output.writeI64(iter1335);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31337 = input.readMapBegin();
          const _size1336 = _rtmp31337.size || 0;
          for (let _i1338 = 0; _i1338 < _size1336; ++_i1338) {
            let key1339 = null;
            let val1340 = null;
            key1339 = input.readI64();
            val1340 = new data_ttypes.TObject();
            val1340.read(input);
            this.success[key1339] = val1340;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1341 in this.success) {
        if (this.success.hasOwnProperty(kiter1341)) {
          let viter1342 = this.success[kiter1341];
          output.writeI64(kiter1341);
          viter1342.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecordsTime_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31344 = input.readListBegin();
          const _size1343 = _rtmp31344.size || 0;
          for (let _i1345 = 0; _i1345 < _size1343; ++_i1345) {
            let elem1346 = null;
            elem1346 = input.readString();
            this.keys.push(elem1346);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31348 = input.readListBegin();
          const _size1347 = _rtmp31348.size || 0;
          for (let _i1349 = 0; _i1349 < _size1347; ++_i1349) {
            let elem1350 = null;
            elem1350 = input.readI64();
            this.records.push(elem1350);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1351 in this.keys) {
        if (this.keys.hasOwnProperty(iter1351)) {
          iter1351 = this.keys[iter1351];
          output.writeString(iter1351);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1352 in this.records) {
        if (this.records.hasOwnProperty(iter1352)) {
          iter1352 = this.records[iter1352];
          output.writeI64(iter1352);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31354 = input.readMapBegin();
          const _size1353 = _rtmp31354.size || 0;
          for (let _i1355 = 0; _i1355 < _size1353; ++_i1355) {
            let key1356 = null;
            let val1357 = null;
            key1356 = input.readI64();
            val1357 = {};
            const _rtmp31359 = input.readMapBegin();
            const _size1358 = _rtmp31359.size || 0;
            for (let _i1360 = 0; _i1360 < _size1358; ++_i1360) {
              let key1361 = null;
              let val1362 = null;
              key1361 = input.readString();
              val1362 = new data_ttypes.TObject();
              val1362.read(input);
              val1357[key1361] = val1362;
            }
            input.readMapEnd();
            this.success[key1356] = val1357;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1363 in this.success) {
        if (this.success.hasOwnProperty(kiter1363)) {
          let viter1364 = this.success[kiter1363];
          output.writeI64(kiter1363);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1364));
          for (let kiter1365 in viter1364) {
            if (viter1364.hasOwnProperty(kiter1365)) {
              let viter1366 = viter1364[kiter1365];
              output.writeString(kiter1365);
              viter1366.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecordsTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31368 = input.readListBegin();
          const _size1367 = _rtmp31368.size || 0;
          for (let _i1369 = 0; _i1369 < _size1367; ++_i1369) {
            let elem1370 = null;
            elem1370 = input.readString();
            this.keys.push(elem1370);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31372 = input.readListBegin();
          const _size1371 = _rtmp31372.size || 0;
          for (let _i1373 = 0; _i1373 < _size1371; ++_i1373) {
            let elem1374 = null;
            elem1374 = input.readI64();
            this.records.push(elem1374);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1375 in this.keys) {
        if (this.keys.hasOwnProperty(iter1375)) {
          iter1375 = this.keys[iter1375];
          output.writeString(iter1375);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1376 in this.records) {
        if (this.records.hasOwnProperty(iter1376)) {
          iter1376 = this.records[iter1376];
          output.writeI64(iter1376);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31378 = input.readMapBegin();
          const _size1377 = _rtmp31378.size || 0;
          for (let _i1379 = 0; _i1379 < _size1377; ++_i1379) {
            let key1380 = null;
            let val1381 = null;
            key1380 = input.readI64();
            val1381 = {};
            const _rtmp31383 = input.readMapBegin();
            const _size1382 = _rtmp31383.size || 0;
            for (let _i1384 = 0; _i1384 < _size1382; ++_i1384) {
              let key1385 = null;
              let val1386 = null;
              key1385 = input.readString();
              val1386 = new data_ttypes.TObject();
              val1386.read(input);
              val1381[key1385] = val1386;
            }
            input.readMapEnd();
            this.success[key1380] = val1381;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1387 in this.success) {
        if (this.success.hasOwnProperty(kiter1387)) {
          let viter1388 = this.success[kiter1387];
          output.writeI64(kiter1387);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1388));
          for (let kiter1389 in viter1388) {
            if (viter1388.hasOwnProperty(kiter1389)) {
              let viter1390 = viter1388[kiter1389];
              output.writeString(kiter1389);
              viter1390.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31392 = input.readMapBegin();
          const _size1391 = _rtmp31392.size || 0;
          for (let _i1393 = 0; _i1393 < _size1391; ++_i1393) {
            let key1394 = null;
            let val1395 = null;
            key1394 = input.readI64();
            val1395 = new data_ttypes.TObject();
            val1395.read(input);
            this.success[key1394] = val1395;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1396 in this.success) {
        if (this.success.hasOwnProperty(kiter1396)) {
          let viter1397 = this.success[kiter1396];
          output.writeI64(kiter1396);
          viter1397.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCriteria_args = class {
  constructor(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31399 = input.readMapBegin();
          const _size1398 = _rtmp31399.size || 0;
          for (let _i1400 = 0; _i1400 < _size1398; ++_i1400) {
            let key1401 = null;
            let val1402 = null;
            key1401 = input.readI64();
            val1402 = {};
            const _rtmp31404 = input.readMapBegin();
            const _size1403 = _rtmp31404.size || 0;
            for (let _i1405 = 0; _i1405 < _size1403; ++_i1405) {
              let key1406 = null;
              let val1407 = null;
              key1406 = input.readString();
              val1407 = new data_ttypes.TObject();
              val1407.read(input);
              val1402[key1406] = val1407;
            }
            input.readMapEnd();
            this.success[key1401] = val1402;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1408 in this.success) {
        if (this.success.hasOwnProperty(kiter1408)) {
          let viter1409 = this.success[kiter1408];
          output.writeI64(kiter1408);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1409));
          for (let kiter1410 in viter1409) {
            if (viter1409.hasOwnProperty(kiter1410)) {
              let viter1411 = viter1409[kiter1410];
              output.writeString(kiter1410);
              viter1411.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCcl_args = class {
  constructor(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31413 = input.readMapBegin();
          const _size1412 = _rtmp31413.size || 0;
          for (let _i1414 = 0; _i1414 < _size1412; ++_i1414) {
            let key1415 = null;
            let val1416 = null;
            key1415 = input.readI64();
            val1416 = {};
            const _rtmp31418 = input.readMapBegin();
            const _size1417 = _rtmp31418.size || 0;
            for (let _i1419 = 0; _i1419 < _size1417; ++_i1419) {
              let key1420 = null;
              let val1421 = null;
              key1420 = input.readString();
              val1421 = new data_ttypes.TObject();
              val1421.read(input);
              val1416[key1420] = val1421;
            }
            input.readMapEnd();
            this.success[key1415] = val1416;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1422 in this.success) {
        if (this.success.hasOwnProperty(kiter1422)) {
          let viter1423 = this.success[kiter1422];
          output.writeI64(kiter1422);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1423));
          for (let kiter1424 in viter1423) {
            if (viter1423.hasOwnProperty(kiter1424)) {
              let viter1425 = viter1423[kiter1424];
              output.writeString(kiter1424);
              viter1425.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCriteriaTime_args = class {
  constructor(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteriaTime_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31427 = input.readMapBegin();
          const _size1426 = _rtmp31427.size || 0;
          for (let _i1428 = 0; _i1428 < _size1426; ++_i1428) {
            let key1429 = null;
            let val1430 = null;
            key1429 = input.readI64();
            val1430 = {};
            const _rtmp31432 = input.readMapBegin();
            const _size1431 = _rtmp31432.size || 0;
            for (let _i1433 = 0; _i1433 < _size1431; ++_i1433) {
              let key1434 = null;
              let val1435 = null;
              key1434 = input.readString();
              val1435 = new data_ttypes.TObject();
              val1435.read(input);
              val1430[key1434] = val1435;
            }
            input.readMapEnd();
            this.success[key1429] = val1430;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1436 in this.success) {
        if (this.success.hasOwnProperty(kiter1436)) {
          let viter1437 = this.success[kiter1436];
          output.writeI64(kiter1436);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1437));
          for (let kiter1438 in viter1437) {
            if (viter1437.hasOwnProperty(kiter1438)) {
              let viter1439 = viter1437[kiter1438];
              output.writeString(kiter1438);
              viter1439.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCriteriaTimestr_args = class {
  constructor(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteriaTimestr_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31441 = input.readMapBegin();
          const _size1440 = _rtmp31441.size || 0;
          for (let _i1442 = 0; _i1442 < _size1440; ++_i1442) {
            let key1443 = null;
            let val1444 = null;
            key1443 = input.readI64();
            val1444 = {};
            const _rtmp31446 = input.readMapBegin();
            const _size1445 = _rtmp31446.size || 0;
            for (let _i1447 = 0; _i1447 < _size1445; ++_i1447) {
              let key1448 = null;
              let val1449 = null;
              key1448 = input.readString();
              val1449 = new data_ttypes.TObject();
              val1449.read(input);
              val1444[key1448] = val1449;
            }
            input.readMapEnd();
            this.success[key1443] = val1444;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1450 in this.success) {
        if (this.success.hasOwnProperty(kiter1450)) {
          let viter1451 = this.success[kiter1450];
          output.writeI64(kiter1450);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1451));
          for (let kiter1452 in viter1451) {
            if (viter1451.hasOwnProperty(kiter1452)) {
              let viter1453 = viter1451[kiter1452];
              output.writeString(kiter1452);
              viter1453.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCclTime_args = class {
  constructor(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCclTime_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31455 = input.readMapBegin();
          const _size1454 = _rtmp31455.size || 0;
          for (let _i1456 = 0; _i1456 < _size1454; ++_i1456) {
            let key1457 = null;
            let val1458 = null;
            key1457 = input.readI64();
            val1458 = {};
            const _rtmp31460 = input.readMapBegin();
            const _size1459 = _rtmp31460.size || 0;
            for (let _i1461 = 0; _i1461 < _size1459; ++_i1461) {
              let key1462 = null;
              let val1463 = null;
              key1462 = input.readString();
              val1463 = new data_ttypes.TObject();
              val1463.read(input);
              val1458[key1462] = val1463;
            }
            input.readMapEnd();
            this.success[key1457] = val1458;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1464 in this.success) {
        if (this.success.hasOwnProperty(kiter1464)) {
          let viter1465 = this.success[kiter1464];
          output.writeI64(kiter1464);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1465));
          for (let kiter1466 in viter1465) {
            if (viter1465.hasOwnProperty(kiter1466)) {
              let viter1467 = viter1465[kiter1466];
              output.writeString(kiter1466);
              viter1467.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCclTimestr_args = class {
  constructor(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCclTimestr_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31469 = input.readMapBegin();
          const _size1468 = _rtmp31469.size || 0;
          for (let _i1470 = 0; _i1470 < _size1468; ++_i1470) {
            let key1471 = null;
            let val1472 = null;
            key1471 = input.readI64();
            val1472 = {};
            const _rtmp31474 = input.readMapBegin();
            const _size1473 = _rtmp31474.size || 0;
            for (let _i1475 = 0; _i1475 < _size1473; ++_i1475) {
              let key1476 = null;
              let val1477 = null;
              key1476 = input.readString();
              val1477 = new data_ttypes.TObject();
              val1477.read(input);
              val1472[key1476] = val1477;
            }
            input.readMapEnd();
            this.success[key1471] = val1472;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1478 in this.success) {
        if (this.success.hasOwnProperty(kiter1478)) {
          let viter1479 = this.success[kiter1478];
          output.writeI64(kiter1478);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1479));
          for (let kiter1480 in viter1479) {
            if (viter1479.hasOwnProperty(kiter1480)) {
              let viter1481 = viter1479[kiter1480];
              output.writeString(kiter1480);
              viter1481.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31483 = input.readMapBegin();
          const _size1482 = _rtmp31483.size || 0;
          for (let _i1484 = 0; _i1484 < _size1482; ++_i1484) {
            let key1485 = null;
            let val1486 = null;
            key1485 = input.readI64();
            val1486 = new data_ttypes.TObject();
            val1486.read(input);
            this.success[key1485] = val1486;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1487 in this.success) {
        if (this.success.hasOwnProperty(kiter1487)) {
          let viter1488 = this.success[kiter1487];
          output.writeI64(kiter1487);
          viter1488.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31490 = input.readMapBegin();
          const _size1489 = _rtmp31490.size || 0;
          for (let _i1491 = 0; _i1491 < _size1489; ++_i1491) {
            let key1492 = null;
            let val1493 = null;
            key1492 = input.readI64();
            val1493 = new data_ttypes.TObject();
            val1493.read(input);
            this.success[key1492] = val1493;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1494 in this.success) {
        if (this.success.hasOwnProperty(kiter1494)) {
          let viter1495 = this.success[kiter1494];
          output.writeI64(kiter1494);
          viter1495.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31497 = input.readMapBegin();
          const _size1496 = _rtmp31497.size || 0;
          for (let _i1498 = 0; _i1498 < _size1496; ++_i1498) {
            let key1499 = null;
            let val1500 = null;
            key1499 = input.readI64();
            val1500 = new data_ttypes.TObject();
            val1500.read(input);
            this.success[key1499] = val1500;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1501 in this.success) {
        if (this.success.hasOwnProperty(kiter1501)) {
          let viter1502 = this.success[kiter1501];
          output.writeI64(kiter1501);
          viter1502.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31504 = input.readMapBegin();
          const _size1503 = _rtmp31504.size || 0;
          for (let _i1505 = 0; _i1505 < _size1503; ++_i1505) {
            let key1506 = null;
            let val1507 = null;
            key1506 = input.readI64();
            val1507 = new data_ttypes.TObject();
            val1507.read(input);
            this.success[key1506] = val1507;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1508 in this.success) {
        if (this.success.hasOwnProperty(kiter1508)) {
          let viter1509 = this.success[kiter1508];
          output.writeI64(kiter1508);
          viter1509.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31511 = input.readMapBegin();
          const _size1510 = _rtmp31511.size || 0;
          for (let _i1512 = 0; _i1512 < _size1510; ++_i1512) {
            let key1513 = null;
            let val1514 = null;
            key1513 = input.readI64();
            val1514 = new data_ttypes.TObject();
            val1514.read(input);
            this.success[key1513] = val1514;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter1515 in this.success) {
        if (this.success.hasOwnProperty(kiter1515)) {
          let viter1516 = this.success[kiter1515];
          output.writeI64(kiter1515);
          viter1516.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCriteria_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31518 = input.readListBegin();
          const _size1517 = _rtmp31518.size || 0;
          for (let _i1519 = 0; _i1519 < _size1517; ++_i1519) {
            let elem1520 = null;
            elem1520 = input.readString();
            this.keys.push(elem1520);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1521 in this.keys) {
        if (this.keys.hasOwnProperty(iter1521)) {
          iter1521 = this.keys[iter1521];
          output.writeString(iter1521);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31523 = input.readMapBegin();
          const _size1522 = _rtmp31523.size || 0;
          for (let _i1524 = 0; _i1524 < _size1522; ++_i1524) {
            let key1525 = null;
            let val1526 = null;
            key1525 = input.readI64();
            val1526 = {};
            const _rtmp31528 = input.readMapBegin();
            const _size1527 = _rtmp31528.size || 0;
            for (let _i1529 = 0; _i1529 < _size1527; ++_i1529) {
              let key1530 = null;
              let val1531 = null;
              key1530 = input.readString();
              val1531 = new data_ttypes.TObject();
              val1531.read(input);
              val1526[key1530] = val1531;
            }
            input.readMapEnd();
            this.success[key1525] = val1526;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1532 in this.success) {
        if (this.success.hasOwnProperty(kiter1532)) {
          let viter1533 = this.success[kiter1532];
          output.writeI64(kiter1532);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1533));
          for (let kiter1534 in viter1533) {
            if (viter1533.hasOwnProperty(kiter1534)) {
              let viter1535 = viter1533[kiter1534];
              output.writeString(kiter1534);
              viter1535.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCcl_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31537 = input.readListBegin();
          const _size1536 = _rtmp31537.size || 0;
          for (let _i1538 = 0; _i1538 < _size1536; ++_i1538) {
            let elem1539 = null;
            elem1539 = input.readString();
            this.keys.push(elem1539);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1540 in this.keys) {
        if (this.keys.hasOwnProperty(iter1540)) {
          iter1540 = this.keys[iter1540];
          output.writeString(iter1540);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31542 = input.readMapBegin();
          const _size1541 = _rtmp31542.size || 0;
          for (let _i1543 = 0; _i1543 < _size1541; ++_i1543) {
            let key1544 = null;
            let val1545 = null;
            key1544 = input.readI64();
            val1545 = {};
            const _rtmp31547 = input.readMapBegin();
            const _size1546 = _rtmp31547.size || 0;
            for (let _i1548 = 0; _i1548 < _size1546; ++_i1548) {
              let key1549 = null;
              let val1550 = null;
              key1549 = input.readString();
              val1550 = new data_ttypes.TObject();
              val1550.read(input);
              val1545[key1549] = val1550;
            }
            input.readMapEnd();
            this.success[key1544] = val1545;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1551 in this.success) {
        if (this.success.hasOwnProperty(kiter1551)) {
          let viter1552 = this.success[kiter1551];
          output.writeI64(kiter1551);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1552));
          for (let kiter1553 in viter1552) {
            if (viter1552.hasOwnProperty(kiter1553)) {
              let viter1554 = viter1552[kiter1553];
              output.writeString(kiter1553);
              viter1554.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCriteriaTime_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31556 = input.readListBegin();
          const _size1555 = _rtmp31556.size || 0;
          for (let _i1557 = 0; _i1557 < _size1555; ++_i1557) {
            let elem1558 = null;
            elem1558 = input.readString();
            this.keys.push(elem1558);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1559 in this.keys) {
        if (this.keys.hasOwnProperty(iter1559)) {
          iter1559 = this.keys[iter1559];
          output.writeString(iter1559);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31561 = input.readMapBegin();
          const _size1560 = _rtmp31561.size || 0;
          for (let _i1562 = 0; _i1562 < _size1560; ++_i1562) {
            let key1563 = null;
            let val1564 = null;
            key1563 = input.readI64();
            val1564 = {};
            const _rtmp31566 = input.readMapBegin();
            const _size1565 = _rtmp31566.size || 0;
            for (let _i1567 = 0; _i1567 < _size1565; ++_i1567) {
              let key1568 = null;
              let val1569 = null;
              key1568 = input.readString();
              val1569 = new data_ttypes.TObject();
              val1569.read(input);
              val1564[key1568] = val1569;
            }
            input.readMapEnd();
            this.success[key1563] = val1564;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1570 in this.success) {
        if (this.success.hasOwnProperty(kiter1570)) {
          let viter1571 = this.success[kiter1570];
          output.writeI64(kiter1570);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1571));
          for (let kiter1572 in viter1571) {
            if (viter1571.hasOwnProperty(kiter1572)) {
              let viter1573 = viter1571[kiter1572];
              output.writeString(kiter1572);
              viter1573.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCriteriaTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31575 = input.readListBegin();
          const _size1574 = _rtmp31575.size || 0;
          for (let _i1576 = 0; _i1576 < _size1574; ++_i1576) {
            let elem1577 = null;
            elem1577 = input.readString();
            this.keys.push(elem1577);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1578 in this.keys) {
        if (this.keys.hasOwnProperty(iter1578)) {
          iter1578 = this.keys[iter1578];
          output.writeString(iter1578);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31580 = input.readMapBegin();
          const _size1579 = _rtmp31580.size || 0;
          for (let _i1581 = 0; _i1581 < _size1579; ++_i1581) {
            let key1582 = null;
            let val1583 = null;
            key1582 = input.readI64();
            val1583 = {};
            const _rtmp31585 = input.readMapBegin();
            const _size1584 = _rtmp31585.size || 0;
            for (let _i1586 = 0; _i1586 < _size1584; ++_i1586) {
              let key1587 = null;
              let val1588 = null;
              key1587 = input.readString();
              val1588 = new data_ttypes.TObject();
              val1588.read(input);
              val1583[key1587] = val1588;
            }
            input.readMapEnd();
            this.success[key1582] = val1583;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1589 in this.success) {
        if (this.success.hasOwnProperty(kiter1589)) {
          let viter1590 = this.success[kiter1589];
          output.writeI64(kiter1589);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1590));
          for (let kiter1591 in viter1590) {
            if (viter1590.hasOwnProperty(kiter1591)) {
              let viter1592 = viter1590[kiter1591];
              output.writeString(kiter1591);
              viter1592.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCclTime_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31594 = input.readListBegin();
          const _size1593 = _rtmp31594.size || 0;
          for (let _i1595 = 0; _i1595 < _size1593; ++_i1595) {
            let elem1596 = null;
            elem1596 = input.readString();
            this.keys.push(elem1596);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1597 in this.keys) {
        if (this.keys.hasOwnProperty(iter1597)) {
          iter1597 = this.keys[iter1597];
          output.writeString(iter1597);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31599 = input.readMapBegin();
          const _size1598 = _rtmp31599.size || 0;
          for (let _i1600 = 0; _i1600 < _size1598; ++_i1600) {
            let key1601 = null;
            let val1602 = null;
            key1601 = input.readI64();
            val1602 = {};
            const _rtmp31604 = input.readMapBegin();
            const _size1603 = _rtmp31604.size || 0;
            for (let _i1605 = 0; _i1605 < _size1603; ++_i1605) {
              let key1606 = null;
              let val1607 = null;
              key1606 = input.readString();
              val1607 = new data_ttypes.TObject();
              val1607.read(input);
              val1602[key1606] = val1607;
            }
            input.readMapEnd();
            this.success[key1601] = val1602;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1608 in this.success) {
        if (this.success.hasOwnProperty(kiter1608)) {
          let viter1609 = this.success[kiter1608];
          output.writeI64(kiter1608);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1609));
          for (let kiter1610 in viter1609) {
            if (viter1609.hasOwnProperty(kiter1610)) {
              let viter1611 = viter1609[kiter1610];
              output.writeString(kiter1610);
              viter1611.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCclTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31613 = input.readListBegin();
          const _size1612 = _rtmp31613.size || 0;
          for (let _i1614 = 0; _i1614 < _size1612; ++_i1614) {
            let elem1615 = null;
            elem1615 = input.readString();
            this.keys.push(elem1615);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1616 in this.keys) {
        if (this.keys.hasOwnProperty(iter1616)) {
          iter1616 = this.keys[iter1616];
          output.writeString(iter1616);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getKeysCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31618 = input.readMapBegin();
          const _size1617 = _rtmp31618.size || 0;
          for (let _i1619 = 0; _i1619 < _size1617; ++_i1619) {
            let key1620 = null;
            let val1621 = null;
            key1620 = input.readI64();
            val1621 = {};
            const _rtmp31623 = input.readMapBegin();
            const _size1622 = _rtmp31623.size || 0;
            for (let _i1624 = 0; _i1624 < _size1622; ++_i1624) {
              let key1625 = null;
              let val1626 = null;
              key1625 = input.readString();
              val1626 = new data_ttypes.TObject();
              val1626.read(input);
              val1621[key1625] = val1626;
            }
            input.readMapEnd();
            this.success[key1620] = val1621;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1627 in this.success) {
        if (this.success.hasOwnProperty(kiter1627)) {
          let viter1628 = this.success[kiter1627];
          output.writeI64(kiter1627);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1628));
          for (let kiter1629 in viter1628) {
            if (viter1628.hasOwnProperty(kiter1629)) {
              let viter1630 = viter1628[kiter1629];
              output.writeString(kiter1629);
              viter1630.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyKeyValueRecord_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyKeyValueRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyKeyValueRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyKeyValueRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyKeyValueRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyKeyValueRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_jsonifyRecords_args = class {
  constructor(args) {
    this.records = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.identifier !== undefined && args.identifier !== null) {
        this.identifier = args.identifier;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31632 = input.readListBegin();
          const _size1631 = _rtmp31632.size || 0;
          for (let _i1633 = 0; _i1633 < _size1631; ++_i1633) {
            let elem1634 = null;
            elem1634 = input.readI64();
            this.records.push(elem1634);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.identifier = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1635 in this.records) {
        if (this.records.hasOwnProperty(iter1635)) {
          iter1635 = this.records[iter1635];
          output.writeI64(iter1635);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 2);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_jsonifyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_jsonifyRecordsTime_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.identifier !== undefined && args.identifier !== null) {
        this.identifier = args.identifier;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31637 = input.readListBegin();
          const _size1636 = _rtmp31637.size || 0;
          for (let _i1638 = 0; _i1638 < _size1636; ++_i1638) {
            let elem1639 = null;
            elem1639 = input.readI64();
            this.records.push(elem1639);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.identifier = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1640 in this.records) {
        if (this.records.hasOwnProperty(iter1640)) {
          iter1640 = this.records[iter1640];
          output.writeI64(iter1640);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 3);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_jsonifyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_jsonifyRecordsTimestr_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.identifier !== undefined && args.identifier !== null) {
        this.identifier = args.identifier;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31642 = input.readListBegin();
          const _size1641 = _rtmp31642.size || 0;
          for (let _i1643 = 0; _i1643 < _size1641; ++_i1643) {
            let elem1644 = null;
            elem1644 = input.readI64();
            this.records.push(elem1644);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.identifier = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1645 in this.records) {
        if (this.records.hasOwnProperty(iter1645)) {
          iter1645 = this.records[iter1645];
          output.writeI64(iter1645);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 3);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_jsonifyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findCriteria_args = class {
  constructor(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31647 = input.readSetBegin();
          const _size1646 = _rtmp31647.size || 0;
          for (let _i1648 = 0; _i1648 < _size1646; ++_i1648) {
            let elem1649 = null;
            elem1649 = input.readI64();
            this.success.push(elem1649);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1650 in this.success) {
        if (this.success.hasOwnProperty(iter1650)) {
          iter1650 = this.success[iter1650];
          output.writeI64(iter1650);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findCcl_args = class {
  constructor(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31652 = input.readSetBegin();
          const _size1651 = _rtmp31652.size || 0;
          for (let _i1653 = 0; _i1653 < _size1651; ++_i1653) {
            let elem1654 = null;
            elem1654 = input.readI64();
            this.success.push(elem1654);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1655 in this.success) {
        if (this.success.hasOwnProperty(iter1655)) {
          iter1655 = this.success[iter1655];
          output.writeI64(iter1655);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorValues_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.operator = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.values = [];
          const _rtmp31657 = input.readListBegin();
          const _size1656 = _rtmp31657.size || 0;
          for (let _i1658 = 0; _i1658 < _size1656; ++_i1658) {
            let elem1659 = null;
            elem1659 = new data_ttypes.TObject();
            elem1659.read(input);
            this.values.push(elem1659);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1660 in this.values) {
        if (this.values.hasOwnProperty(iter1660)) {
          iter1660 = this.values[iter1660];
          iter1660.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorValues_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31662 = input.readSetBegin();
          const _size1661 = _rtmp31662.size || 0;
          for (let _i1663 = 0; _i1663 < _size1661; ++_i1663) {
            let elem1664 = null;
            elem1664 = input.readI64();
            this.success.push(elem1664);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValues_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1665 in this.success) {
        if (this.success.hasOwnProperty(iter1665)) {
          iter1665 = this.success[iter1665];
          output.writeI64(iter1665);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorValuesTime_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.operator = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.values = [];
          const _rtmp31667 = input.readListBegin();
          const _size1666 = _rtmp31667.size || 0;
          for (let _i1668 = 0; _i1668 < _size1666; ++_i1668) {
            let elem1669 = null;
            elem1669 = new data_ttypes.TObject();
            elem1669.read(input);
            this.values.push(elem1669);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1670 in this.values) {
        if (this.values.hasOwnProperty(iter1670)) {
          iter1670 = this.values[iter1670];
          iter1670.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorValuesTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31672 = input.readSetBegin();
          const _size1671 = _rtmp31672.size || 0;
          for (let _i1673 = 0; _i1673 < _size1671; ++_i1673) {
            let elem1674 = null;
            elem1674 = input.readI64();
            this.success.push(elem1674);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1675 in this.success) {
        if (this.success.hasOwnProperty(iter1675)) {
          iter1675 = this.success[iter1675];
          output.writeI64(iter1675);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorValuesTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.operator = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.values = [];
          const _rtmp31677 = input.readListBegin();
          const _size1676 = _rtmp31677.size || 0;
          for (let _i1678 = 0; _i1678 < _size1676; ++_i1678) {
            let elem1679 = null;
            elem1679 = new data_ttypes.TObject();
            elem1679.read(input);
            this.values.push(elem1679);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1680 in this.values) {
        if (this.values.hasOwnProperty(iter1680)) {
          iter1680 = this.values[iter1680];
          iter1680.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorValuesTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31682 = input.readSetBegin();
          const _size1681 = _rtmp31682.size || 0;
          for (let _i1683 = 0; _i1683 < _size1681; ++_i1683) {
            let elem1684 = null;
            elem1684 = input.readI64();
            this.success.push(elem1684);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1685 in this.success) {
        if (this.success.hasOwnProperty(iter1685)) {
          iter1685 = this.success[iter1685];
          output.writeI64(iter1685);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorstrValues_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.operator = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.values = [];
          const _rtmp31687 = input.readListBegin();
          const _size1686 = _rtmp31687.size || 0;
          for (let _i1688 = 0; _i1688 < _size1686; ++_i1688) {
            let elem1689 = null;
            elem1689 = new data_ttypes.TObject();
            elem1689.read(input);
            this.values.push(elem1689);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1690 in this.values) {
        if (this.values.hasOwnProperty(iter1690)) {
          iter1690 = this.values[iter1690];
          iter1690.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorstrValues_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31692 = input.readSetBegin();
          const _size1691 = _rtmp31692.size || 0;
          for (let _i1693 = 0; _i1693 < _size1691; ++_i1693) {
            let elem1694 = null;
            elem1694 = input.readI64();
            this.success.push(elem1694);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValues_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1695 in this.success) {
        if (this.success.hasOwnProperty(iter1695)) {
          iter1695 = this.success[iter1695];
          output.writeI64(iter1695);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorstrValuesTime_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.operator = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.values = [];
          const _rtmp31697 = input.readListBegin();
          const _size1696 = _rtmp31697.size || 0;
          for (let _i1698 = 0; _i1698 < _size1696; ++_i1698) {
            let elem1699 = null;
            elem1699 = new data_ttypes.TObject();
            elem1699.read(input);
            this.values.push(elem1699);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1700 in this.values) {
        if (this.values.hasOwnProperty(iter1700)) {
          iter1700 = this.values[iter1700];
          iter1700.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorstrValuesTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31702 = input.readSetBegin();
          const _size1701 = _rtmp31702.size || 0;
          for (let _i1703 = 0; _i1703 < _size1701; ++_i1703) {
            let elem1704 = null;
            elem1704 = input.readI64();
            this.success.push(elem1704);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1705 in this.success) {
        if (this.success.hasOwnProperty(iter1705)) {
          iter1705 = this.success[iter1705];
          output.writeI64(iter1705);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorstrValuesTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.operator = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.values = [];
          const _rtmp31707 = input.readListBegin();
          const _size1706 = _rtmp31707.size || 0;
          for (let _i1708 = 0; _i1708 < _size1706; ++_i1708) {
            let elem1709 = null;
            elem1709 = new data_ttypes.TObject();
            elem1709.read(input);
            this.values.push(elem1709);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1710 in this.values) {
        if (this.values.hasOwnProperty(iter1710)) {
          iter1710 = this.values[iter1710];
          iter1710.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findKeyOperatorstrValuesTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31712 = input.readSetBegin();
          const _size1711 = _rtmp31712.size || 0;
          for (let _i1713 = 0; _i1713 < _size1711; ++_i1713) {
            let elem1714 = null;
            elem1714 = input.readI64();
            this.success.push(elem1714);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1715 in this.success) {
        if (this.success.hasOwnProperty(iter1715)) {
          iter1715 = this.success[iter1715];
          output.writeI64(iter1715);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_search_args = class {
  constructor(args) {
    this.key = null;
    this.query = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_search_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 2);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_search_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31717 = input.readSetBegin();
          const _size1716 = _rtmp31717.size || 0;
          for (let _i1718 = 0; _i1718 < _size1716; ++_i1718) {
            let elem1719 = null;
            elem1719 = input.readI64();
            this.success.push(elem1719);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_search_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (let iter1720 in this.success) {
        if (this.success.hasOwnProperty(iter1720)) {
          iter1720 = this.success[iter1720];
          output.writeI64(iter1720);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeysRecordsTime_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31722 = input.readListBegin();
          const _size1721 = _rtmp31722.size || 0;
          for (let _i1723 = 0; _i1723 < _size1721; ++_i1723) {
            let elem1724 = null;
            elem1724 = input.readString();
            this.keys.push(elem1724);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31726 = input.readListBegin();
          const _size1725 = _rtmp31726.size || 0;
          for (let _i1727 = 0; _i1727 < _size1725; ++_i1727) {
            let elem1728 = null;
            elem1728 = input.readI64();
            this.records.push(elem1728);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1729 in this.keys) {
        if (this.keys.hasOwnProperty(iter1729)) {
          iter1729 = this.keys[iter1729];
          output.writeString(iter1729);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1730 in this.records) {
        if (this.records.hasOwnProperty(iter1730)) {
          iter1730 = this.records[iter1730];
          output.writeI64(iter1730);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeysRecordsTime_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTime_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeysRecordsTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31732 = input.readListBegin();
          const _size1731 = _rtmp31732.size || 0;
          for (let _i1733 = 0; _i1733 < _size1731; ++_i1733) {
            let elem1734 = null;
            elem1734 = input.readString();
            this.keys.push(elem1734);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31736 = input.readListBegin();
          const _size1735 = _rtmp31736.size || 0;
          for (let _i1737 = 0; _i1737 < _size1735; ++_i1737) {
            let elem1738 = null;
            elem1738 = input.readI64();
            this.records.push(elem1738);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1739 in this.keys) {
        if (this.keys.hasOwnProperty(iter1739)) {
          iter1739 = this.keys[iter1739];
          output.writeString(iter1739);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1740 in this.records) {
        if (this.records.hasOwnProperty(iter1740)) {
          iter1740 = this.records[iter1740];
          output.writeI64(iter1740);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeysRecordsTimestr_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTimestr_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeysRecordTime_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31742 = input.readListBegin();
          const _size1741 = _rtmp31742.size || 0;
          for (let _i1743 = 0; _i1743 < _size1741; ++_i1743) {
            let elem1744 = null;
            elem1744 = input.readString();
            this.keys.push(elem1744);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1745 in this.keys) {
        if (this.keys.hasOwnProperty(iter1745)) {
          iter1745 = this.keys[iter1745];
          output.writeString(iter1745);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeysRecordTime_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTime_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeysRecordTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31747 = input.readListBegin();
          const _size1746 = _rtmp31747.size || 0;
          for (let _i1748 = 0; _i1748 < _size1746; ++_i1748) {
            let elem1749 = null;
            elem1749 = input.readString();
            this.keys.push(elem1749);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1750 in this.keys) {
        if (this.keys.hasOwnProperty(iter1750)) {
          iter1750 = this.keys[iter1750];
          output.writeString(iter1750);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeysRecordTimestr_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTimestr_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31752 = input.readListBegin();
          const _size1751 = _rtmp31752.size || 0;
          for (let _i1753 = 0; _i1753 < _size1751; ++_i1753) {
            let elem1754 = null;
            elem1754 = input.readI64();
            this.records.push(elem1754);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1755 in this.records) {
        if (this.records.hasOwnProperty(iter1755)) {
          iter1755 = this.records[iter1755];
          output.writeI64(iter1755);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeyRecordsTime_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTime_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31757 = input.readListBegin();
          const _size1756 = _rtmp31757.size || 0;
          for (let _i1758 = 0; _i1758 < _size1756; ++_i1758) {
            let elem1759 = null;
            elem1759 = input.readI64();
            this.records.push(elem1759);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1760 in this.records) {
        if (this.records.hasOwnProperty(iter1760)) {
          iter1760 = this.records[iter1760];
          output.writeI64(iter1760);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeyRecordsTimestr_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTimestr_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeyRecordTime_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTime_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_revertKeyRecordTimestr_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTimestr_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_pingRecords_args = class {
  constructor(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31762 = input.readListBegin();
          const _size1761 = _rtmp31762.size || 0;
          for (let _i1763 = 0; _i1763 < _size1761; ++_i1763) {
            let elem1764 = null;
            elem1764 = input.readI64();
            this.records.push(elem1764);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_pingRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1765 in this.records) {
        if (this.records.hasOwnProperty(iter1765)) {
          iter1765 = this.records[iter1765];
          output.writeI64(iter1765);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_pingRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31767 = input.readMapBegin();
          const _size1766 = _rtmp31767.size || 0;
          for (let _i1768 = 0; _i1768 < _size1766; ++_i1768) {
            let key1769 = null;
            let val1770 = null;
            key1769 = input.readI64();
            val1770 = input.readBool();
            this.success[key1769] = val1770;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_pingRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.success));
      for (let kiter1771 in this.success) {
        if (this.success.hasOwnProperty(kiter1771)) {
          let viter1772 = this.success[kiter1771];
          output.writeI64(kiter1771);
          output.writeBool(viter1772);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_pingRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_pingRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_pingRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_pingRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyAndSwap_args = class {
  constructor(args) {
    this.key = null;
    this.expected = null;
    this.record = null;
    this.replacement = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.expected !== undefined && args.expected !== null) {
        this.expected = new data_ttypes.TObject(args.expected);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.replacement !== undefined && args.replacement !== null) {
        this.replacement = new data_ttypes.TObject(args.replacement);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.expected = new data_ttypes.TObject();
          this.expected.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.replacement = new data_ttypes.TObject();
          this.replacement.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyAndSwap_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.expected !== null && this.expected !== undefined) {
      output.writeFieldBegin('expected', Thrift.Type.STRUCT, 2);
      this.expected.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.replacement !== null && this.replacement !== undefined) {
      output.writeFieldBegin('replacement', Thrift.Type.STRUCT, 4);
      this.replacement.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyAndSwap_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyAndSwap_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyOrSet_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyOrSet_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_verifyOrSet_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyOrSet_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findOrAddKeyValue_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrAddKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findOrAddKeyValue_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.DuplicateEntryException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrAddKeyValue_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findOrInsertCriteriaJson_args = class {
  constructor(args) {
    this.criteria = null;
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrInsertCriteriaJson_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 2);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findOrInsertCriteriaJson_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.DuplicateEntryException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrInsertCriteriaJson_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findOrInsertCclJson_args = class {
  constructor(args) {
    this.ccl = null;
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrInsertCclJson_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 2);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_findOrInsertCclJson_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.DuplicateEntryException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrInsertCclJson_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31774 = input.readListBegin();
          const _size1773 = _rtmp31774.size || 0;
          for (let _i1775 = 0; _i1775 < _size1773; ++_i1775) {
            let elem1776 = null;
            elem1776 = input.readI64();
            this.records.push(elem1776);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1777 in this.records) {
        if (this.records.hasOwnProperty(iter1777)) {
          iter1777 = this.records[iter1777];
          output.writeI64(iter1777);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31779 = input.readListBegin();
          const _size1778 = _rtmp31779.size || 0;
          for (let _i1780 = 0; _i1780 < _size1778; ++_i1780) {
            let elem1781 = null;
            elem1781 = input.readI64();
            this.records.push(elem1781);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1782 in this.records) {
        if (this.records.hasOwnProperty(iter1782)) {
          iter1782 = this.records[iter1782];
          output.writeI64(iter1782);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31784 = input.readListBegin();
          const _size1783 = _rtmp31784.size || 0;
          for (let _i1785 = 0; _i1785 < _size1783; ++_i1785) {
            let elem1786 = null;
            elem1786 = input.readI64();
            this.records.push(elem1786);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1787 in this.records) {
        if (this.records.hasOwnProperty(iter1787)) {
          iter1787 = this.records[iter1787];
          output.writeI64(iter1787);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_sumKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31789 = input.readListBegin();
          const _size1788 = _rtmp31789.size || 0;
          for (let _i1790 = 0; _i1790 < _size1788; ++_i1790) {
            let elem1791 = null;
            elem1791 = input.readI64();
            this.records.push(elem1791);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1792 in this.records) {
        if (this.records.hasOwnProperty(iter1792)) {
          iter1792 = this.records[iter1792];
          output.writeI64(iter1792);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31794 = input.readListBegin();
          const _size1793 = _rtmp31794.size || 0;
          for (let _i1795 = 0; _i1795 < _size1793; ++_i1795) {
            let elem1796 = null;
            elem1796 = input.readI64();
            this.records.push(elem1796);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1797 in this.records) {
        if (this.records.hasOwnProperty(iter1797)) {
          iter1797 = this.records[iter1797];
          output.writeI64(iter1797);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31799 = input.readListBegin();
          const _size1798 = _rtmp31799.size || 0;
          for (let _i1800 = 0; _i1800 < _size1798; ++_i1800) {
            let elem1801 = null;
            elem1801 = input.readI64();
            this.records.push(elem1801);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1802 in this.records) {
        if (this.records.hasOwnProperty(iter1802)) {
          iter1802 = this.records[iter1802];
          output.writeI64(iter1802);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_averageKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31804 = input.readListBegin();
          const _size1803 = _rtmp31804.size || 0;
          for (let _i1805 = 0; _i1805 < _size1803; ++_i1805) {
            let elem1806 = null;
            elem1806 = input.readI64();
            this.records.push(elem1806);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1807 in this.records) {
        if (this.records.hasOwnProperty(iter1807)) {
          iter1807 = this.records[iter1807];
          output.writeI64(iter1807);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31809 = input.readListBegin();
          const _size1808 = _rtmp31809.size || 0;
          for (let _i1810 = 0; _i1810 < _size1808; ++_i1810) {
            let elem1811 = null;
            elem1811 = input.readI64();
            this.records.push(elem1811);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1812 in this.records) {
        if (this.records.hasOwnProperty(iter1812)) {
          iter1812 = this.records[iter1812];
          output.writeI64(iter1812);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31814 = input.readListBegin();
          const _size1813 = _rtmp31814.size || 0;
          for (let _i1815 = 0; _i1815 < _size1813; ++_i1815) {
            let elem1816 = null;
            elem1816 = input.readI64();
            this.records.push(elem1816);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1817 in this.records) {
        if (this.records.hasOwnProperty(iter1817)) {
          iter1817 = this.records[iter1817];
          output.writeI64(iter1817);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_countKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31819 = input.readListBegin();
          const _size1818 = _rtmp31819.size || 0;
          for (let _i1820 = 0; _i1820 < _size1818; ++_i1820) {
            let elem1821 = null;
            elem1821 = input.readI64();
            this.records.push(elem1821);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1822 in this.records) {
        if (this.records.hasOwnProperty(iter1822)) {
          iter1822 = this.records[iter1822];
          output.writeI64(iter1822);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31824 = input.readListBegin();
          const _size1823 = _rtmp31824.size || 0;
          for (let _i1825 = 0; _i1825 < _size1823; ++_i1825) {
            let elem1826 = null;
            elem1826 = input.readI64();
            this.records.push(elem1826);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1827 in this.records) {
        if (this.records.hasOwnProperty(iter1827)) {
          iter1827 = this.records[iter1827];
          output.writeI64(iter1827);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31829 = input.readListBegin();
          const _size1828 = _rtmp31829.size || 0;
          for (let _i1830 = 0; _i1830 < _size1828; ++_i1830) {
            let elem1831 = null;
            elem1831 = input.readI64();
            this.records.push(elem1831);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1832 in this.records) {
        if (this.records.hasOwnProperty(iter1832)) {
          iter1832 = this.records[iter1832];
          output.writeI64(iter1832);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_maxKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31834 = input.readListBegin();
          const _size1833 = _rtmp31834.size || 0;
          for (let _i1835 = 0; _i1835 < _size1833; ++_i1835) {
            let elem1836 = null;
            elem1836 = input.readI64();
            this.records.push(elem1836);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1837 in this.records) {
        if (this.records.hasOwnProperty(iter1837)) {
          iter1837 = this.records[iter1837];
          output.writeI64(iter1837);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31839 = input.readListBegin();
          const _size1838 = _rtmp31839.size || 0;
          for (let _i1840 = 0; _i1840 < _size1838; ++_i1840) {
            let elem1841 = null;
            elem1841 = input.readI64();
            this.records.push(elem1841);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1842 in this.records) {
        if (this.records.hasOwnProperty(iter1842)) {
          iter1842 = this.records[iter1842];
          output.writeI64(iter1842);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31844 = input.readListBegin();
          const _size1843 = _rtmp31844.size || 0;
          for (let _i1845 = 0; _i1845 < _size1843; ++_i1845) {
            let elem1846 = null;
            elem1846 = input.readI64();
            this.records.push(elem1846);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1847 in this.records) {
        if (this.records.hasOwnProperty(iter1847)) {
          iter1847 = this.records[iter1847];
          output.writeI64(iter1847);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_minKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31849 = input.readMapBegin();
          const _size1848 = _rtmp31849.size || 0;
          for (let _i1850 = 0; _i1850 < _size1848; ++_i1850) {
            let key1851 = null;
            let val1852 = null;
            key1851 = input.readI64();
            val1852 = [];
            const _rtmp31854 = input.readSetBegin();
            const _size1853 = _rtmp31854.size || 0;
            for (let _i1855 = 0; _i1855 < _size1853; ++_i1855) {
              let elem1856 = null;
              elem1856 = new data_ttypes.TObject();
              elem1856.read(input);
              val1852.push(elem1856);
            }
            input.readSetEnd();
            this.success[key1851] = val1852;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1857 in this.success) {
        if (this.success.hasOwnProperty(kiter1857)) {
          let viter1858 = this.success[kiter1857];
          output.writeI64(kiter1857);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1858.length);
          for (let iter1859 in viter1858) {
            if (viter1858.hasOwnProperty(iter1859)) {
              iter1859 = viter1858[iter1859];
              iter1859.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31861 = input.readMapBegin();
          const _size1860 = _rtmp31861.size || 0;
          for (let _i1862 = 0; _i1862 < _size1860; ++_i1862) {
            let key1863 = null;
            let val1864 = null;
            key1863 = input.readI64();
            val1864 = [];
            const _rtmp31866 = input.readSetBegin();
            const _size1865 = _rtmp31866.size || 0;
            for (let _i1867 = 0; _i1867 < _size1865; ++_i1867) {
              let elem1868 = null;
              elem1868 = new data_ttypes.TObject();
              elem1868.read(input);
              val1864.push(elem1868);
            }
            input.readSetEnd();
            this.success[key1863] = val1864;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1869 in this.success) {
        if (this.success.hasOwnProperty(kiter1869)) {
          let viter1870 = this.success[kiter1869];
          output.writeI64(kiter1869);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1870.length);
          for (let iter1871 in viter1870) {
            if (viter1870.hasOwnProperty(iter1871)) {
              iter1871 = viter1870[iter1871];
              iter1871.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31873 = input.readMapBegin();
          const _size1872 = _rtmp31873.size || 0;
          for (let _i1874 = 0; _i1874 < _size1872; ++_i1874) {
            let key1875 = null;
            let val1876 = null;
            key1875 = input.readI64();
            val1876 = [];
            const _rtmp31878 = input.readSetBegin();
            const _size1877 = _rtmp31878.size || 0;
            for (let _i1879 = 0; _i1879 < _size1877; ++_i1879) {
              let elem1880 = null;
              elem1880 = new data_ttypes.TObject();
              elem1880.read(input);
              val1876.push(elem1880);
            }
            input.readSetEnd();
            this.success[key1875] = val1876;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1881 in this.success) {
        if (this.success.hasOwnProperty(kiter1881)) {
          let viter1882 = this.success[kiter1881];
          output.writeI64(kiter1881);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1882.length);
          for (let iter1883 in viter1882) {
            if (viter1882.hasOwnProperty(iter1883)) {
              iter1883 = viter1882[iter1883];
              iter1883.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecord_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31885 = input.readListBegin();
          const _size1884 = _rtmp31885.size || 0;
          for (let _i1886 = 0; _i1886 < _size1884; ++_i1886) {
            let elem1887 = null;
            elem1887 = input.readString();
            this.keys.push(elem1887);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1888 in this.keys) {
        if (this.keys.hasOwnProperty(iter1888)) {
          iter1888 = this.keys[iter1888];
          output.writeString(iter1888);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31890 = input.readMapBegin();
          const _size1889 = _rtmp31890.size || 0;
          for (let _i1891 = 0; _i1891 < _size1889; ++_i1891) {
            let key1892 = null;
            let val1893 = null;
            key1892 = input.readI64();
            val1893 = {};
            const _rtmp31895 = input.readMapBegin();
            const _size1894 = _rtmp31895.size || 0;
            for (let _i1896 = 0; _i1896 < _size1894; ++_i1896) {
              let key1897 = null;
              let val1898 = null;
              key1897 = input.readString();
              val1898 = [];
              const _rtmp31900 = input.readSetBegin();
              const _size1899 = _rtmp31900.size || 0;
              for (let _i1901 = 0; _i1901 < _size1899; ++_i1901) {
                let elem1902 = null;
                elem1902 = new data_ttypes.TObject();
                elem1902.read(input);
                val1898.push(elem1902);
              }
              input.readSetEnd();
              val1893[key1897] = val1898;
            }
            input.readMapEnd();
            this.success[key1892] = val1893;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1903 in this.success) {
        if (this.success.hasOwnProperty(kiter1903)) {
          let viter1904 = this.success[kiter1903];
          output.writeI64(kiter1903);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1904));
          for (let kiter1905 in viter1904) {
            if (viter1904.hasOwnProperty(kiter1905)) {
              let viter1906 = viter1904[kiter1905];
              output.writeString(kiter1905);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1906.length);
              for (let iter1907 in viter1906) {
                if (viter1906.hasOwnProperty(iter1907)) {
                  iter1907 = viter1906[iter1907];
                  iter1907.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecordTime_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31909 = input.readListBegin();
          const _size1908 = _rtmp31909.size || 0;
          for (let _i1910 = 0; _i1910 < _size1908; ++_i1910) {
            let elem1911 = null;
            elem1911 = input.readString();
            this.keys.push(elem1911);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1912 in this.keys) {
        if (this.keys.hasOwnProperty(iter1912)) {
          iter1912 = this.keys[iter1912];
          output.writeString(iter1912);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31914 = input.readMapBegin();
          const _size1913 = _rtmp31914.size || 0;
          for (let _i1915 = 0; _i1915 < _size1913; ++_i1915) {
            let key1916 = null;
            let val1917 = null;
            key1916 = input.readI64();
            val1917 = {};
            const _rtmp31919 = input.readMapBegin();
            const _size1918 = _rtmp31919.size || 0;
            for (let _i1920 = 0; _i1920 < _size1918; ++_i1920) {
              let key1921 = null;
              let val1922 = null;
              key1921 = input.readString();
              val1922 = [];
              const _rtmp31924 = input.readSetBegin();
              const _size1923 = _rtmp31924.size || 0;
              for (let _i1925 = 0; _i1925 < _size1923; ++_i1925) {
                let elem1926 = null;
                elem1926 = new data_ttypes.TObject();
                elem1926.read(input);
                val1922.push(elem1926);
              }
              input.readSetEnd();
              val1917[key1921] = val1922;
            }
            input.readMapEnd();
            this.success[key1916] = val1917;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1927 in this.success) {
        if (this.success.hasOwnProperty(kiter1927)) {
          let viter1928 = this.success[kiter1927];
          output.writeI64(kiter1927);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1928));
          for (let kiter1929 in viter1928) {
            if (viter1928.hasOwnProperty(kiter1929)) {
              let viter1930 = viter1928[kiter1929];
              output.writeString(kiter1929);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1930.length);
              for (let iter1931 in viter1930) {
                if (viter1930.hasOwnProperty(iter1931)) {
                  iter1931 = viter1930[iter1931];
                  iter1931.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecordTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31933 = input.readListBegin();
          const _size1932 = _rtmp31933.size || 0;
          for (let _i1934 = 0; _i1934 < _size1932; ++_i1934) {
            let elem1935 = null;
            elem1935 = input.readString();
            this.keys.push(elem1935);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1936 in this.keys) {
        if (this.keys.hasOwnProperty(iter1936)) {
          iter1936 = this.keys[iter1936];
          output.writeString(iter1936);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31938 = input.readMapBegin();
          const _size1937 = _rtmp31938.size || 0;
          for (let _i1939 = 0; _i1939 < _size1937; ++_i1939) {
            let key1940 = null;
            let val1941 = null;
            key1940 = input.readI64();
            val1941 = {};
            const _rtmp31943 = input.readMapBegin();
            const _size1942 = _rtmp31943.size || 0;
            for (let _i1944 = 0; _i1944 < _size1942; ++_i1944) {
              let key1945 = null;
              let val1946 = null;
              key1945 = input.readString();
              val1946 = [];
              const _rtmp31948 = input.readSetBegin();
              const _size1947 = _rtmp31948.size || 0;
              for (let _i1949 = 0; _i1949 < _size1947; ++_i1949) {
                let elem1950 = null;
                elem1950 = new data_ttypes.TObject();
                elem1950.read(input);
                val1946.push(elem1950);
              }
              input.readSetEnd();
              val1941[key1945] = val1946;
            }
            input.readMapEnd();
            this.success[key1940] = val1941;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1951 in this.success) {
        if (this.success.hasOwnProperty(kiter1951)) {
          let viter1952 = this.success[kiter1951];
          output.writeI64(kiter1951);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1952));
          for (let kiter1953 in viter1952) {
            if (viter1952.hasOwnProperty(kiter1953)) {
              let viter1954 = viter1952[kiter1953];
              output.writeString(kiter1953);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1954.length);
              for (let iter1955 in viter1954) {
                if (viter1954.hasOwnProperty(iter1955)) {
                  iter1955 = viter1954[iter1955];
                  iter1955.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecords_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp31957 = input.readListBegin();
          const _size1956 = _rtmp31957.size || 0;
          for (let _i1958 = 0; _i1958 < _size1956; ++_i1958) {
            let elem1959 = null;
            elem1959 = input.readString();
            this.keys.push(elem1959);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31961 = input.readListBegin();
          const _size1960 = _rtmp31961.size || 0;
          for (let _i1962 = 0; _i1962 < _size1960; ++_i1962) {
            let elem1963 = null;
            elem1963 = input.readI64();
            this.records.push(elem1963);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1964 in this.keys) {
        if (this.keys.hasOwnProperty(iter1964)) {
          iter1964 = this.keys[iter1964];
          output.writeString(iter1964);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1965 in this.records) {
        if (this.records.hasOwnProperty(iter1965)) {
          iter1965 = this.records[iter1965];
          output.writeI64(iter1965);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31967 = input.readMapBegin();
          const _size1966 = _rtmp31967.size || 0;
          for (let _i1968 = 0; _i1968 < _size1966; ++_i1968) {
            let key1969 = null;
            let val1970 = null;
            key1969 = input.readI64();
            val1970 = {};
            const _rtmp31972 = input.readMapBegin();
            const _size1971 = _rtmp31972.size || 0;
            for (let _i1973 = 0; _i1973 < _size1971; ++_i1973) {
              let key1974 = null;
              let val1975 = null;
              key1974 = input.readString();
              val1975 = [];
              const _rtmp31977 = input.readSetBegin();
              const _size1976 = _rtmp31977.size || 0;
              for (let _i1978 = 0; _i1978 < _size1976; ++_i1978) {
                let elem1979 = null;
                elem1979 = new data_ttypes.TObject();
                elem1979.read(input);
                val1975.push(elem1979);
              }
              input.readSetEnd();
              val1970[key1974] = val1975;
            }
            input.readMapEnd();
            this.success[key1969] = val1970;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter1980 in this.success) {
        if (this.success.hasOwnProperty(kiter1980)) {
          let viter1981 = this.success[kiter1980];
          output.writeI64(kiter1980);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1981));
          for (let kiter1982 in viter1981) {
            if (viter1981.hasOwnProperty(kiter1982)) {
              let viter1983 = viter1981[kiter1982];
              output.writeString(kiter1982);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1983.length);
              for (let iter1984 in viter1983) {
                if (viter1983.hasOwnProperty(iter1984)) {
                  iter1984 = viter1983[iter1984];
                  iter1984.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp31986 = input.readListBegin();
          const _size1985 = _rtmp31986.size || 0;
          for (let _i1987 = 0; _i1987 < _size1985; ++_i1987) {
            let elem1988 = null;
            elem1988 = input.readI64();
            this.records.push(elem1988);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1989 in this.records) {
        if (this.records.hasOwnProperty(iter1989)) {
          iter1989 = this.records[iter1989];
          output.writeI64(iter1989);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31991 = input.readMapBegin();
          const _size1990 = _rtmp31991.size || 0;
          for (let _i1992 = 0; _i1992 < _size1990; ++_i1992) {
            let key1993 = null;
            let val1994 = null;
            key1993 = input.readI64();
            val1994 = [];
            const _rtmp31996 = input.readSetBegin();
            const _size1995 = _rtmp31996.size || 0;
            for (let _i1997 = 0; _i1997 < _size1995; ++_i1997) {
              let elem1998 = null;
              elem1998 = new data_ttypes.TObject();
              elem1998.read(input);
              val1994.push(elem1998);
            }
            input.readSetEnd();
            this.success[key1993] = val1994;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter1999 in this.success) {
        if (this.success.hasOwnProperty(kiter1999)) {
          let viter2000 = this.success[kiter1999];
          output.writeI64(kiter1999);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2000.length);
          for (let iter2001 in viter2000) {
            if (viter2000.hasOwnProperty(iter2001)) {
              iter2001 = viter2000[iter2001];
              iter2001.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp32003 = input.readListBegin();
          const _size2002 = _rtmp32003.size || 0;
          for (let _i2004 = 0; _i2004 < _size2002; ++_i2004) {
            let elem2005 = null;
            elem2005 = input.readI64();
            this.records.push(elem2005);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter2006 in this.records) {
        if (this.records.hasOwnProperty(iter2006)) {
          iter2006 = this.records[iter2006];
          output.writeI64(iter2006);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32008 = input.readMapBegin();
          const _size2007 = _rtmp32008.size || 0;
          for (let _i2009 = 0; _i2009 < _size2007; ++_i2009) {
            let key2010 = null;
            let val2011 = null;
            key2010 = input.readI64();
            val2011 = [];
            const _rtmp32013 = input.readSetBegin();
            const _size2012 = _rtmp32013.size || 0;
            for (let _i2014 = 0; _i2014 < _size2012; ++_i2014) {
              let elem2015 = null;
              elem2015 = new data_ttypes.TObject();
              elem2015.read(input);
              val2011.push(elem2015);
            }
            input.readSetEnd();
            this.success[key2010] = val2011;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter2016 in this.success) {
        if (this.success.hasOwnProperty(kiter2016)) {
          let viter2017 = this.success[kiter2016];
          output.writeI64(kiter2016);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2017.length);
          for (let iter2018 in viter2017) {
            if (viter2017.hasOwnProperty(iter2018)) {
              iter2018 = viter2017[iter2018];
              iter2018.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp32020 = input.readListBegin();
          const _size2019 = _rtmp32020.size || 0;
          for (let _i2021 = 0; _i2021 < _size2019; ++_i2021) {
            let elem2022 = null;
            elem2022 = input.readI64();
            this.records.push(elem2022);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter2023 in this.records) {
        if (this.records.hasOwnProperty(iter2023)) {
          iter2023 = this.records[iter2023];
          output.writeI64(iter2023);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32025 = input.readMapBegin();
          const _size2024 = _rtmp32025.size || 0;
          for (let _i2026 = 0; _i2026 < _size2024; ++_i2026) {
            let key2027 = null;
            let val2028 = null;
            key2027 = input.readI64();
            val2028 = [];
            const _rtmp32030 = input.readSetBegin();
            const _size2029 = _rtmp32030.size || 0;
            for (let _i2031 = 0; _i2031 < _size2029; ++_i2031) {
              let elem2032 = null;
              elem2032 = new data_ttypes.TObject();
              elem2032.read(input);
              val2028.push(elem2032);
            }
            input.readSetEnd();
            this.success[key2027] = val2028;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter2033 in this.success) {
        if (this.success.hasOwnProperty(kiter2033)) {
          let viter2034 = this.success[kiter2033];
          output.writeI64(kiter2033);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2034.length);
          for (let iter2035 in viter2034) {
            if (viter2034.hasOwnProperty(iter2035)) {
              iter2035 = viter2034[iter2035];
              iter2035.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecordsTime_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp32037 = input.readListBegin();
          const _size2036 = _rtmp32037.size || 0;
          for (let _i2038 = 0; _i2038 < _size2036; ++_i2038) {
            let elem2039 = null;
            elem2039 = input.readString();
            this.keys.push(elem2039);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp32041 = input.readListBegin();
          const _size2040 = _rtmp32041.size || 0;
          for (let _i2042 = 0; _i2042 < _size2040; ++_i2042) {
            let elem2043 = null;
            elem2043 = input.readI64();
            this.records.push(elem2043);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2044 in this.keys) {
        if (this.keys.hasOwnProperty(iter2044)) {
          iter2044 = this.keys[iter2044];
          output.writeString(iter2044);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter2045 in this.records) {
        if (this.records.hasOwnProperty(iter2045)) {
          iter2045 = this.records[iter2045];
          output.writeI64(iter2045);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32047 = input.readMapBegin();
          const _size2046 = _rtmp32047.size || 0;
          for (let _i2048 = 0; _i2048 < _size2046; ++_i2048) {
            let key2049 = null;
            let val2050 = null;
            key2049 = input.readI64();
            val2050 = {};
            const _rtmp32052 = input.readMapBegin();
            const _size2051 = _rtmp32052.size || 0;
            for (let _i2053 = 0; _i2053 < _size2051; ++_i2053) {
              let key2054 = null;
              let val2055 = null;
              key2054 = input.readString();
              val2055 = [];
              const _rtmp32057 = input.readSetBegin();
              const _size2056 = _rtmp32057.size || 0;
              for (let _i2058 = 0; _i2058 < _size2056; ++_i2058) {
                let elem2059 = null;
                elem2059 = new data_ttypes.TObject();
                elem2059.read(input);
                val2055.push(elem2059);
              }
              input.readSetEnd();
              val2050[key2054] = val2055;
            }
            input.readMapEnd();
            this.success[key2049] = val2050;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter2060 in this.success) {
        if (this.success.hasOwnProperty(kiter2060)) {
          let viter2061 = this.success[kiter2060];
          output.writeI64(kiter2060);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2061));
          for (let kiter2062 in viter2061) {
            if (viter2061.hasOwnProperty(kiter2062)) {
              let viter2063 = viter2061[kiter2062];
              output.writeString(kiter2062);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2063.length);
              for (let iter2064 in viter2063) {
                if (viter2063.hasOwnProperty(iter2064)) {
                  iter2064 = viter2063[iter2064];
                  iter2064.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecordsTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp32066 = input.readListBegin();
          const _size2065 = _rtmp32066.size || 0;
          for (let _i2067 = 0; _i2067 < _size2065; ++_i2067) {
            let elem2068 = null;
            elem2068 = input.readString();
            this.keys.push(elem2068);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.records = [];
          const _rtmp32070 = input.readListBegin();
          const _size2069 = _rtmp32070.size || 0;
          for (let _i2071 = 0; _i2071 < _size2069; ++_i2071) {
            let elem2072 = null;
            elem2072 = input.readI64();
            this.records.push(elem2072);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2073 in this.keys) {
        if (this.keys.hasOwnProperty(iter2073)) {
          iter2073 = this.keys[iter2073];
          output.writeString(iter2073);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter2074 in this.records) {
        if (this.records.hasOwnProperty(iter2074)) {
          iter2074 = this.records[iter2074];
          output.writeI64(iter2074);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32076 = input.readMapBegin();
          const _size2075 = _rtmp32076.size || 0;
          for (let _i2077 = 0; _i2077 < _size2075; ++_i2077) {
            let key2078 = null;
            let val2079 = null;
            key2078 = input.readI64();
            val2079 = {};
            const _rtmp32081 = input.readMapBegin();
            const _size2080 = _rtmp32081.size || 0;
            for (let _i2082 = 0; _i2082 < _size2080; ++_i2082) {
              let key2083 = null;
              let val2084 = null;
              key2083 = input.readString();
              val2084 = [];
              const _rtmp32086 = input.readSetBegin();
              const _size2085 = _rtmp32086.size || 0;
              for (let _i2087 = 0; _i2087 < _size2085; ++_i2087) {
                let elem2088 = null;
                elem2088 = new data_ttypes.TObject();
                elem2088.read(input);
                val2084.push(elem2088);
              }
              input.readSetEnd();
              val2079[key2083] = val2084;
            }
            input.readMapEnd();
            this.success[key2078] = val2079;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter2089 in this.success) {
        if (this.success.hasOwnProperty(kiter2089)) {
          let viter2090 = this.success[kiter2089];
          output.writeI64(kiter2089);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2090));
          for (let kiter2091 in viter2090) {
            if (viter2090.hasOwnProperty(kiter2091)) {
              let viter2092 = viter2090[kiter2091];
              output.writeString(kiter2091);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2092.length);
              for (let iter2093 in viter2092) {
                if (viter2092.hasOwnProperty(iter2093)) {
                  iter2093 = viter2092[iter2093];
                  iter2093.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32095 = input.readMapBegin();
          const _size2094 = _rtmp32095.size || 0;
          for (let _i2096 = 0; _i2096 < _size2094; ++_i2096) {
            let key2097 = null;
            let val2098 = null;
            key2097 = input.readI64();
            val2098 = [];
            const _rtmp32100 = input.readSetBegin();
            const _size2099 = _rtmp32100.size || 0;
            for (let _i2101 = 0; _i2101 < _size2099; ++_i2101) {
              let elem2102 = null;
              elem2102 = new data_ttypes.TObject();
              elem2102.read(input);
              val2098.push(elem2102);
            }
            input.readSetEnd();
            this.success[key2097] = val2098;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter2103 in this.success) {
        if (this.success.hasOwnProperty(kiter2103)) {
          let viter2104 = this.success[kiter2103];
          output.writeI64(kiter2103);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2104.length);
          for (let iter2105 in viter2104) {
            if (viter2104.hasOwnProperty(iter2105)) {
              iter2105 = viter2104[iter2105];
              iter2105.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32107 = input.readMapBegin();
          const _size2106 = _rtmp32107.size || 0;
          for (let _i2108 = 0; _i2108 < _size2106; ++_i2108) {
            let key2109 = null;
            let val2110 = null;
            key2109 = input.readI64();
            val2110 = [];
            const _rtmp32112 = input.readSetBegin();
            const _size2111 = _rtmp32112.size || 0;
            for (let _i2113 = 0; _i2113 < _size2111; ++_i2113) {
              let elem2114 = null;
              elem2114 = new data_ttypes.TObject();
              elem2114.read(input);
              val2110.push(elem2114);
            }
            input.readSetEnd();
            this.success[key2109] = val2110;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter2115 in this.success) {
        if (this.success.hasOwnProperty(kiter2115)) {
          let viter2116 = this.success[kiter2115];
          output.writeI64(kiter2115);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2116.length);
          for (let iter2117 in viter2116) {
            if (viter2116.hasOwnProperty(iter2117)) {
              iter2117 = viter2116[iter2117];
              iter2117.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32119 = input.readMapBegin();
          const _size2118 = _rtmp32119.size || 0;
          for (let _i2120 = 0; _i2120 < _size2118; ++_i2120) {
            let key2121 = null;
            let val2122 = null;
            key2121 = input.readI64();
            val2122 = [];
            const _rtmp32124 = input.readSetBegin();
            const _size2123 = _rtmp32124.size || 0;
            for (let _i2125 = 0; _i2125 < _size2123; ++_i2125) {
              let elem2126 = null;
              elem2126 = new data_ttypes.TObject();
              elem2126.read(input);
              val2122.push(elem2126);
            }
            input.readSetEnd();
            this.success[key2121] = val2122;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter2127 in this.success) {
        if (this.success.hasOwnProperty(kiter2127)) {
          let viter2128 = this.success[kiter2127];
          output.writeI64(kiter2127);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2128.length);
          for (let iter2129 in viter2128) {
            if (viter2128.hasOwnProperty(iter2129)) {
              iter2129 = viter2128[iter2129];
              iter2129.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCcl_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp32131 = input.readListBegin();
          const _size2130 = _rtmp32131.size || 0;
          for (let _i2132 = 0; _i2132 < _size2130; ++_i2132) {
            let elem2133 = null;
            elem2133 = input.readString();
            this.keys.push(elem2133);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2134 in this.keys) {
        if (this.keys.hasOwnProperty(iter2134)) {
          iter2134 = this.keys[iter2134];
          output.writeString(iter2134);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32136 = input.readMapBegin();
          const _size2135 = _rtmp32136.size || 0;
          for (let _i2137 = 0; _i2137 < _size2135; ++_i2137) {
            let key2138 = null;
            let val2139 = null;
            key2138 = input.readI64();
            val2139 = {};
            const _rtmp32141 = input.readMapBegin();
            const _size2140 = _rtmp32141.size || 0;
            for (let _i2142 = 0; _i2142 < _size2140; ++_i2142) {
              let key2143 = null;
              let val2144 = null;
              key2143 = input.readString();
              val2144 = [];
              const _rtmp32146 = input.readSetBegin();
              const _size2145 = _rtmp32146.size || 0;
              for (let _i2147 = 0; _i2147 < _size2145; ++_i2147) {
                let elem2148 = null;
                elem2148 = new data_ttypes.TObject();
                elem2148.read(input);
                val2144.push(elem2148);
              }
              input.readSetEnd();
              val2139[key2143] = val2144;
            }
            input.readMapEnd();
            this.success[key2138] = val2139;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter2149 in this.success) {
        if (this.success.hasOwnProperty(kiter2149)) {
          let viter2150 = this.success[kiter2149];
          output.writeI64(kiter2149);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2150));
          for (let kiter2151 in viter2150) {
            if (viter2150.hasOwnProperty(kiter2151)) {
              let viter2152 = viter2150[kiter2151];
              output.writeString(kiter2151);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2152.length);
              for (let iter2153 in viter2152) {
                if (viter2152.hasOwnProperty(iter2153)) {
                  iter2153 = viter2152[iter2153];
                  iter2153.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCclTime_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp32155 = input.readListBegin();
          const _size2154 = _rtmp32155.size || 0;
          for (let _i2156 = 0; _i2156 < _size2154; ++_i2156) {
            let elem2157 = null;
            elem2157 = input.readString();
            this.keys.push(elem2157);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2158 in this.keys) {
        if (this.keys.hasOwnProperty(iter2158)) {
          iter2158 = this.keys[iter2158];
          output.writeString(iter2158);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32160 = input.readMapBegin();
          const _size2159 = _rtmp32160.size || 0;
          for (let _i2161 = 0; _i2161 < _size2159; ++_i2161) {
            let key2162 = null;
            let val2163 = null;
            key2162 = input.readI64();
            val2163 = {};
            const _rtmp32165 = input.readMapBegin();
            const _size2164 = _rtmp32165.size || 0;
            for (let _i2166 = 0; _i2166 < _size2164; ++_i2166) {
              let key2167 = null;
              let val2168 = null;
              key2167 = input.readString();
              val2168 = [];
              const _rtmp32170 = input.readSetBegin();
              const _size2169 = _rtmp32170.size || 0;
              for (let _i2171 = 0; _i2171 < _size2169; ++_i2171) {
                let elem2172 = null;
                elem2172 = new data_ttypes.TObject();
                elem2172.read(input);
                val2168.push(elem2172);
              }
              input.readSetEnd();
              val2163[key2167] = val2168;
            }
            input.readMapEnd();
            this.success[key2162] = val2163;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter2173 in this.success) {
        if (this.success.hasOwnProperty(kiter2173)) {
          let viter2174 = this.success[kiter2173];
          output.writeI64(kiter2173);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2174));
          for (let kiter2175 in viter2174) {
            if (viter2174.hasOwnProperty(kiter2175)) {
              let viter2176 = viter2174[kiter2175];
              output.writeString(kiter2175);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2176.length);
              for (let iter2177 in viter2176) {
                if (viter2176.hasOwnProperty(iter2177)) {
                  iter2177 = viter2176[iter2177];
                  iter2177.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCclTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp32179 = input.readListBegin();
          const _size2178 = _rtmp32179.size || 0;
          for (let _i2180 = 0; _i2180 < _size2178; ++_i2180) {
            let elem2181 = null;
            elem2181 = input.readString();
            this.keys.push(elem2181);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2182 in this.keys) {
        if (this.keys.hasOwnProperty(iter2182)) {
          iter2182 = this.keys[iter2182];
          output.writeString(iter2182);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32184 = input.readMapBegin();
          const _size2183 = _rtmp32184.size || 0;
          for (let _i2185 = 0; _i2185 < _size2183; ++_i2185) {
            let key2186 = null;
            let val2187 = null;
            key2186 = input.readI64();
            val2187 = {};
            const _rtmp32189 = input.readMapBegin();
            const _size2188 = _rtmp32189.size || 0;
            for (let _i2190 = 0; _i2190 < _size2188; ++_i2190) {
              let key2191 = null;
              let val2192 = null;
              key2191 = input.readString();
              val2192 = [];
              const _rtmp32194 = input.readSetBegin();
              const _size2193 = _rtmp32194.size || 0;
              for (let _i2195 = 0; _i2195 < _size2193; ++_i2195) {
                let elem2196 = null;
                elem2196 = new data_ttypes.TObject();
                elem2196.read(input);
                val2192.push(elem2196);
              }
              input.readSetEnd();
              val2187[key2191] = val2192;
            }
            input.readMapEnd();
            this.success[key2186] = val2187;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter2197 in this.success) {
        if (this.success.hasOwnProperty(kiter2197)) {
          let viter2198 = this.success[kiter2197];
          output.writeI64(kiter2197);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2198));
          for (let kiter2199 in viter2198) {
            if (viter2198.hasOwnProperty(kiter2199)) {
              let viter2200 = viter2198[kiter2199];
              output.writeString(kiter2199);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2200.length);
              for (let iter2201 in viter2200) {
                if (viter2200.hasOwnProperty(iter2201)) {
                  iter2201 = viter2200[iter2201];
                  iter2201.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32203 = input.readMapBegin();
          const _size2202 = _rtmp32203.size || 0;
          for (let _i2204 = 0; _i2204 < _size2202; ++_i2204) {
            let key2205 = null;
            let val2206 = null;
            key2205 = input.readI64();
            val2206 = [];
            const _rtmp32208 = input.readSetBegin();
            const _size2207 = _rtmp32208.size || 0;
            for (let _i2209 = 0; _i2209 < _size2207; ++_i2209) {
              let elem2210 = null;
              elem2210 = new data_ttypes.TObject();
              elem2210.read(input);
              val2206.push(elem2210);
            }
            input.readSetEnd();
            this.success[key2205] = val2206;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter2211 in this.success) {
        if (this.success.hasOwnProperty(kiter2211)) {
          let viter2212 = this.success[kiter2211];
          output.writeI64(kiter2211);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2212.length);
          for (let iter2213 in viter2212) {
            if (viter2212.hasOwnProperty(iter2213)) {
              iter2213 = viter2212[iter2213];
              iter2213.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32215 = input.readMapBegin();
          const _size2214 = _rtmp32215.size || 0;
          for (let _i2216 = 0; _i2216 < _size2214; ++_i2216) {
            let key2217 = null;
            let val2218 = null;
            key2217 = input.readI64();
            val2218 = [];
            const _rtmp32220 = input.readSetBegin();
            const _size2219 = _rtmp32220.size || 0;
            for (let _i2221 = 0; _i2221 < _size2219; ++_i2221) {
              let elem2222 = null;
              elem2222 = new data_ttypes.TObject();
              elem2222.read(input);
              val2218.push(elem2222);
            }
            input.readSetEnd();
            this.success[key2217] = val2218;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter2223 in this.success) {
        if (this.success.hasOwnProperty(kiter2223)) {
          let viter2224 = this.success[kiter2223];
          output.writeI64(kiter2223);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2224.length);
          for (let iter2225 in viter2224) {
            if (viter2224.hasOwnProperty(iter2225)) {
              iter2225 = viter2224[iter2225];
              iter2225.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32227 = input.readMapBegin();
          const _size2226 = _rtmp32227.size || 0;
          for (let _i2228 = 0; _i2228 < _size2226; ++_i2228) {
            let key2229 = null;
            let val2230 = null;
            key2229 = input.readI64();
            val2230 = [];
            const _rtmp32232 = input.readSetBegin();
            const _size2231 = _rtmp32232.size || 0;
            for (let _i2233 = 0; _i2233 < _size2231; ++_i2233) {
              let elem2234 = null;
              elem2234 = new data_ttypes.TObject();
              elem2234.read(input);
              val2230.push(elem2234);
            }
            input.readSetEnd();
            this.success[key2229] = val2230;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (let kiter2235 in this.success) {
        if (this.success.hasOwnProperty(kiter2235)) {
          let viter2236 = this.success[kiter2235];
          output.writeI64(kiter2235);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2236.length);
          for (let iter2237 in viter2236) {
            if (viter2236.hasOwnProperty(iter2237)) {
              iter2237 = viter2236[iter2237];
              iter2237.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCriteria_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp32239 = input.readListBegin();
          const _size2238 = _rtmp32239.size || 0;
          for (let _i2240 = 0; _i2240 < _size2238; ++_i2240) {
            let elem2241 = null;
            elem2241 = input.readString();
            this.keys.push(elem2241);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2242 in this.keys) {
        if (this.keys.hasOwnProperty(iter2242)) {
          iter2242 = this.keys[iter2242];
          output.writeString(iter2242);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32244 = input.readMapBegin();
          const _size2243 = _rtmp32244.size || 0;
          for (let _i2245 = 0; _i2245 < _size2243; ++_i2245) {
            let key2246 = null;
            let val2247 = null;
            key2246 = input.readI64();
            val2247 = {};
            const _rtmp32249 = input.readMapBegin();
            const _size2248 = _rtmp32249.size || 0;
            for (let _i2250 = 0; _i2250 < _size2248; ++_i2250) {
              let key2251 = null;
              let val2252 = null;
              key2251 = input.readString();
              val2252 = [];
              const _rtmp32254 = input.readSetBegin();
              const _size2253 = _rtmp32254.size || 0;
              for (let _i2255 = 0; _i2255 < _size2253; ++_i2255) {
                let elem2256 = null;
                elem2256 = new data_ttypes.TObject();
                elem2256.read(input);
                val2252.push(elem2256);
              }
              input.readSetEnd();
              val2247[key2251] = val2252;
            }
            input.readMapEnd();
            this.success[key2246] = val2247;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter2257 in this.success) {
        if (this.success.hasOwnProperty(kiter2257)) {
          let viter2258 = this.success[kiter2257];
          output.writeI64(kiter2257);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2258));
          for (let kiter2259 in viter2258) {
            if (viter2258.hasOwnProperty(kiter2259)) {
              let viter2260 = viter2258[kiter2259];
              output.writeString(kiter2259);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2260.length);
              for (let iter2261 in viter2260) {
                if (viter2260.hasOwnProperty(iter2261)) {
                  iter2261 = viter2260[iter2261];
                  iter2261.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCriteriaTime_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp32263 = input.readListBegin();
          const _size2262 = _rtmp32263.size || 0;
          for (let _i2264 = 0; _i2264 < _size2262; ++_i2264) {
            let elem2265 = null;
            elem2265 = input.readString();
            this.keys.push(elem2265);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2266 in this.keys) {
        if (this.keys.hasOwnProperty(iter2266)) {
          iter2266 = this.keys[iter2266];
          output.writeString(iter2266);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32268 = input.readMapBegin();
          const _size2267 = _rtmp32268.size || 0;
          for (let _i2269 = 0; _i2269 < _size2267; ++_i2269) {
            let key2270 = null;
            let val2271 = null;
            key2270 = input.readI64();
            val2271 = {};
            const _rtmp32273 = input.readMapBegin();
            const _size2272 = _rtmp32273.size || 0;
            for (let _i2274 = 0; _i2274 < _size2272; ++_i2274) {
              let key2275 = null;
              let val2276 = null;
              key2275 = input.readString();
              val2276 = [];
              const _rtmp32278 = input.readSetBegin();
              const _size2277 = _rtmp32278.size || 0;
              for (let _i2279 = 0; _i2279 < _size2277; ++_i2279) {
                let elem2280 = null;
                elem2280 = new data_ttypes.TObject();
                elem2280.read(input);
                val2276.push(elem2280);
              }
              input.readSetEnd();
              val2271[key2275] = val2276;
            }
            input.readMapEnd();
            this.success[key2270] = val2271;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter2281 in this.success) {
        if (this.success.hasOwnProperty(kiter2281)) {
          let viter2282 = this.success[kiter2281];
          output.writeI64(kiter2281);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2282));
          for (let kiter2283 in viter2282) {
            if (viter2282.hasOwnProperty(kiter2283)) {
              let viter2284 = viter2282[kiter2283];
              output.writeString(kiter2283);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2284.length);
              for (let iter2285 in viter2284) {
                if (viter2284.hasOwnProperty(iter2285)) {
                  iter2285 = viter2284[iter2285];
                  iter2285.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCriteriaTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keys = [];
          const _rtmp32287 = input.readListBegin();
          const _size2286 = _rtmp32287.size || 0;
          for (let _i2288 = 0; _i2288 < _size2286; ++_i2288) {
            let elem2289 = null;
            elem2289 = input.readString();
            this.keys.push(elem2289);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2290 in this.keys) {
        if (this.keys.hasOwnProperty(iter2290)) {
          iter2290 = this.keys[iter2290];
          output.writeString(iter2290);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_navigateKeysCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp32292 = input.readMapBegin();
          const _size2291 = _rtmp32292.size || 0;
          for (let _i2293 = 0; _i2293 < _size2291; ++_i2293) {
            let key2294 = null;
            let val2295 = null;
            key2294 = input.readI64();
            val2295 = {};
            const _rtmp32297 = input.readMapBegin();
            const _size2296 = _rtmp32297.size || 0;
            for (let _i2298 = 0; _i2298 < _size2296; ++_i2298) {
              let key2299 = null;
              let val2300 = null;
              key2299 = input.readString();
              val2300 = [];
              const _rtmp32302 = input.readSetBegin();
              const _size2301 = _rtmp32302.size || 0;
              for (let _i2303 = 0; _i2303 < _size2301; ++_i2303) {
                let elem2304 = null;
                elem2304 = new data_ttypes.TObject();
                elem2304.read(input);
                val2300.push(elem2304);
              }
              input.readSetEnd();
              val2295[key2299] = val2300;
            }
            input.readMapEnd();
            this.success[key2294] = val2295;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (let kiter2305 in this.success) {
        if (this.success.hasOwnProperty(kiter2305)) {
          let viter2306 = this.success[kiter2305];
          output.writeI64(kiter2305);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2306));
          for (let kiter2307 in viter2306) {
            if (viter2306.hasOwnProperty(kiter2307)) {
              let viter2308 = viter2306[kiter2307];
              output.writeString(kiter2307);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2308.length);
              for (let iter2309 in viter2308) {
                if (viter2308.hasOwnProperty(iter2309)) {
                  iter2309 = viter2308[iter2309];
                  iter2309.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getServerEnvironment_args = class {
  constructor(args) {
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.TransactionToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.TransactionToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getServerEnvironment_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getServerEnvironment_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getServerEnvironment_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getServerVersion_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getServerVersion_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_getServerVersion_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getServerVersion_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_time_args = class {
  constructor(args) {
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.TransactionToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.TransactionToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_time_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_time_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_time_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_timePhrase_args = class {
  constructor(args) {
    this.phrase = null;
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.phrase !== undefined && args.phrase !== null) {
        this.phrase = args.phrase;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.TransactionToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.phrase = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.TransactionToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_timePhrase_args');
    if (this.phrase !== null && this.phrase !== undefined) {
      output.writeFieldBegin('phrase', Thrift.Type.STRING, 1);
      output.writeString(this.phrase);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_timePhrase_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_timePhrase_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_invokeManagement_args = class {
  constructor(args) {
    this.method = null;
    this.params = null;
    this.creds = null;
    if (args) {
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [complex_ttypes.ComplexTObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.method = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.params = [];
          const _rtmp32311 = input.readListBegin();
          const _size2310 = _rtmp32311.size || 0;
          for (let _i2312 = 0; _i2312 < _size2310; ++_i2312) {
            let elem2313 = null;
            elem2313 = new complex_ttypes.ComplexTObject();
            elem2313.read(input);
            this.params.push(elem2313);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_invokeManagement_args');
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 2);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (let iter2314 in this.params) {
        if (this.params.hasOwnProperty(iter2314)) {
          iter2314 = this.params[iter2314];
          iter2314.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseService_invokeManagement_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ManagementException) {
        this.ex2 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new complex_ttypes.ComplexTObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new complex_ttypes.ComplexTObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.ManagementException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcourseService_invokeManagement_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ConcourseServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  abort (creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_abort(creds, transaction, environment);
    });
  }

  send_abort (creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_abort_args(params);
    try {
      output.writeMessageBegin('abort', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_abort (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_abort_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null);
  }

  addKeyValue (key, value, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addKeyValue(key, value, creds, transaction, environment);
    });
  }

  send_addKeyValue (key, value, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_addKeyValue_args(params);
    try {
      output.writeMessageBegin('addKeyValue', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addKeyValue (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_addKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValue failed: unknown result');
  }

  addKeyValueRecord (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addKeyValueRecord(key, value, record, creds, transaction, environment);
    });
  }

  send_addKeyValueRecord (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_addKeyValueRecord_args(params);
    try {
      output.writeMessageBegin('addKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addKeyValueRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_addKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValueRecord failed: unknown result');
  }

  addKeyValueRecords (key, value, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addKeyValueRecords(key, value, records, creds, transaction, environment);
    });
  }

  send_addKeyValueRecords (key, value, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_addKeyValueRecords_args(params);
    try {
      output.writeMessageBegin('addKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addKeyValueRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_addKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValueRecords failed: unknown result');
  }

  auditRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecord(record, creds, transaction, environment);
    });
  }

  send_auditRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecord_args(params);
    try {
      output.writeMessageBegin('auditRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecord failed: unknown result');
  }

  auditRecordStart (record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecordStart(record, start, creds, transaction, environment);
    });
  }

  send_auditRecordStart (record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecordStart_args(params);
    try {
      output.writeMessageBegin('auditRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStart failed: unknown result');
  }

  auditRecordStartstr (record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecordStartstr(record, start, creds, transaction, environment);
    });
  }

  send_auditRecordStartstr (record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecordStartstr_args(params);
    try {
      output.writeMessageBegin('auditRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartstr failed: unknown result');
  }

  auditRecordStartEnd (record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecordStartEnd(record, start, tend, creds, transaction, environment);
    });
  }

  send_auditRecordStartEnd (record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('auditRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartEnd failed: unknown result');
  }

  auditRecordStartstrEndstr (record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecordStartstrEndstr(record, start, tend, creds, transaction, environment);
    });
  }

  send_auditRecordStartstrEndstr (record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('auditRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartstrEndstr failed: unknown result');
  }

  auditKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_auditKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecord_args(params);
    try {
      output.writeMessageBegin('auditKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecord failed: unknown result');
  }

  auditKeyRecordStart (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecordStart(key, record, start, creds, transaction, environment);
    });
  }

  send_auditKeyRecordStart (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecordStart_args(params);
    try {
      output.writeMessageBegin('auditKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStart failed: unknown result');
  }

  auditKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecordStartstr(key, record, start, creds, transaction, environment);
    });
  }

  send_auditKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecordStartstr_args(params);
    try {
      output.writeMessageBegin('auditKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartstr failed: unknown result');
  }

  auditKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_auditKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('auditKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartEnd failed: unknown result');
  }

  auditKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_auditKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('auditKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartstrEndstr failed: unknown result');
  }

  browseKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKey(key, creds, transaction, environment);
    });
  }

  send_browseKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKey_args(params);
    try {
      output.writeMessageBegin('browseKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKey failed: unknown result');
  }

  browseKeys (keys, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeys(keys, creds, transaction, environment);
    });
  }

  send_browseKeys (keys, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeys_args(params);
    try {
      output.writeMessageBegin('browseKeys', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeys (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeys_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeys failed: unknown result');
  }

  browseKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_browseKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeyTime_args(params);
    try {
      output.writeMessageBegin('browseKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeyTime failed: unknown result');
  }

  browseKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_browseKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeyTimestr_args(params);
    try {
      output.writeMessageBegin('browseKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeyTimestr failed: unknown result');
  }

  browseKeysTime (keys, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeysTime(keys, timestamp, creds, transaction, environment);
    });
  }

  send_browseKeysTime (keys, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeysTime_args(params);
    try {
      output.writeMessageBegin('browseKeysTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeysTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeysTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeysTime failed: unknown result');
  }

  browseKeysTimestr (keys, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeysTimestr(keys, timestamp, creds, transaction, environment);
    });
  }

  send_browseKeysTimestr (keys, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeysTimestr_args(params);
    try {
      output.writeMessageBegin('browseKeysTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeysTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeysTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeysTimestr failed: unknown result');
  }

  chronologizeKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecord_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecord failed: unknown result');
  }

  chronologizeKeyRecordStart (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecordStart(key, record, start, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecordStart (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecordStart_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStart failed: unknown result');
  }

  chronologizeKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecordStartstr(key, record, start, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecordStartstr_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartstr failed: unknown result');
  }

  chronologizeKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartEnd failed: unknown result');
  }

  chronologizeKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartstrEndstr failed: unknown result');
  }

  clearRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearRecord(record, creds, transaction, environment);
    });
  }

  send_clearRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearRecord_args(params);
    try {
      output.writeMessageBegin('clearRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearRecords (records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearRecords(records, creds, transaction, environment);
    });
  }

  send_clearRecords (records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearRecords_args(params);
    try {
      output.writeMessageBegin('clearRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_clearKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearKeyRecord_args(params);
    try {
      output.writeMessageBegin('clearKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearKeysRecord (keys, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearKeysRecord(keys, record, creds, transaction, environment);
    });
  }

  send_clearKeysRecord (keys, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearKeysRecord_args(params);
    try {
      output.writeMessageBegin('clearKeysRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearKeysRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_clearKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearKeyRecords_args(params);
    try {
      output.writeMessageBegin('clearKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearKeysRecords (keys, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearKeysRecords(keys, records, creds, transaction, environment);
    });
  }

  send_clearKeysRecords (keys, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearKeysRecords_args(params);
    try {
      output.writeMessageBegin('clearKeysRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearKeysRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  commit (creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commit(creds, transaction, environment);
    });
  }

  send_commit (creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_commit_args(params);
    try {
      output.writeMessageBegin('commit', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commit (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_commit_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commit failed: unknown result');
  }

  describe (creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describe(creds, transaction, environment);
    });
  }

  send_describe (creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describe_args(params);
    try {
      output.writeMessageBegin('describe', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describe (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describe_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describe failed: unknown result');
  }

  describeTime (timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeTime(timestamp, creds, transaction, environment);
    });
  }

  send_describeTime (timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeTime_args(params);
    try {
      output.writeMessageBegin('describeTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeTime failed: unknown result');
  }

  describeTimestr (timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeTimestr(timestamp, creds, transaction, environment);
    });
  }

  send_describeTimestr (timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeTimestr_args(params);
    try {
      output.writeMessageBegin('describeTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeTimestr failed: unknown result');
  }

  describeRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecord(record, creds, transaction, environment);
    });
  }

  send_describeRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecord_args(params);
    try {
      output.writeMessageBegin('describeRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecord failed: unknown result');
  }

  describeRecordTime (record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecordTime(record, timestamp, creds, transaction, environment);
    });
  }

  send_describeRecordTime (record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecordTime_args(params);
    try {
      output.writeMessageBegin('describeRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordTime failed: unknown result');
  }

  describeRecordTimestr (record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecordTimestr(record, timestamp, creds, transaction, environment);
    });
  }

  send_describeRecordTimestr (record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecordTimestr_args(params);
    try {
      output.writeMessageBegin('describeRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordTimestr failed: unknown result');
  }

  describeRecords (records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecords(records, creds, transaction, environment);
    });
  }

  send_describeRecords (records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecords_args(params);
    try {
      output.writeMessageBegin('describeRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecords failed: unknown result');
  }

  describeRecordsTime (records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecordsTime(records, timestamp, creds, transaction, environment);
    });
  }

  send_describeRecordsTime (records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecordsTime_args(params);
    try {
      output.writeMessageBegin('describeRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordsTime failed: unknown result');
  }

  describeRecordsTimestr (records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecordsTimestr(records, timestamp, creds, transaction, environment);
    });
  }

  send_describeRecordsTimestr (records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('describeRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordsTimestr failed: unknown result');
  }

  diffRecordStart (record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffRecordStart(record, start, creds, transaction, environment);
    });
  }

  send_diffRecordStart (record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffRecordStart_args(params);
    try {
      output.writeMessageBegin('diffRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStart failed: unknown result');
  }

  diffRecordStartstr (record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffRecordStartstr(record, start, creds, transaction, environment);
    });
  }

  send_diffRecordStartstr (record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffRecordStartstr_args(params);
    try {
      output.writeMessageBegin('diffRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartstr failed: unknown result');
  }

  diffRecordStartEnd (record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffRecordStartEnd(record, start, tend, creds, transaction, environment);
    });
  }

  send_diffRecordStartEnd (record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('diffRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartEnd failed: unknown result');
  }

  diffRecordStartstrEndstr (record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffRecordStartstrEndstr(record, start, tend, creds, transaction, environment);
    });
  }

  send_diffRecordStartstrEndstr (record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('diffRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartstrEndstr failed: unknown result');
  }

  diffKeyRecordStart (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyRecordStart(key, record, start, creds, transaction, environment);
    });
  }

  send_diffKeyRecordStart (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyRecordStart_args(params);
    try {
      output.writeMessageBegin('diffKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStart failed: unknown result');
  }

  diffKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyRecordStartstr(key, record, start, creds, transaction, environment);
    });
  }

  send_diffKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyRecordStartstr_args(params);
    try {
      output.writeMessageBegin('diffKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartstr failed: unknown result');
  }

  diffKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_diffKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('diffKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartEnd failed: unknown result');
  }

  diffKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_diffKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('diffKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartstrEndstr failed: unknown result');
  }

  diffKeyStart (key, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyStart(key, start, creds, transaction, environment);
    });
  }

  send_diffKeyStart (key, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyStart_args(params);
    try {
      output.writeMessageBegin('diffKeyStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStart failed: unknown result');
  }

  diffKeyStartstr (key, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyStartstr(key, start, creds, transaction, environment);
    });
  }

  send_diffKeyStartstr (key, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyStartstr_args(params);
    try {
      output.writeMessageBegin('diffKeyStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartstr failed: unknown result');
  }

  diffKeyStartEnd (key, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyStartEnd(key, start, tend, creds, transaction, environment);
    });
  }

  send_diffKeyStartEnd (key, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyStartEnd_args(params);
    try {
      output.writeMessageBegin('diffKeyStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartEnd failed: unknown result');
  }

  diffKeyStartstrEndstr (key, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyStartstrEndstr(key, start, tend, creds, transaction, environment);
    });
  }

  send_diffKeyStartstrEndstr (key, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('diffKeyStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartstrEndstr failed: unknown result');
  }

  invokePlugin (id, method, params, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_invokePlugin(id, method, params, creds, transaction, environment);
    });
  }

  send_invokePlugin (id, method, params, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      id: id,
      method: method,
      params: params,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_invokePlugin_args(params);
    try {
      output.writeMessageBegin('invokePlugin', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_invokePlugin (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_invokePlugin_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('invokePlugin failed: unknown result');
  }

  login (username, password, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_login(username, password, environment);
    });
  }

  send_login (username, password, environment) {
    const output = new this.pClass(this.output);
    const params = {
      username: username,
      password: password,
      environment: environment
    };
    const args = new ConcourseService_login_args(params);
    try {
      output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_login (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_login_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('login failed: unknown result');
  }

  logout (token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_logout(token, environment);
    });
  }

  send_logout (token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      token: token,
      environment: environment
    };
    const args = new ConcourseService_logout_args(params);
    try {
      output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_logout (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_logout_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    callback(null);
  }

  stage (token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_stage(token, environment);
    });
  }

  send_stage (token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      token: token,
      environment: environment
    };
    const args = new ConcourseService_stage_args(params);
    try {
      output.writeMessageBegin('stage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_stage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_stage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('stage failed: unknown result');
  }

  insertJson (json, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_insertJson(json, creds, transaction, environment);
    });
  }

  send_insertJson (json, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      json: json,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_insertJson_args(params);
    try {
      output.writeMessageBegin('insertJson', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_insertJson (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_insertJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJson failed: unknown result');
  }

  insertJsonRecord (json, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_insertJsonRecord(json, record, creds, transaction, environment);
    });
  }

  send_insertJsonRecord (json, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      json: json,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_insertJsonRecord_args(params);
    try {
      output.writeMessageBegin('insertJsonRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_insertJsonRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_insertJsonRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJsonRecord failed: unknown result');
  }

  insertJsonRecords (json, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_insertJsonRecords(json, records, creds, transaction, environment);
    });
  }

  send_insertJsonRecords (json, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      json: json,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_insertJsonRecords_args(params);
    try {
      output.writeMessageBegin('insertJsonRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_insertJsonRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_insertJsonRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJsonRecords failed: unknown result');
  }

  removeKeyValueRecord (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_removeKeyValueRecord(key, value, record, creds, transaction, environment);
    });
  }

  send_removeKeyValueRecord (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_removeKeyValueRecord_args(params);
    try {
      output.writeMessageBegin('removeKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_removeKeyValueRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_removeKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('removeKeyValueRecord failed: unknown result');
  }

  removeKeyValueRecords (key, value, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_removeKeyValueRecords(key, value, records, creds, transaction, environment);
    });
  }

  send_removeKeyValueRecords (key, value, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_removeKeyValueRecords_args(params);
    try {
      output.writeMessageBegin('removeKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_removeKeyValueRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_removeKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('removeKeyValueRecords failed: unknown result');
  }

  setKeyValueRecord (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_setKeyValueRecord(key, value, record, creds, transaction, environment);
    });
  }

  send_setKeyValueRecord (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_setKeyValueRecord_args(params);
    try {
      output.writeMessageBegin('setKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_setKeyValueRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_setKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  setKeyValue (key, value, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_setKeyValue(key, value, creds, transaction, environment);
    });
  }

  send_setKeyValue (key, value, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_setKeyValue_args(params);
    try {
      output.writeMessageBegin('setKeyValue', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_setKeyValue (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_setKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('setKeyValue failed: unknown result');
  }

  setKeyValueRecords (key, value, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_setKeyValueRecords(key, value, records, creds, transaction, environment);
    });
  }

  send_setKeyValueRecords (key, value, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_setKeyValueRecords_args(params);
    try {
      output.writeMessageBegin('setKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_setKeyValueRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_setKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  reconcileKeyRecordValues (key, record, values, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_reconcileKeyRecordValues(key, record, values, creds, transaction, environment);
    });
  }

  send_reconcileKeyRecordValues (key, record, values, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      values: values,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_reconcileKeyRecordValues_args(params);
    try {
      output.writeMessageBegin('reconcileKeyRecordValues', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_reconcileKeyRecordValues (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_reconcileKeyRecordValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  inventory (creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_inventory(creds, transaction, environment);
    });
  }

  send_inventory (creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_inventory_args(params);
    try {
      output.writeMessageBegin('inventory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_inventory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_inventory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('inventory failed: unknown result');
  }

  selectRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecord(record, creds, transaction, environment);
    });
  }

  send_selectRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecord_args(params);
    try {
      output.writeMessageBegin('selectRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecord failed: unknown result');
  }

  selectRecords (records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecords(records, creds, transaction, environment);
    });
  }

  send_selectRecords (records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecords_args(params);
    try {
      output.writeMessageBegin('selectRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecords failed: unknown result');
  }

  selectRecordTime (record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecordTime(record, timestamp, creds, transaction, environment);
    });
  }

  send_selectRecordTime (record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecordTime_args(params);
    try {
      output.writeMessageBegin('selectRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordTime failed: unknown result');
  }

  selectRecordTimestr (record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecordTimestr(record, timestamp, creds, transaction, environment);
    });
  }

  send_selectRecordTimestr (record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecordTimestr_args(params);
    try {
      output.writeMessageBegin('selectRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordTimestr failed: unknown result');
  }

  selectRecordsTime (records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecordsTime(records, timestamp, creds, transaction, environment);
    });
  }

  send_selectRecordsTime (records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecordsTime_args(params);
    try {
      output.writeMessageBegin('selectRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordsTime failed: unknown result');
  }

  selectRecordsTimestr (records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecordsTimestr(records, timestamp, creds, transaction, environment);
    });
  }

  send_selectRecordsTimestr (records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('selectRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordsTimestr failed: unknown result');
  }

  selectKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_selectKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecord_args(params);
    try {
      output.writeMessageBegin('selectKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecord failed: unknown result');
  }

  selectKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('selectKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordTime failed: unknown result');
  }

  selectKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordTimestr failed: unknown result');
  }

  selectKeysRecord (keys, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecord(keys, record, creds, transaction, environment);
    });
  }

  send_selectKeysRecord (keys, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecord_args(params);
    try {
      output.writeMessageBegin('selectKeysRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecord failed: unknown result');
  }

  selectKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecordTime_args(params);
    try {
      output.writeMessageBegin('selectKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordTime failed: unknown result');
  }

  selectKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecordTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordTimestr failed: unknown result');
  }

  selectKeysRecords (keys, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecords(keys, records, creds, transaction, environment);
    });
  }

  send_selectKeysRecords (keys, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecords_args(params);
    try {
      output.writeMessageBegin('selectKeysRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecords failed: unknown result');
  }

  selectKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_selectKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecords_args(params);
    try {
      output.writeMessageBegin('selectKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecords failed: unknown result');
  }

  selectKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('selectKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordsTime failed: unknown result');
  }

  selectKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordsTimestr failed: unknown result');
  }

  selectKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecordsTime_args(params);
    try {
      output.writeMessageBegin('selectKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordsTime failed: unknown result');
  }

  selectKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordsTimestr failed: unknown result');
  }

  selectCriteria (criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCriteria(criteria, creds, transaction, environment);
    });
  }

  send_selectCriteria (criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCriteria_args(params);
    try {
      output.writeMessageBegin('selectCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteria failed: unknown result');
  }

  selectCcl (ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCcl(ccl, creds, transaction, environment);
    });
  }

  send_selectCcl (ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCcl_args(params);
    try {
      output.writeMessageBegin('selectCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCcl failed: unknown result');
  }

  selectCriteriaTime (criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCriteriaTime(criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectCriteriaTime (criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCriteriaTime_args(params);
    try {
      output.writeMessageBegin('selectCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteriaTime failed: unknown result');
  }

  selectCriteriaTimestr (criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCriteriaTimestr(criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectCriteriaTimestr (criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('selectCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteriaTimestr failed: unknown result');
  }

  selectCclTime (ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCclTime(ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectCclTime (ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCclTime_args(params);
    try {
      output.writeMessageBegin('selectCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCclTime failed: unknown result');
  }

  selectCclTimestr (ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCclTimestr(ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectCclTimestr (ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCclTimestr_args(params);
    try {
      output.writeMessageBegin('selectCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCclTimestr failed: unknown result');
  }

  selectKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_selectKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCriteria_args(params);
    try {
      output.writeMessageBegin('selectKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteria failed: unknown result');
  }

  selectKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_selectKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCcl_args(params);
    try {
      output.writeMessageBegin('selectKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCcl failed: unknown result');
  }

  selectKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('selectKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteriaTime failed: unknown result');
  }

  selectKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteriaTimestr failed: unknown result');
  }

  selectKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCclTime_args(params);
    try {
      output.writeMessageBegin('selectKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCclTime failed: unknown result');
  }

  selectKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCclTimestr failed: unknown result');
  }

  selectKeysCriteria (keys, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCriteria(keys, criteria, creds, transaction, environment);
    });
  }

  send_selectKeysCriteria (keys, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCriteria_args(params);
    try {
      output.writeMessageBegin('selectKeysCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteria failed: unknown result');
  }

  selectKeysCcl (keys, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCcl(keys, ccl, creds, transaction, environment);
    });
  }

  send_selectKeysCcl (keys, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCcl_args(params);
    try {
      output.writeMessageBegin('selectKeysCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCcl failed: unknown result');
  }

  selectKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCriteriaTime_args(params);
    try {
      output.writeMessageBegin('selectKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteriaTime failed: unknown result');
  }

  selectKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteriaTimestr failed: unknown result');
  }

  selectKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCclTime_args(params);
    try {
      output.writeMessageBegin('selectKeysCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCclTime failed: unknown result');
  }

  selectKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCclTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCclTimestr failed: unknown result');
  }

  getKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_getKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecord_args(params);
    try {
      output.writeMessageBegin('getKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecord failed: unknown result');
  }

  getKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('getKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordTime failed: unknown result');
  }

  getKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('getKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordTimestr failed: unknown result');
  }

  getKeysRecord (keys, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecord(keys, record, creds, transaction, environment);
    });
  }

  send_getKeysRecord (keys, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecord_args(params);
    try {
      output.writeMessageBegin('getKeysRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecord failed: unknown result');
  }

  getKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecordTime_args(params);
    try {
      output.writeMessageBegin('getKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordTime failed: unknown result');
  }

  getKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecordTimestr_args(params);
    try {
      output.writeMessageBegin('getKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordTimestr failed: unknown result');
  }

  getKeysRecords (keys, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecords(keys, records, creds, transaction, environment);
    });
  }

  send_getKeysRecords (keys, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecords_args(params);
    try {
      output.writeMessageBegin('getKeysRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecords failed: unknown result');
  }

  getKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_getKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecords_args(params);
    try {
      output.writeMessageBegin('getKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecords failed: unknown result');
  }

  getKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('getKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordsTime failed: unknown result');
  }

  getKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('getKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordsTimestr failed: unknown result');
  }

  getKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecordsTime_args(params);
    try {
      output.writeMessageBegin('getKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordsTime failed: unknown result');
  }

  getKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('getKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordsTimestr failed: unknown result');
  }

  getKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_getKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCriteria_args(params);
    try {
      output.writeMessageBegin('getKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteria failed: unknown result');
  }

  getCriteria (criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCriteria(criteria, creds, transaction, environment);
    });
  }

  send_getCriteria (criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCriteria_args(params);
    try {
      output.writeMessageBegin('getCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteria failed: unknown result');
  }

  getCcl (ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCcl(ccl, creds, transaction, environment);
    });
  }

  send_getCcl (ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCcl_args(params);
    try {
      output.writeMessageBegin('getCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCcl failed: unknown result');
  }

  getCriteriaTime (criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCriteriaTime(criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getCriteriaTime (criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCriteriaTime_args(params);
    try {
      output.writeMessageBegin('getCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteriaTime failed: unknown result');
  }

  getCriteriaTimestr (criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCriteriaTimestr(criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getCriteriaTimestr (criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('getCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteriaTimestr failed: unknown result');
  }

  getCclTime (ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCclTime(ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getCclTime (ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCclTime_args(params);
    try {
      output.writeMessageBegin('getCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCclTime failed: unknown result');
  }

  getCclTimestr (ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCclTimestr(ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getCclTimestr (ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCclTimestr_args(params);
    try {
      output.writeMessageBegin('getCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCclTimestr failed: unknown result');
  }

  getKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_getKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCcl_args(params);
    try {
      output.writeMessageBegin('getKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCcl failed: unknown result');
  }

  getKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('getKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteriaTime failed: unknown result');
  }

  getKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('getKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteriaTimestr failed: unknown result');
  }

  getKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCclTime_args(params);
    try {
      output.writeMessageBegin('getKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCclTime failed: unknown result');
  }

  getKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('getKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCclTimestr failed: unknown result');
  }

  getKeysCriteria (keys, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCriteria(keys, criteria, creds, transaction, environment);
    });
  }

  send_getKeysCriteria (keys, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCriteria_args(params);
    try {
      output.writeMessageBegin('getKeysCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteria failed: unknown result');
  }

  getKeysCcl (keys, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCcl(keys, ccl, creds, transaction, environment);
    });
  }

  send_getKeysCcl (keys, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCcl_args(params);
    try {
      output.writeMessageBegin('getKeysCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCcl failed: unknown result');
  }

  getKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCriteriaTime_args(params);
    try {
      output.writeMessageBegin('getKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteriaTime failed: unknown result');
  }

  getKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('getKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteriaTimestr failed: unknown result');
  }

  getKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCclTime_args(params);
    try {
      output.writeMessageBegin('getKeysCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCclTime failed: unknown result');
  }

  getKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCclTimestr_args(params);
    try {
      output.writeMessageBegin('getKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCclTimestr failed: unknown result');
  }

  verifyKeyValueRecord (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyKeyValueRecord(key, value, record, creds, transaction, environment);
    });
  }

  send_verifyKeyValueRecord (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyKeyValueRecord_args(params);
    try {
      output.writeMessageBegin('verifyKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyKeyValueRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecord failed: unknown result');
  }

  verifyKeyValueRecordTime (key, value, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyKeyValueRecordTime(key, value, record, timestamp, creds, transaction, environment);
    });
  }

  send_verifyKeyValueRecordTime (key, value, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyKeyValueRecordTime_args(params);
    try {
      output.writeMessageBegin('verifyKeyValueRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyKeyValueRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyKeyValueRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecordTime failed: unknown result');
  }

  verifyKeyValueRecordTimestr (key, value, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyKeyValueRecordTimestr(key, value, record, timestamp, creds, transaction, environment);
    });
  }

  send_verifyKeyValueRecordTimestr (key, value, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyKeyValueRecordTimestr_args(params);
    try {
      output.writeMessageBegin('verifyKeyValueRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyKeyValueRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyKeyValueRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecordTimestr failed: unknown result');
  }

  jsonifyRecords (records, identifier, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_jsonifyRecords(records, identifier, creds, transaction, environment);
    });
  }

  send_jsonifyRecords (records, identifier, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      identifier: identifier,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_jsonifyRecords_args(params);
    try {
      output.writeMessageBegin('jsonifyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_jsonifyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_jsonifyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecords failed: unknown result');
  }

  jsonifyRecordsTime (records, timestamp, identifier, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_jsonifyRecordsTime(records, timestamp, identifier, creds, transaction, environment);
    });
  }

  send_jsonifyRecordsTime (records, timestamp, identifier, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      identifier: identifier,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_jsonifyRecordsTime_args(params);
    try {
      output.writeMessageBegin('jsonifyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_jsonifyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_jsonifyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecordsTime failed: unknown result');
  }

  jsonifyRecordsTimestr (records, timestamp, identifier, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_jsonifyRecordsTimestr(records, timestamp, identifier, creds, transaction, environment);
    });
  }

  send_jsonifyRecordsTimestr (records, timestamp, identifier, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      identifier: identifier,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_jsonifyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('jsonifyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_jsonifyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_jsonifyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecordsTimestr failed: unknown result');
  }

  findCriteria (criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findCriteria(criteria, creds, transaction, environment);
    });
  }

  send_findCriteria (criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findCriteria_args(params);
    try {
      output.writeMessageBegin('findCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findCriteria failed: unknown result');
  }

  findCcl (ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findCcl(ccl, creds, transaction, environment);
    });
  }

  send_findCcl (ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findCcl_args(params);
    try {
      output.writeMessageBegin('findCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findCcl failed: unknown result');
  }

  findKeyOperatorValues (key, operator, values, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorValues(key, operator, values, creds, transaction, environment);
    });
  }

  send_findKeyOperatorValues (key, operator, values, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorValues_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorValues', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorValues (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValues failed: unknown result');
  }

  findKeyOperatorValuesTime (key, operator, values, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment);
    });
  }

  send_findKeyOperatorValuesTime (key, operator, values, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorValuesTime_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorValuesTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorValuesTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorValuesTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValuesTime failed: unknown result');
  }

  findKeyOperatorValuesTimestr (key, operator, values, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorValuesTimestr(key, operator, values, timestamp, creds, transaction, environment);
    });
  }

  send_findKeyOperatorValuesTimestr (key, operator, values, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorValuesTimestr_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorValuesTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorValuesTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorValuesTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValuesTimestr failed: unknown result');
  }

  findKeyOperatorstrValues (key, operator, values, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorstrValues(key, operator, values, creds, transaction, environment);
    });
  }

  send_findKeyOperatorstrValues (key, operator, values, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorstrValues_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorstrValues', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorstrValues (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorstrValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValues failed: unknown result');
  }

  findKeyOperatorstrValuesTime (key, operator, values, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorstrValuesTime(key, operator, values, timestamp, creds, transaction, environment);
    });
  }

  send_findKeyOperatorstrValuesTime (key, operator, values, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorstrValuesTime_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorstrValuesTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorstrValuesTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorstrValuesTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValuesTime failed: unknown result');
  }

  findKeyOperatorstrValuesTimestr (key, operator, values, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorstrValuesTimestr(key, operator, values, timestamp, creds, transaction, environment);
    });
  }

  send_findKeyOperatorstrValuesTimestr (key, operator, values, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorstrValuesTimestr_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorstrValuesTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorstrValuesTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorstrValuesTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValuesTimestr failed: unknown result');
  }

  search (key, query, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_search(key, query, creds, transaction, environment);
    });
  }

  send_search (key, query, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      query: query,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_search_args(params);
    try {
      output.writeMessageBegin('search', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_search (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_search_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('search failed: unknown result');
  }

  revertKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeysRecordsTime_args(params);
    try {
      output.writeMessageBegin('revertKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeysRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  revertKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeysRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('revertKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeysRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  revertKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeysRecordTime_args(params);
    try {
      output.writeMessageBegin('revertKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeysRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  revertKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeysRecordTimestr_args(params);
    try {
      output.writeMessageBegin('revertKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeysRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  revertKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('revertKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  revertKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('revertKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  revertKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('revertKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  revertKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('revertKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  pingRecords (records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_pingRecords(records, creds, transaction, environment);
    });
  }

  send_pingRecords (records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_pingRecords_args(params);
    try {
      output.writeMessageBegin('pingRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_pingRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_pingRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('pingRecords failed: unknown result');
  }

  pingRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_pingRecord(record, creds, transaction, environment);
    });
  }

  send_pingRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_pingRecord_args(params);
    try {
      output.writeMessageBegin('pingRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_pingRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_pingRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('pingRecord failed: unknown result');
  }

  verifyAndSwap (key, expected, record, replacement, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyAndSwap(key, expected, record, replacement, creds, transaction, environment);
    });
  }

  send_verifyAndSwap (key, expected, record, replacement, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      expected: expected,
      record: record,
      replacement: replacement,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyAndSwap_args(params);
    try {
      output.writeMessageBegin('verifyAndSwap', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyAndSwap (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyAndSwap_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyAndSwap failed: unknown result');
  }

  verifyOrSet (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyOrSet(key, value, record, creds, transaction, environment);
    });
  }

  send_verifyOrSet (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyOrSet_args(params);
    try {
      output.writeMessageBegin('verifyOrSet', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyOrSet (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyOrSet_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  findOrAddKeyValue (key, value, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findOrAddKeyValue(key, value, creds, transaction, environment);
    });
  }

  send_findOrAddKeyValue (key, value, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findOrAddKeyValue_args(params);
    try {
      output.writeMessageBegin('findOrAddKeyValue', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findOrAddKeyValue (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findOrAddKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrAddKeyValue failed: unknown result');
  }

  findOrInsertCriteriaJson (criteria, json, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findOrInsertCriteriaJson(criteria, json, creds, transaction, environment);
    });
  }

  send_findOrInsertCriteriaJson (criteria, json, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      json: json,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findOrInsertCriteriaJson_args(params);
    try {
      output.writeMessageBegin('findOrInsertCriteriaJson', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findOrInsertCriteriaJson (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findOrInsertCriteriaJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrInsertCriteriaJson failed: unknown result');
  }

  findOrInsertCclJson (ccl, json, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findOrInsertCclJson(ccl, json, creds, transaction, environment);
    });
  }

  send_findOrInsertCclJson (ccl, json, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      json: json,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findOrInsertCclJson_args(params);
    try {
      output.writeMessageBegin('findOrInsertCclJson', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findOrInsertCclJson (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findOrInsertCclJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrInsertCclJson failed: unknown result');
  }

  sumKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_sumKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecord_args(params);
    try {
      output.writeMessageBegin('sumKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecord failed: unknown result');
  }

  sumKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('sumKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordTime failed: unknown result');
  }

  sumKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordTimestr failed: unknown result');
  }

  sumKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_sumKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecords_args(params);
    try {
      output.writeMessageBegin('sumKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecords failed: unknown result');
  }

  sumKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('sumKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordsTime failed: unknown result');
  }

  sumKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordsTimestr failed: unknown result');
  }

  sumKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKey(key, creds, transaction, environment);
    });
  }

  send_sumKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKey_args(params);
    try {
      output.writeMessageBegin('sumKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKey failed: unknown result');
  }

  sumKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyTime_args(params);
    try {
      output.writeMessageBegin('sumKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyTime failed: unknown result');
  }

  sumKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyTimestr failed: unknown result');
  }

  sumKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_sumKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCriteria_args(params);
    try {
      output.writeMessageBegin('sumKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteria failed: unknown result');
  }

  sumKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('sumKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteriaTime failed: unknown result');
  }

  sumKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteriaTimestr failed: unknown result');
  }

  sumKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_sumKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCcl_args(params);
    try {
      output.writeMessageBegin('sumKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCcl failed: unknown result');
  }

  sumKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCclTime_args(params);
    try {
      output.writeMessageBegin('sumKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCclTime failed: unknown result');
  }

  sumKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCclTimestr failed: unknown result');
  }

  averageKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_averageKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecord_args(params);
    try {
      output.writeMessageBegin('averageKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecord failed: unknown result');
  }

  averageKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('averageKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordTime failed: unknown result');
  }

  averageKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordTimestr failed: unknown result');
  }

  averageKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_averageKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecords_args(params);
    try {
      output.writeMessageBegin('averageKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecords failed: unknown result');
  }

  averageKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('averageKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordsTime failed: unknown result');
  }

  averageKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordsTimestr failed: unknown result');
  }

  averageKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKey(key, creds, transaction, environment);
    });
  }

  send_averageKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKey_args(params);
    try {
      output.writeMessageBegin('averageKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKey failed: unknown result');
  }

  averageKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyTime_args(params);
    try {
      output.writeMessageBegin('averageKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyTime failed: unknown result');
  }

  averageKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyTimestr failed: unknown result');
  }

  averageKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_averageKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCriteria_args(params);
    try {
      output.writeMessageBegin('averageKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteria failed: unknown result');
  }

  averageKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('averageKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteriaTime failed: unknown result');
  }

  averageKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteriaTimestr failed: unknown result');
  }

  averageKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_averageKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCcl_args(params);
    try {
      output.writeMessageBegin('averageKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCcl failed: unknown result');
  }

  averageKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCclTime_args(params);
    try {
      output.writeMessageBegin('averageKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCclTime failed: unknown result');
  }

  averageKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCclTimestr failed: unknown result');
  }

  countKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_countKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecord_args(params);
    try {
      output.writeMessageBegin('countKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecord failed: unknown result');
  }

  countKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('countKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordTime failed: unknown result');
  }

  countKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordTimestr failed: unknown result');
  }

  countKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_countKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecords_args(params);
    try {
      output.writeMessageBegin('countKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecords failed: unknown result');
  }

  countKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('countKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordsTime failed: unknown result');
  }

  countKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordsTimestr failed: unknown result');
  }

  countKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKey(key, creds, transaction, environment);
    });
  }

  send_countKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKey_args(params);
    try {
      output.writeMessageBegin('countKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKey failed: unknown result');
  }

  countKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyTime_args(params);
    try {
      output.writeMessageBegin('countKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyTime failed: unknown result');
  }

  countKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyTimestr failed: unknown result');
  }

  countKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_countKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCriteria_args(params);
    try {
      output.writeMessageBegin('countKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteria failed: unknown result');
  }

  countKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('countKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteriaTime failed: unknown result');
  }

  countKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteriaTimestr failed: unknown result');
  }

  countKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_countKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCcl_args(params);
    try {
      output.writeMessageBegin('countKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCcl failed: unknown result');
  }

  countKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCclTime_args(params);
    try {
      output.writeMessageBegin('countKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCclTime failed: unknown result');
  }

  countKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCclTimestr failed: unknown result');
  }

  maxKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_maxKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecord_args(params);
    try {
      output.writeMessageBegin('maxKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecord failed: unknown result');
  }

  maxKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('maxKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordTime failed: unknown result');
  }

  maxKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordTimestr failed: unknown result');
  }

  maxKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_maxKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecords_args(params);
    try {
      output.writeMessageBegin('maxKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecords failed: unknown result');
  }

  maxKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('maxKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordsTime failed: unknown result');
  }

  maxKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordsTimestr failed: unknown result');
  }

  maxKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_maxKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCriteria_args(params);
    try {
      output.writeMessageBegin('maxKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteria failed: unknown result');
  }

  maxKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('maxKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteriaTime failed: unknown result');
  }

  maxKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteriaTimestr failed: unknown result');
  }

  maxKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_maxKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCcl_args(params);
    try {
      output.writeMessageBegin('maxKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCcl failed: unknown result');
  }

  maxKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCclTime_args(params);
    try {
      output.writeMessageBegin('maxKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCclTime failed: unknown result');
  }

  maxKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCclTimestr failed: unknown result');
  }

  maxKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKey(key, creds, transaction, environment);
    });
  }

  send_maxKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKey_args(params);
    try {
      output.writeMessageBegin('maxKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKey failed: unknown result');
  }

  maxKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyTime_args(params);
    try {
      output.writeMessageBegin('maxKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyTime failed: unknown result');
  }

  maxKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyTimestr failed: unknown result');
  }

  minKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_minKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecord_args(params);
    try {
      output.writeMessageBegin('minKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecord failed: unknown result');
  }

  minKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('minKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordTime failed: unknown result');
  }

  minKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordTimestr failed: unknown result');
  }

  minKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKey(key, creds, transaction, environment);
    });
  }

  send_minKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKey_args(params);
    try {
      output.writeMessageBegin('minKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKey failed: unknown result');
  }

  minKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('minKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordsTime failed: unknown result');
  }

  minKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordsTimestr failed: unknown result');
  }

  minKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_minKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCriteria_args(params);
    try {
      output.writeMessageBegin('minKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteria failed: unknown result');
  }

  minKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('minKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteriaTime failed: unknown result');
  }

  minKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteriaTimestr failed: unknown result');
  }

  minKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_minKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCcl_args(params);
    try {
      output.writeMessageBegin('minKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCcl failed: unknown result');
  }

  minKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCclTime_args(params);
    try {
      output.writeMessageBegin('minKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCclTime failed: unknown result');
  }

  minKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCclTimestr failed: unknown result');
  }

  minKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyTime_args(params);
    try {
      output.writeMessageBegin('minKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyTime failed: unknown result');
  }

  minKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyTimestr failed: unknown result');
  }

  minKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_minKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecords_args(params);
    try {
      output.writeMessageBegin('minKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecords failed: unknown result');
  }

  navigateKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_navigateKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecord_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecord failed: unknown result');
  }

  navigateKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordTime failed: unknown result');
  }

  navigateKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordTimestr failed: unknown result');
  }

  navigateKeysRecord (keys, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecord(keys, record, creds, transaction, environment);
    });
  }

  send_navigateKeysRecord (keys, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecord_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecord failed: unknown result');
  }

  navigateKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecordTime_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordTime failed: unknown result');
  }

  navigateKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecordTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordTimestr failed: unknown result');
  }

  navigateKeysRecords (keys, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecords(keys, records, creds, transaction, environment);
    });
  }

  send_navigateKeysRecords (keys, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecords_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecords failed: unknown result');
  }

  navigateKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_navigateKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecords_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecords failed: unknown result');
  }

  navigateKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordsTime failed: unknown result');
  }

  navigateKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordsTimestr failed: unknown result');
  }

  navigateKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecordsTime_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordsTime failed: unknown result');
  }

  navigateKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordsTimestr failed: unknown result');
  }

  navigateKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_navigateKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCcl_args(params);
    try {
      output.writeMessageBegin('navigateKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCcl failed: unknown result');
  }

  navigateKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCclTime_args(params);
    try {
      output.writeMessageBegin('navigateKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCclTime failed: unknown result');
  }

  navigateKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCclTimestr failed: unknown result');
  }

  navigateKeysCcl (keys, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCcl(keys, ccl, creds, transaction, environment);
    });
  }

  send_navigateKeysCcl (keys, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCcl_args(params);
    try {
      output.writeMessageBegin('navigateKeysCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCcl failed: unknown result');
  }

  navigateKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCclTime_args(params);
    try {
      output.writeMessageBegin('navigateKeysCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCclTime failed: unknown result');
  }

  navigateKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCclTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCclTimestr failed: unknown result');
  }

  navigateKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_navigateKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCriteria_args(params);
    try {
      output.writeMessageBegin('navigateKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteria failed: unknown result');
  }

  navigateKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('navigateKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteriaTime failed: unknown result');
  }

  navigateKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteriaTimestr failed: unknown result');
  }

  navigateKeysCriteria (keys, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCriteria(keys, criteria, creds, transaction, environment);
    });
  }

  send_navigateKeysCriteria (keys, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCriteria_args(params);
    try {
      output.writeMessageBegin('navigateKeysCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteria failed: unknown result');
  }

  navigateKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCriteriaTime_args(params);
    try {
      output.writeMessageBegin('navigateKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteriaTime failed: unknown result');
  }

  navigateKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteriaTimestr failed: unknown result');
  }

  getServerEnvironment (creds, token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getServerEnvironment(creds, token, environment);
    });
  }

  send_getServerEnvironment (creds, token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      token: token,
      environment: environment
    };
    const args = new ConcourseService_getServerEnvironment_args(params);
    try {
      output.writeMessageBegin('getServerEnvironment', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getServerEnvironment (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getServerEnvironment_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getServerEnvironment failed: unknown result');
  }

  getServerVersion () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getServerVersion();
    });
  }

  send_getServerVersion () {
    const output = new this.pClass(this.output);
    const args = new ConcourseService_getServerVersion_args();
    try {
      output.writeMessageBegin('getServerVersion', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getServerVersion (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getServerVersion_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getServerVersion failed: unknown result');
  }

  time (creds, token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_time(creds, token, environment);
    });
  }

  send_time (creds, token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      token: token,
      environment: environment
    };
    const args = new ConcourseService_time_args(params);
    try {
      output.writeMessageBegin('time', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_time (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_time_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('time failed: unknown result');
  }

  timePhrase (phrase, creds, token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_timePhrase(phrase, creds, token, environment);
    });
  }

  send_timePhrase (phrase, creds, token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      phrase: phrase,
      creds: creds,
      token: token,
      environment: environment
    };
    const args = new ConcourseService_timePhrase_args(params);
    try {
      output.writeMessageBegin('timePhrase', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_timePhrase (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_timePhrase_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('timePhrase failed: unknown result');
  }

  invokeManagement (method, params, creds) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_invokeManagement(method, params, creds);
    });
  }

  send_invokeManagement (method, params, creds) {
    const output = new this.pClass(this.output);
    const params = {
      method: method,
      params: params,
      creds: creds
    };
    const args = new ConcourseService_invokeManagement_args(params);
    try {
      output.writeMessageBegin('invokeManagement', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_invokeManagement (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_invokeManagement_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('invokeManagement failed: unknown result');
  }
};
const ConcourseServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_abort (seqid, input, output) {
    const args = new ConcourseService_abort_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.abort.length === 3) {
      Promise.resolve(this._handler.abort.bind(this._handler)(
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_abort_result({success: result});
        output.writeMessageBegin("abort", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException) {
          result = new ConcourseService_abort_result(err);
          output.writeMessageBegin("abort", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("abort", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.abort(args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException) {
          result_obj = new ConcourseService_abort_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("abort", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("abort", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addKeyValue (seqid, input, output) {
    const args = new ConcourseService_addKeyValue_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addKeyValue.length === 5) {
      Promise.resolve(this._handler.addKeyValue.bind(this._handler)(
        args.key,
        args.value,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_addKeyValue_result({success: result});
        output.writeMessageBegin("addKeyValue", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_addKeyValue_result(err);
          output.writeMessageBegin("addKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addKeyValue(args.key, args.value, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_addKeyValue_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addKeyValueRecord (seqid, input, output) {
    const args = new ConcourseService_addKeyValueRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addKeyValueRecord.length === 6) {
      Promise.resolve(this._handler.addKeyValueRecord.bind(this._handler)(
        args.key,
        args.value,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_addKeyValueRecord_result({success: result});
        output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_addKeyValueRecord_result(err);
          output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_addKeyValueRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addKeyValueRecords (seqid, input, output) {
    const args = new ConcourseService_addKeyValueRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addKeyValueRecords.length === 6) {
      Promise.resolve(this._handler.addKeyValueRecords.bind(this._handler)(
        args.key,
        args.value,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_addKeyValueRecords_result({success: result});
        output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_addKeyValueRecords_result(err);
          output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_addKeyValueRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditRecord (seqid, input, output) {
    const args = new ConcourseService_auditRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecord.length === 4) {
      Promise.resolve(this._handler.auditRecord.bind(this._handler)(
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditRecord_result({success: result});
        output.writeMessageBegin("auditRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditRecord_result(err);
          output.writeMessageBegin("auditRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditRecord(args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditRecordStart (seqid, input, output) {
    const args = new ConcourseService_auditRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecordStart.length === 5) {
      Promise.resolve(this._handler.auditRecordStart.bind(this._handler)(
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditRecordStart_result({success: result});
        output.writeMessageBegin("auditRecordStart", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditRecordStart_result(err);
          output.writeMessageBegin("auditRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditRecordStart(args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditRecordStart_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditRecordStartstr (seqid, input, output) {
    const args = new ConcourseService_auditRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecordStartstr.length === 5) {
      Promise.resolve(this._handler.auditRecordStartstr.bind(this._handler)(
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditRecordStartstr_result({success: result});
        output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditRecordStartstr_result(err);
          output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditRecordStartstr(args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditRecordStartstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditRecordStartEnd (seqid, input, output) {
    const args = new ConcourseService_auditRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecordStartEnd.length === 6) {
      Promise.resolve(this._handler.auditRecordStartEnd.bind(this._handler)(
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditRecordStartEnd_result({success: result});
        output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditRecordStartEnd_result(err);
          output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditRecordStartEnd(args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditRecordStartEnd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditRecordStartstrEndstr (seqid, input, output) {
    const args = new ConcourseService_auditRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecordStartstrEndstr.length === 6) {
      Promise.resolve(this._handler.auditRecordStartstrEndstr.bind(this._handler)(
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditRecordStartstrEndstr_result({success: result});
        output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditRecordStartstrEndstr_result(err);
          output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditRecordStartstrEndstr(args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditRecordStartstrEndstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditKeyRecord (seqid, input, output) {
    const args = new ConcourseService_auditKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecord.length === 5) {
      Promise.resolve(this._handler.auditKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditKeyRecord_result({success: result});
        output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditKeyRecord_result(err);
          output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditKeyRecordStart (seqid, input, output) {
    const args = new ConcourseService_auditKeyRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecordStart.length === 6) {
      Promise.resolve(this._handler.auditKeyRecordStart.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditKeyRecordStart_result({success: result});
        output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditKeyRecordStart_result(err);
          output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditKeyRecordStart_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditKeyRecordStartstr (seqid, input, output) {
    const args = new ConcourseService_auditKeyRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecordStartstr.length === 6) {
      Promise.resolve(this._handler.auditKeyRecordStartstr.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditKeyRecordStartstr_result({success: result});
        output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditKeyRecordStartstr_result(err);
          output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditKeyRecordStartstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditKeyRecordStartEnd (seqid, input, output) {
    const args = new ConcourseService_auditKeyRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecordStartEnd.length === 7) {
      Promise.resolve(this._handler.auditKeyRecordStartEnd.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditKeyRecordStartEnd_result({success: result});
        output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditKeyRecordStartEnd_result(err);
          output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditKeyRecordStartEnd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_auditKeyRecordStartstrEndstr (seqid, input, output) {
    const args = new ConcourseService_auditKeyRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecordStartstrEndstr.length === 7) {
      Promise.resolve(this._handler.auditKeyRecordStartstrEndstr.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_auditKeyRecordStartstrEndstr_result({success: result});
        output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_auditKeyRecordStartstrEndstr_result(err);
          output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.auditKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_auditKeyRecordStartstrEndstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_browseKey (seqid, input, output) {
    const args = new ConcourseService_browseKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKey.length === 4) {
      Promise.resolve(this._handler.browseKey.bind(this._handler)(
        args.key,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_browseKey_result({success: result});
        output.writeMessageBegin("browseKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_browseKey_result(err);
          output.writeMessageBegin("browseKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.browseKey(args.key, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_browseKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("browseKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_browseKeys (seqid, input, output) {
    const args = new ConcourseService_browseKeys_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeys.length === 4) {
      Promise.resolve(this._handler.browseKeys.bind(this._handler)(
        args.keys,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_browseKeys_result({success: result});
        output.writeMessageBegin("browseKeys", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_browseKeys_result(err);
          output.writeMessageBegin("browseKeys", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeys", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.browseKeys(args.keys, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_browseKeys_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("browseKeys", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeys", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_browseKeyTime (seqid, input, output) {
    const args = new ConcourseService_browseKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeyTime.length === 5) {
      Promise.resolve(this._handler.browseKeyTime.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_browseKeyTime_result({success: result});
        output.writeMessageBegin("browseKeyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_browseKeyTime_result(err);
          output.writeMessageBegin("browseKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.browseKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_browseKeyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("browseKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_browseKeyTimestr (seqid, input, output) {
    const args = new ConcourseService_browseKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeyTimestr.length === 5) {
      Promise.resolve(this._handler.browseKeyTimestr.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_browseKeyTimestr_result({success: result});
        output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_browseKeyTimestr_result(err);
          output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.browseKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_browseKeyTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_browseKeysTime (seqid, input, output) {
    const args = new ConcourseService_browseKeysTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeysTime.length === 5) {
      Promise.resolve(this._handler.browseKeysTime.bind(this._handler)(
        args.keys,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_browseKeysTime_result({success: result});
        output.writeMessageBegin("browseKeysTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_browseKeysTime_result(err);
          output.writeMessageBegin("browseKeysTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeysTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.browseKeysTime(args.keys, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_browseKeysTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("browseKeysTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeysTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_browseKeysTimestr (seqid, input, output) {
    const args = new ConcourseService_browseKeysTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeysTimestr.length === 5) {
      Promise.resolve(this._handler.browseKeysTimestr.bind(this._handler)(
        args.keys,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_browseKeysTimestr_result({success: result});
        output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_browseKeysTimestr_result(err);
          output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.browseKeysTimestr(args.keys, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_browseKeysTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_chronologizeKeyRecord (seqid, input, output) {
    const args = new ConcourseService_chronologizeKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecord.length === 5) {
      Promise.resolve(this._handler.chronologizeKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_chronologizeKeyRecord_result({success: result});
        output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_chronologizeKeyRecord_result(err);
          output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.chronologizeKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_chronologizeKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_chronologizeKeyRecordStart (seqid, input, output) {
    const args = new ConcourseService_chronologizeKeyRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecordStart.length === 6) {
      Promise.resolve(this._handler.chronologizeKeyRecordStart.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_chronologizeKeyRecordStart_result({success: result});
        output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_chronologizeKeyRecordStart_result(err);
          output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.chronologizeKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_chronologizeKeyRecordStart_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_chronologizeKeyRecordStartstr (seqid, input, output) {
    const args = new ConcourseService_chronologizeKeyRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecordStartstr.length === 6) {
      Promise.resolve(this._handler.chronologizeKeyRecordStartstr.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_chronologizeKeyRecordStartstr_result({success: result});
        output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_chronologizeKeyRecordStartstr_result(err);
          output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.chronologizeKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_chronologizeKeyRecordStartstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_chronologizeKeyRecordStartEnd (seqid, input, output) {
    const args = new ConcourseService_chronologizeKeyRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecordStartEnd.length === 7) {
      Promise.resolve(this._handler.chronologizeKeyRecordStartEnd.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_chronologizeKeyRecordStartEnd_result({success: result});
        output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_chronologizeKeyRecordStartEnd_result(err);
          output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.chronologizeKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_chronologizeKeyRecordStartEnd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_chronologizeKeyRecordStartstrEndstr (seqid, input, output) {
    const args = new ConcourseService_chronologizeKeyRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecordStartstrEndstr.length === 7) {
      Promise.resolve(this._handler.chronologizeKeyRecordStartstrEndstr.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result({success: result});
        output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result(err);
          output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.chronologizeKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clearRecord (seqid, input, output) {
    const args = new ConcourseService_clearRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearRecord.length === 4) {
      Promise.resolve(this._handler.clearRecord.bind(this._handler)(
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_clearRecord_result({success: result});
        output.writeMessageBegin("clearRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_clearRecord_result(err);
          output.writeMessageBegin("clearRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clearRecord(args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_clearRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clearRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clearRecords (seqid, input, output) {
    const args = new ConcourseService_clearRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearRecords.length === 4) {
      Promise.resolve(this._handler.clearRecords.bind(this._handler)(
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_clearRecords_result({success: result});
        output.writeMessageBegin("clearRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_clearRecords_result(err);
          output.writeMessageBegin("clearRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clearRecords(args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_clearRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clearRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clearKeyRecord (seqid, input, output) {
    const args = new ConcourseService_clearKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearKeyRecord.length === 5) {
      Promise.resolve(this._handler.clearKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_clearKeyRecord_result({success: result});
        output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_clearKeyRecord_result(err);
          output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clearKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_clearKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clearKeysRecord (seqid, input, output) {
    const args = new ConcourseService_clearKeysRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearKeysRecord.length === 5) {
      Promise.resolve(this._handler.clearKeysRecord.bind(this._handler)(
        args.keys,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_clearKeysRecord_result({success: result});
        output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_clearKeysRecord_result(err);
          output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clearKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_clearKeysRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clearKeyRecords (seqid, input, output) {
    const args = new ConcourseService_clearKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearKeyRecords.length === 5) {
      Promise.resolve(this._handler.clearKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_clearKeyRecords_result({success: result});
        output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_clearKeyRecords_result(err);
          output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clearKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_clearKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_clearKeysRecords (seqid, input, output) {
    const args = new ConcourseService_clearKeysRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearKeysRecords.length === 5) {
      Promise.resolve(this._handler.clearKeysRecords.bind(this._handler)(
        args.keys,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_clearKeysRecords_result({success: result});
        output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_clearKeysRecords_result(err);
          output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.clearKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_clearKeysRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commit (seqid, input, output) {
    const args = new ConcourseService_commit_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commit.length === 3) {
      Promise.resolve(this._handler.commit.bind(this._handler)(
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_commit_result({success: result});
        output.writeMessageBegin("commit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_commit_result(err);
          output.writeMessageBegin("commit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commit(args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_commit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commit", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describe (seqid, input, output) {
    const args = new ConcourseService_describe_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describe.length === 3) {
      Promise.resolve(this._handler.describe.bind(this._handler)(
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describe_result({success: result});
        output.writeMessageBegin("describe", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describe_result(err);
          output.writeMessageBegin("describe", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describe", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describe(args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describe_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describe", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describe", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describeTime (seqid, input, output) {
    const args = new ConcourseService_describeTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeTime.length === 4) {
      Promise.resolve(this._handler.describeTime.bind(this._handler)(
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describeTime_result({success: result});
        output.writeMessageBegin("describeTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describeTime_result(err);
          output.writeMessageBegin("describeTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describeTime(args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describeTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describeTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describeTimestr (seqid, input, output) {
    const args = new ConcourseService_describeTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeTimestr.length === 4) {
      Promise.resolve(this._handler.describeTimestr.bind(this._handler)(
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describeTimestr_result({success: result});
        output.writeMessageBegin("describeTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describeTimestr_result(err);
          output.writeMessageBegin("describeTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describeTimestr(args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describeTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describeTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describeRecord (seqid, input, output) {
    const args = new ConcourseService_describeRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecord.length === 4) {
      Promise.resolve(this._handler.describeRecord.bind(this._handler)(
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describeRecord_result({success: result});
        output.writeMessageBegin("describeRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describeRecord_result(err);
          output.writeMessageBegin("describeRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describeRecord(args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describeRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describeRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describeRecordTime (seqid, input, output) {
    const args = new ConcourseService_describeRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecordTime.length === 5) {
      Promise.resolve(this._handler.describeRecordTime.bind(this._handler)(
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describeRecordTime_result({success: result});
        output.writeMessageBegin("describeRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describeRecordTime_result(err);
          output.writeMessageBegin("describeRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describeRecordTime(args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describeRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describeRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describeRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_describeRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecordTimestr.length === 5) {
      Promise.resolve(this._handler.describeRecordTimestr.bind(this._handler)(
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describeRecordTimestr_result({success: result});
        output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describeRecordTimestr_result(err);
          output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describeRecordTimestr(args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describeRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describeRecords (seqid, input, output) {
    const args = new ConcourseService_describeRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecords.length === 4) {
      Promise.resolve(this._handler.describeRecords.bind(this._handler)(
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describeRecords_result({success: result});
        output.writeMessageBegin("describeRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describeRecords_result(err);
          output.writeMessageBegin("describeRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describeRecords(args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describeRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describeRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describeRecordsTime (seqid, input, output) {
    const args = new ConcourseService_describeRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecordsTime.length === 5) {
      Promise.resolve(this._handler.describeRecordsTime.bind(this._handler)(
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describeRecordsTime_result({success: result});
        output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describeRecordsTime_result(err);
          output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describeRecordsTime(args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describeRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_describeRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_describeRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecordsTimestr.length === 5) {
      Promise.resolve(this._handler.describeRecordsTimestr.bind(this._handler)(
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_describeRecordsTimestr_result({success: result});
        output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_describeRecordsTimestr_result(err);
          output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.describeRecordsTimestr(args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_describeRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffRecordStart (seqid, input, output) {
    const args = new ConcourseService_diffRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffRecordStart.length === 5) {
      Promise.resolve(this._handler.diffRecordStart.bind(this._handler)(
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffRecordStart_result({success: result});
        output.writeMessageBegin("diffRecordStart", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffRecordStart_result(err);
          output.writeMessageBegin("diffRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffRecordStart(args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffRecordStart_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffRecordStartstr (seqid, input, output) {
    const args = new ConcourseService_diffRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffRecordStartstr.length === 5) {
      Promise.resolve(this._handler.diffRecordStartstr.bind(this._handler)(
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffRecordStartstr_result({success: result});
        output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffRecordStartstr_result(err);
          output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffRecordStartstr(args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffRecordStartstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffRecordStartEnd (seqid, input, output) {
    const args = new ConcourseService_diffRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffRecordStartEnd.length === 6) {
      Promise.resolve(this._handler.diffRecordStartEnd.bind(this._handler)(
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffRecordStartEnd_result({success: result});
        output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffRecordStartEnd_result(err);
          output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffRecordStartEnd(args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffRecordStartEnd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffRecordStartstrEndstr (seqid, input, output) {
    const args = new ConcourseService_diffRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffRecordStartstrEndstr.length === 6) {
      Promise.resolve(this._handler.diffRecordStartstrEndstr.bind(this._handler)(
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffRecordStartstrEndstr_result({success: result});
        output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffRecordStartstrEndstr_result(err);
          output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffRecordStartstrEndstr(args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffRecordStartstrEndstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffKeyRecordStart (seqid, input, output) {
    const args = new ConcourseService_diffKeyRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyRecordStart.length === 6) {
      Promise.resolve(this._handler.diffKeyRecordStart.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffKeyRecordStart_result({success: result});
        output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffKeyRecordStart_result(err);
          output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffKeyRecordStart_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffKeyRecordStartstr (seqid, input, output) {
    const args = new ConcourseService_diffKeyRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyRecordStartstr.length === 6) {
      Promise.resolve(this._handler.diffKeyRecordStartstr.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffKeyRecordStartstr_result({success: result});
        output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffKeyRecordStartstr_result(err);
          output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffKeyRecordStartstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffKeyRecordStartEnd (seqid, input, output) {
    const args = new ConcourseService_diffKeyRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyRecordStartEnd.length === 7) {
      Promise.resolve(this._handler.diffKeyRecordStartEnd.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffKeyRecordStartEnd_result({success: result});
        output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffKeyRecordStartEnd_result(err);
          output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffKeyRecordStartEnd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffKeyRecordStartstrEndstr (seqid, input, output) {
    const args = new ConcourseService_diffKeyRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyRecordStartstrEndstr.length === 7) {
      Promise.resolve(this._handler.diffKeyRecordStartstrEndstr.bind(this._handler)(
        args.key,
        args.record,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffKeyRecordStartstrEndstr_result({success: result});
        output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffKeyRecordStartstrEndstr_result(err);
          output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffKeyRecordStartstrEndstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffKeyStart (seqid, input, output) {
    const args = new ConcourseService_diffKeyStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyStart.length === 5) {
      Promise.resolve(this._handler.diffKeyStart.bind(this._handler)(
        args.key,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffKeyStart_result({success: result});
        output.writeMessageBegin("diffKeyStart", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffKeyStart_result(err);
          output.writeMessageBegin("diffKeyStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffKeyStart(args.key, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffKeyStart_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffKeyStart", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffKeyStartstr (seqid, input, output) {
    const args = new ConcourseService_diffKeyStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyStartstr.length === 5) {
      Promise.resolve(this._handler.diffKeyStartstr.bind(this._handler)(
        args.key,
        args.start,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffKeyStartstr_result({success: result});
        output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffKeyStartstr_result(err);
          output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffKeyStartstr(args.key, args.start, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffKeyStartstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffKeyStartEnd (seqid, input, output) {
    const args = new ConcourseService_diffKeyStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyStartEnd.length === 6) {
      Promise.resolve(this._handler.diffKeyStartEnd.bind(this._handler)(
        args.key,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffKeyStartEnd_result({success: result});
        output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffKeyStartEnd_result(err);
          output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffKeyStartEnd(args.key, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffKeyStartEnd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_diffKeyStartstrEndstr (seqid, input, output) {
    const args = new ConcourseService_diffKeyStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyStartstrEndstr.length === 6) {
      Promise.resolve(this._handler.diffKeyStartstrEndstr.bind(this._handler)(
        args.key,
        args.start,
        args.tend,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_diffKeyStartstrEndstr_result({success: result});
        output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_diffKeyStartstrEndstr_result(err);
          output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.diffKeyStartstrEndstr(args.key, args.start, args.tend, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_diffKeyStartstrEndstr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_invokePlugin (seqid, input, output) {
    const args = new ConcourseService_invokePlugin_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.invokePlugin.length === 6) {
      Promise.resolve(this._handler.invokePlugin.bind(this._handler)(
        args.id,
        args.method,
        args.params,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_invokePlugin_result({success: result});
        output.writeMessageBegin("invokePlugin", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_invokePlugin_result(err);
          output.writeMessageBegin("invokePlugin", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invokePlugin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.invokePlugin(args.id, args.method, args.params, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_invokePlugin_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("invokePlugin", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invokePlugin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_login (seqid, input, output) {
    const args = new ConcourseService_login_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.login.length === 3) {
      Promise.resolve(this._handler.login.bind(this._handler)(
        args.username,
        args.password,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_login_result({success: result});
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_login_result(err);
          output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("login", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.login(args.username, args.password, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_login_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("login", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_logout (seqid, input, output) {
    const args = new ConcourseService_logout_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.logout.length === 2) {
      Promise.resolve(this._handler.logout.bind(this._handler)(
        args.token,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_logout_result({success: result});
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_logout_result(err);
          output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("logout", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.logout(args.token, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_logout_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("logout", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_stage (seqid, input, output) {
    const args = new ConcourseService_stage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.stage.length === 2) {
      Promise.resolve(this._handler.stage.bind(this._handler)(
        args.token,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_stage_result({success: result});
        output.writeMessageBegin("stage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_stage_result(err);
          output.writeMessageBegin("stage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.stage(args.token, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_stage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("stage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_insertJson (seqid, input, output) {
    const args = new ConcourseService_insertJson_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.insertJson.length === 4) {
      Promise.resolve(this._handler.insertJson.bind(this._handler)(
        args.json,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_insertJson_result({success: result});
        output.writeMessageBegin("insertJson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_insertJson_result(err);
          output.writeMessageBegin("insertJson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.insertJson(args.json, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_insertJson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("insertJson", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_insertJsonRecord (seqid, input, output) {
    const args = new ConcourseService_insertJsonRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.insertJsonRecord.length === 5) {
      Promise.resolve(this._handler.insertJsonRecord.bind(this._handler)(
        args.json,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_insertJsonRecord_result({success: result});
        output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_insertJsonRecord_result(err);
          output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.insertJsonRecord(args.json, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_insertJsonRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_insertJsonRecords (seqid, input, output) {
    const args = new ConcourseService_insertJsonRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.insertJsonRecords.length === 5) {
      Promise.resolve(this._handler.insertJsonRecords.bind(this._handler)(
        args.json,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_insertJsonRecords_result({success: result});
        output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_insertJsonRecords_result(err);
          output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.insertJsonRecords(args.json, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_insertJsonRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_removeKeyValueRecord (seqid, input, output) {
    const args = new ConcourseService_removeKeyValueRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.removeKeyValueRecord.length === 6) {
      Promise.resolve(this._handler.removeKeyValueRecord.bind(this._handler)(
        args.key,
        args.value,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_removeKeyValueRecord_result({success: result});
        output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_removeKeyValueRecord_result(err);
          output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.removeKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_removeKeyValueRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_removeKeyValueRecords (seqid, input, output) {
    const args = new ConcourseService_removeKeyValueRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.removeKeyValueRecords.length === 6) {
      Promise.resolve(this._handler.removeKeyValueRecords.bind(this._handler)(
        args.key,
        args.value,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_removeKeyValueRecords_result({success: result});
        output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_removeKeyValueRecords_result(err);
          output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.removeKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_removeKeyValueRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_setKeyValueRecord (seqid, input, output) {
    const args = new ConcourseService_setKeyValueRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.setKeyValueRecord.length === 6) {
      Promise.resolve(this._handler.setKeyValueRecord.bind(this._handler)(
        args.key,
        args.value,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_setKeyValueRecord_result({success: result});
        output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_setKeyValueRecord_result(err);
          output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.setKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_setKeyValueRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_setKeyValue (seqid, input, output) {
    const args = new ConcourseService_setKeyValue_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.setKeyValue.length === 5) {
      Promise.resolve(this._handler.setKeyValue.bind(this._handler)(
        args.key,
        args.value,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_setKeyValue_result({success: result});
        output.writeMessageBegin("setKeyValue", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_setKeyValue_result(err);
          output.writeMessageBegin("setKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.setKeyValue(args.key, args.value, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_setKeyValue_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("setKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_setKeyValueRecords (seqid, input, output) {
    const args = new ConcourseService_setKeyValueRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.setKeyValueRecords.length === 6) {
      Promise.resolve(this._handler.setKeyValueRecords.bind(this._handler)(
        args.key,
        args.value,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_setKeyValueRecords_result({success: result});
        output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_setKeyValueRecords_result(err);
          output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.setKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_setKeyValueRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_reconcileKeyRecordValues (seqid, input, output) {
    const args = new ConcourseService_reconcileKeyRecordValues_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.reconcileKeyRecordValues.length === 6) {
      Promise.resolve(this._handler.reconcileKeyRecordValues.bind(this._handler)(
        args.key,
        args.record,
        args.values,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_reconcileKeyRecordValues_result({success: result});
        output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_reconcileKeyRecordValues_result(err);
          output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.reconcileKeyRecordValues(args.key, args.record, args.values, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_reconcileKeyRecordValues_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_inventory (seqid, input, output) {
    const args = new ConcourseService_inventory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.inventory.length === 3) {
      Promise.resolve(this._handler.inventory.bind(this._handler)(
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_inventory_result({success: result});
        output.writeMessageBegin("inventory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_inventory_result(err);
          output.writeMessageBegin("inventory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inventory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.inventory(args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_inventory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("inventory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inventory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectRecord (seqid, input, output) {
    const args = new ConcourseService_selectRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecord.length === 4) {
      Promise.resolve(this._handler.selectRecord.bind(this._handler)(
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectRecord_result({success: result});
        output.writeMessageBegin("selectRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectRecord_result(err);
          output.writeMessageBegin("selectRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectRecord(args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectRecords (seqid, input, output) {
    const args = new ConcourseService_selectRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecords.length === 4) {
      Promise.resolve(this._handler.selectRecords.bind(this._handler)(
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectRecords_result({success: result});
        output.writeMessageBegin("selectRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectRecords_result(err);
          output.writeMessageBegin("selectRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectRecords(args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectRecordTime (seqid, input, output) {
    const args = new ConcourseService_selectRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecordTime.length === 5) {
      Promise.resolve(this._handler.selectRecordTime.bind(this._handler)(
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectRecordTime_result({success: result});
        output.writeMessageBegin("selectRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectRecordTime_result(err);
          output.writeMessageBegin("selectRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectRecordTime(args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_selectRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecordTimestr.length === 5) {
      Promise.resolve(this._handler.selectRecordTimestr.bind(this._handler)(
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectRecordTimestr_result({success: result});
        output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectRecordTimestr_result(err);
          output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectRecordTimestr(args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectRecordsTime (seqid, input, output) {
    const args = new ConcourseService_selectRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecordsTime.length === 5) {
      Promise.resolve(this._handler.selectRecordsTime.bind(this._handler)(
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectRecordsTime_result({success: result});
        output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectRecordsTime_result(err);
          output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectRecordsTime(args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_selectRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecordsTimestr.length === 5) {
      Promise.resolve(this._handler.selectRecordsTimestr.bind(this._handler)(
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectRecordsTimestr_result({success: result});
        output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectRecordsTimestr_result(err);
          output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectRecordsTimestr(args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyRecord (seqid, input, output) {
    const args = new ConcourseService_selectKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecord.length === 5) {
      Promise.resolve(this._handler.selectKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyRecord_result({success: result});
        output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyRecord_result(err);
          output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_selectKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.selectKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyRecordTime_result({success: result});
        output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyRecordTime_result(err);
          output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_selectKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.selectKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyRecordTimestr_result(err);
          output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysRecord (seqid, input, output) {
    const args = new ConcourseService_selectKeysRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecord.length === 5) {
      Promise.resolve(this._handler.selectKeysRecord.bind(this._handler)(
        args.keys,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysRecord_result({success: result});
        output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysRecord_result(err);
          output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysRecordTime (seqid, input, output) {
    const args = new ConcourseService_selectKeysRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecordTime.length === 6) {
      Promise.resolve(this._handler.selectKeysRecordTime.bind(this._handler)(
        args.keys,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysRecordTime_result({success: result});
        output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysRecordTime_result(err);
          output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_selectKeysRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecordTimestr.length === 6) {
      Promise.resolve(this._handler.selectKeysRecordTimestr.bind(this._handler)(
        args.keys,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysRecordTimestr_result({success: result});
        output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysRecordTimestr_result(err);
          output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysRecords (seqid, input, output) {
    const args = new ConcourseService_selectKeysRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecords.length === 5) {
      Promise.resolve(this._handler.selectKeysRecords.bind(this._handler)(
        args.keys,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysRecords_result({success: result});
        output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysRecords_result(err);
          output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyRecords (seqid, input, output) {
    const args = new ConcourseService_selectKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecords.length === 5) {
      Promise.resolve(this._handler.selectKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyRecords_result({success: result});
        output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyRecords_result(err);
          output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_selectKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.selectKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyRecordsTime_result({success: result});
        output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyRecordsTime_result(err);
          output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_selectKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.selectKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyRecordsTimestr_result(err);
          output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysRecordsTime (seqid, input, output) {
    const args = new ConcourseService_selectKeysRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecordsTime.length === 6) {
      Promise.resolve(this._handler.selectKeysRecordsTime.bind(this._handler)(
        args.keys,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysRecordsTime_result({success: result});
        output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysRecordsTime_result(err);
          output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_selectKeysRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.selectKeysRecordsTimestr.bind(this._handler)(
        args.keys,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysRecordsTimestr_result({success: result});
        output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysRecordsTimestr_result(err);
          output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectCriteria (seqid, input, output) {
    const args = new ConcourseService_selectCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCriteria.length === 4) {
      Promise.resolve(this._handler.selectCriteria.bind(this._handler)(
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectCriteria_result({success: result});
        output.writeMessageBegin("selectCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectCriteria_result(err);
          output.writeMessageBegin("selectCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectCriteria(args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectCcl (seqid, input, output) {
    const args = new ConcourseService_selectCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCcl.length === 4) {
      Promise.resolve(this._handler.selectCcl.bind(this._handler)(
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectCcl_result({success: result});
        output.writeMessageBegin("selectCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectCcl_result(err);
          output.writeMessageBegin("selectCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectCcl(args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_selectCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCriteriaTime.length === 5) {
      Promise.resolve(this._handler.selectCriteriaTime.bind(this._handler)(
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectCriteriaTime_result({success: result});
        output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectCriteriaTime_result(err);
          output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectCriteriaTime(args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_selectCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCriteriaTimestr.length === 5) {
      Promise.resolve(this._handler.selectCriteriaTimestr.bind(this._handler)(
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectCriteriaTimestr_result({success: result});
        output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectCriteriaTimestr_result(err);
          output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectCriteriaTimestr(args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectCclTime (seqid, input, output) {
    const args = new ConcourseService_selectCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCclTime.length === 5) {
      Promise.resolve(this._handler.selectCclTime.bind(this._handler)(
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectCclTime_result({success: result});
        output.writeMessageBegin("selectCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectCclTime_result(err);
          output.writeMessageBegin("selectCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectCclTime(args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectCclTimestr (seqid, input, output) {
    const args = new ConcourseService_selectCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCclTimestr.length === 5) {
      Promise.resolve(this._handler.selectCclTimestr.bind(this._handler)(
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectCclTimestr_result({success: result});
        output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectCclTimestr_result(err);
          output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectCclTimestr(args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyCriteria (seqid, input, output) {
    const args = new ConcourseService_selectKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCriteria.length === 5) {
      Promise.resolve(this._handler.selectKeyCriteria.bind(this._handler)(
        args.key,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyCriteria_result({success: result});
        output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyCriteria_result(err);
          output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyCcl (seqid, input, output) {
    const args = new ConcourseService_selectKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCcl.length === 5) {
      Promise.resolve(this._handler.selectKeyCcl.bind(this._handler)(
        args.key,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyCcl_result({success: result});
        output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyCcl_result(err);
          output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_selectKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCriteriaTime.length === 6) {
      Promise.resolve(this._handler.selectKeyCriteriaTime.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyCriteriaTime_result({success: result});
        output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyCriteriaTime_result(err);
          output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_selectKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.selectKeyCriteriaTimestr.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyCriteriaTimestr_result({success: result});
        output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyCriteriaTimestr_result(err);
          output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyCclTime (seqid, input, output) {
    const args = new ConcourseService_selectKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCclTime.length === 6) {
      Promise.resolve(this._handler.selectKeyCclTime.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyCclTime_result({success: result});
        output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyCclTime_result(err);
          output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeyCclTimestr (seqid, input, output) {
    const args = new ConcourseService_selectKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCclTimestr.length === 6) {
      Promise.resolve(this._handler.selectKeyCclTimestr.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeyCclTimestr_result({success: result});
        output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeyCclTimestr_result(err);
          output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeyCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysCriteria (seqid, input, output) {
    const args = new ConcourseService_selectKeysCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCriteria.length === 5) {
      Promise.resolve(this._handler.selectKeysCriteria.bind(this._handler)(
        args.keys,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysCriteria_result({success: result});
        output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysCriteria_result(err);
          output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysCcl (seqid, input, output) {
    const args = new ConcourseService_selectKeysCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCcl.length === 5) {
      Promise.resolve(this._handler.selectKeysCcl.bind(this._handler)(
        args.keys,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysCcl_result({success: result});
        output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysCcl_result(err);
          output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_selectKeysCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCriteriaTime.length === 6) {
      Promise.resolve(this._handler.selectKeysCriteriaTime.bind(this._handler)(
        args.keys,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysCriteriaTime_result({success: result});
        output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysCriteriaTime_result(err);
          output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_selectKeysCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.selectKeysCriteriaTimestr.bind(this._handler)(
        args.keys,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysCriteriaTimestr_result({success: result});
        output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysCriteriaTimestr_result(err);
          output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysCriteriaTimestr(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysCclTime (seqid, input, output) {
    const args = new ConcourseService_selectKeysCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCclTime.length === 6) {
      Promise.resolve(this._handler.selectKeysCclTime.bind(this._handler)(
        args.keys,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysCclTime_result({success: result});
        output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysCclTime_result(err);
          output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_selectKeysCclTimestr (seqid, input, output) {
    const args = new ConcourseService_selectKeysCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCclTimestr.length === 6) {
      Promise.resolve(this._handler.selectKeysCclTimestr.bind(this._handler)(
        args.keys,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_selectKeysCclTimestr_result({success: result});
        output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_selectKeysCclTimestr_result(err);
          output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.selectKeysCclTimestr(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_selectKeysCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyRecord (seqid, input, output) {
    const args = new ConcourseService_getKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecord.length === 5) {
      Promise.resolve(this._handler.getKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyRecord_result({success: result});
        output.writeMessageBegin("getKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyRecord_result(err);
          output.writeMessageBegin("getKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_getKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.getKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyRecordTime_result({success: result});
        output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyRecordTime_result(err);
          output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_getKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.getKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyRecordTimestr_result(err);
          output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysRecord (seqid, input, output) {
    const args = new ConcourseService_getKeysRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecord.length === 5) {
      Promise.resolve(this._handler.getKeysRecord.bind(this._handler)(
        args.keys,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysRecord_result({success: result});
        output.writeMessageBegin("getKeysRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysRecord_result(err);
          output.writeMessageBegin("getKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysRecordTime (seqid, input, output) {
    const args = new ConcourseService_getKeysRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecordTime.length === 6) {
      Promise.resolve(this._handler.getKeysRecordTime.bind(this._handler)(
        args.keys,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysRecordTime_result({success: result});
        output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysRecordTime_result(err);
          output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_getKeysRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecordTimestr.length === 6) {
      Promise.resolve(this._handler.getKeysRecordTimestr.bind(this._handler)(
        args.keys,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysRecordTimestr_result({success: result});
        output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysRecordTimestr_result(err);
          output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysRecords (seqid, input, output) {
    const args = new ConcourseService_getKeysRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecords.length === 5) {
      Promise.resolve(this._handler.getKeysRecords.bind(this._handler)(
        args.keys,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysRecords_result({success: result});
        output.writeMessageBegin("getKeysRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysRecords_result(err);
          output.writeMessageBegin("getKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyRecords (seqid, input, output) {
    const args = new ConcourseService_getKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecords.length === 5) {
      Promise.resolve(this._handler.getKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyRecords_result({success: result});
        output.writeMessageBegin("getKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyRecords_result(err);
          output.writeMessageBegin("getKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_getKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.getKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyRecordsTime_result({success: result});
        output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyRecordsTime_result(err);
          output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_getKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.getKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyRecordsTimestr_result(err);
          output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysRecordsTime (seqid, input, output) {
    const args = new ConcourseService_getKeysRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecordsTime.length === 6) {
      Promise.resolve(this._handler.getKeysRecordsTime.bind(this._handler)(
        args.keys,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysRecordsTime_result({success: result});
        output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysRecordsTime_result(err);
          output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_getKeysRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.getKeysRecordsTimestr.bind(this._handler)(
        args.keys,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysRecordsTimestr_result({success: result});
        output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysRecordsTimestr_result(err);
          output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyCriteria (seqid, input, output) {
    const args = new ConcourseService_getKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCriteria.length === 5) {
      Promise.resolve(this._handler.getKeyCriteria.bind(this._handler)(
        args.key,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyCriteria_result({success: result});
        output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyCriteria_result(err);
          output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCriteria (seqid, input, output) {
    const args = new ConcourseService_getCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCriteria.length === 4) {
      Promise.resolve(this._handler.getCriteria.bind(this._handler)(
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getCriteria_result({success: result});
        output.writeMessageBegin("getCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getCriteria_result(err);
          output.writeMessageBegin("getCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCriteria(args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCcl (seqid, input, output) {
    const args = new ConcourseService_getCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCcl.length === 4) {
      Promise.resolve(this._handler.getCcl.bind(this._handler)(
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getCcl_result({success: result});
        output.writeMessageBegin("getCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getCcl_result(err);
          output.writeMessageBegin("getCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCcl(args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_getCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCriteriaTime.length === 5) {
      Promise.resolve(this._handler.getCriteriaTime.bind(this._handler)(
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getCriteriaTime_result({success: result});
        output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getCriteriaTime_result(err);
          output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCriteriaTime(args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_getCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCriteriaTimestr.length === 5) {
      Promise.resolve(this._handler.getCriteriaTimestr.bind(this._handler)(
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getCriteriaTimestr_result({success: result});
        output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getCriteriaTimestr_result(err);
          output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCriteriaTimestr(args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCclTime (seqid, input, output) {
    const args = new ConcourseService_getCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCclTime.length === 5) {
      Promise.resolve(this._handler.getCclTime.bind(this._handler)(
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getCclTime_result({success: result});
        output.writeMessageBegin("getCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getCclTime_result(err);
          output.writeMessageBegin("getCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCclTime(args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCclTimestr (seqid, input, output) {
    const args = new ConcourseService_getCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCclTimestr.length === 5) {
      Promise.resolve(this._handler.getCclTimestr.bind(this._handler)(
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getCclTimestr_result({success: result});
        output.writeMessageBegin("getCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getCclTimestr_result(err);
          output.writeMessageBegin("getCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCclTimestr(args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyCcl (seqid, input, output) {
    const args = new ConcourseService_getKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCcl.length === 5) {
      Promise.resolve(this._handler.getKeyCcl.bind(this._handler)(
        args.key,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyCcl_result({success: result});
        output.writeMessageBegin("getKeyCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyCcl_result(err);
          output.writeMessageBegin("getKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_getKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCriteriaTime.length === 6) {
      Promise.resolve(this._handler.getKeyCriteriaTime.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyCriteriaTime_result({success: result});
        output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyCriteriaTime_result(err);
          output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_getKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.getKeyCriteriaTimestr.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyCriteriaTimestr_result({success: result});
        output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyCriteriaTimestr_result(err);
          output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyCclTime (seqid, input, output) {
    const args = new ConcourseService_getKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCclTime.length === 6) {
      Promise.resolve(this._handler.getKeyCclTime.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyCclTime_result({success: result});
        output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyCclTime_result(err);
          output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeyCclTimestr (seqid, input, output) {
    const args = new ConcourseService_getKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCclTimestr.length === 6) {
      Promise.resolve(this._handler.getKeyCclTimestr.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeyCclTimestr_result({success: result});
        output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeyCclTimestr_result(err);
          output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeyCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysCriteria (seqid, input, output) {
    const args = new ConcourseService_getKeysCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCriteria.length === 5) {
      Promise.resolve(this._handler.getKeysCriteria.bind(this._handler)(
        args.keys,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysCriteria_result({success: result});
        output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysCriteria_result(err);
          output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysCcl (seqid, input, output) {
    const args = new ConcourseService_getKeysCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCcl.length === 5) {
      Promise.resolve(this._handler.getKeysCcl.bind(this._handler)(
        args.keys,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysCcl_result({success: result});
        output.writeMessageBegin("getKeysCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysCcl_result(err);
          output.writeMessageBegin("getKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_getKeysCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCriteriaTime.length === 6) {
      Promise.resolve(this._handler.getKeysCriteriaTime.bind(this._handler)(
        args.keys,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysCriteriaTime_result({success: result});
        output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysCriteriaTime_result(err);
          output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_getKeysCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.getKeysCriteriaTimestr.bind(this._handler)(
        args.keys,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysCriteriaTimestr_result({success: result});
        output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysCriteriaTimestr_result(err);
          output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysCriteriaTimestr(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysCclTime (seqid, input, output) {
    const args = new ConcourseService_getKeysCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCclTime.length === 6) {
      Promise.resolve(this._handler.getKeysCclTime.bind(this._handler)(
        args.keys,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysCclTime_result({success: result});
        output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysCclTime_result(err);
          output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getKeysCclTimestr (seqid, input, output) {
    const args = new ConcourseService_getKeysCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCclTimestr.length === 6) {
      Promise.resolve(this._handler.getKeysCclTimestr.bind(this._handler)(
        args.keys,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getKeysCclTimestr_result({success: result});
        output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getKeysCclTimestr_result(err);
          output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getKeysCclTimestr(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getKeysCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_verifyKeyValueRecord (seqid, input, output) {
    const args = new ConcourseService_verifyKeyValueRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyKeyValueRecord.length === 6) {
      Promise.resolve(this._handler.verifyKeyValueRecord.bind(this._handler)(
        args.key,
        args.value,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_verifyKeyValueRecord_result({success: result});
        output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_verifyKeyValueRecord_result(err);
          output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.verifyKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_verifyKeyValueRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_verifyKeyValueRecordTime (seqid, input, output) {
    const args = new ConcourseService_verifyKeyValueRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyKeyValueRecordTime.length === 7) {
      Promise.resolve(this._handler.verifyKeyValueRecordTime.bind(this._handler)(
        args.key,
        args.value,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_verifyKeyValueRecordTime_result({success: result});
        output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_verifyKeyValueRecordTime_result(err);
          output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.verifyKeyValueRecordTime(args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_verifyKeyValueRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_verifyKeyValueRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_verifyKeyValueRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyKeyValueRecordTimestr.length === 7) {
      Promise.resolve(this._handler.verifyKeyValueRecordTimestr.bind(this._handler)(
        args.key,
        args.value,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_verifyKeyValueRecordTimestr_result({success: result});
        output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_verifyKeyValueRecordTimestr_result(err);
          output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.verifyKeyValueRecordTimestr(args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_verifyKeyValueRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_jsonifyRecords (seqid, input, output) {
    const args = new ConcourseService_jsonifyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.jsonifyRecords.length === 5) {
      Promise.resolve(this._handler.jsonifyRecords.bind(this._handler)(
        args.records,
        args.identifier,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_jsonifyRecords_result({success: result});
        output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_jsonifyRecords_result(err);
          output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.jsonifyRecords(args.records, args.identifier, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_jsonifyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_jsonifyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_jsonifyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.jsonifyRecordsTime.length === 6) {
      Promise.resolve(this._handler.jsonifyRecordsTime.bind(this._handler)(
        args.records,
        args.timestamp,
        args.identifier,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_jsonifyRecordsTime_result({success: result});
        output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_jsonifyRecordsTime_result(err);
          output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.jsonifyRecordsTime(args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_jsonifyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_jsonifyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_jsonifyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.jsonifyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.jsonifyRecordsTimestr.bind(this._handler)(
        args.records,
        args.timestamp,
        args.identifier,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_jsonifyRecordsTimestr_result({success: result});
        output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_jsonifyRecordsTimestr_result(err);
          output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.jsonifyRecordsTimestr(args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_jsonifyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findCriteria (seqid, input, output) {
    const args = new ConcourseService_findCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findCriteria.length === 4) {
      Promise.resolve(this._handler.findCriteria.bind(this._handler)(
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findCriteria_result({success: result});
        output.writeMessageBegin("findCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findCriteria_result(err);
          output.writeMessageBegin("findCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findCriteria(args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findCcl (seqid, input, output) {
    const args = new ConcourseService_findCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findCcl.length === 4) {
      Promise.resolve(this._handler.findCcl.bind(this._handler)(
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findCcl_result({success: result});
        output.writeMessageBegin("findCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findCcl_result(err);
          output.writeMessageBegin("findCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findCcl(args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findKeyOperatorValues (seqid, input, output) {
    const args = new ConcourseService_findKeyOperatorValues_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorValues.length === 6) {
      Promise.resolve(this._handler.findKeyOperatorValues.bind(this._handler)(
        args.key,
        args.operator,
        args.values,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findKeyOperatorValues_result({success: result});
        output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findKeyOperatorValues_result(err);
          output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findKeyOperatorValues(args.key, args.operator, args.values, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findKeyOperatorValues_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findKeyOperatorValuesTime (seqid, input, output) {
    const args = new ConcourseService_findKeyOperatorValuesTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorValuesTime.length === 7) {
      Promise.resolve(this._handler.findKeyOperatorValuesTime.bind(this._handler)(
        args.key,
        args.operator,
        args.values,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findKeyOperatorValuesTime_result({success: result});
        output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findKeyOperatorValuesTime_result(err);
          output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findKeyOperatorValuesTime(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findKeyOperatorValuesTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findKeyOperatorValuesTimestr (seqid, input, output) {
    const args = new ConcourseService_findKeyOperatorValuesTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorValuesTimestr.length === 7) {
      Promise.resolve(this._handler.findKeyOperatorValuesTimestr.bind(this._handler)(
        args.key,
        args.operator,
        args.values,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findKeyOperatorValuesTimestr_result({success: result});
        output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findKeyOperatorValuesTimestr_result(err);
          output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findKeyOperatorValuesTimestr(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findKeyOperatorValuesTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findKeyOperatorstrValues (seqid, input, output) {
    const args = new ConcourseService_findKeyOperatorstrValues_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorstrValues.length === 6) {
      Promise.resolve(this._handler.findKeyOperatorstrValues.bind(this._handler)(
        args.key,
        args.operator,
        args.values,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findKeyOperatorstrValues_result({success: result});
        output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findKeyOperatorstrValues_result(err);
          output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findKeyOperatorstrValues(args.key, args.operator, args.values, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findKeyOperatorstrValues_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findKeyOperatorstrValuesTime (seqid, input, output) {
    const args = new ConcourseService_findKeyOperatorstrValuesTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorstrValuesTime.length === 7) {
      Promise.resolve(this._handler.findKeyOperatorstrValuesTime.bind(this._handler)(
        args.key,
        args.operator,
        args.values,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findKeyOperatorstrValuesTime_result({success: result});
        output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findKeyOperatorstrValuesTime_result(err);
          output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findKeyOperatorstrValuesTime(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findKeyOperatorstrValuesTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findKeyOperatorstrValuesTimestr (seqid, input, output) {
    const args = new ConcourseService_findKeyOperatorstrValuesTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorstrValuesTimestr.length === 7) {
      Promise.resolve(this._handler.findKeyOperatorstrValuesTimestr.bind(this._handler)(
        args.key,
        args.operator,
        args.values,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findKeyOperatorstrValuesTimestr_result({success: result});
        output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findKeyOperatorstrValuesTimestr_result(err);
          output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findKeyOperatorstrValuesTimestr(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findKeyOperatorstrValuesTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_search (seqid, input, output) {
    const args = new ConcourseService_search_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.search.length === 5) {
      Promise.resolve(this._handler.search.bind(this._handler)(
        args.key,
        args.query,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_search_result({success: result});
        output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_search_result(err);
          output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("search", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.search(args.key, args.query, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_search_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("search", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_revertKeysRecordsTime (seqid, input, output) {
    const args = new ConcourseService_revertKeysRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeysRecordsTime.length === 6) {
      Promise.resolve(this._handler.revertKeysRecordsTime.bind(this._handler)(
        args.keys,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_revertKeysRecordsTime_result({success: result});
        output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_revertKeysRecordsTime_result(err);
          output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.revertKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_revertKeysRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_revertKeysRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_revertKeysRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeysRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.revertKeysRecordsTimestr.bind(this._handler)(
        args.keys,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_revertKeysRecordsTimestr_result({success: result});
        output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_revertKeysRecordsTimestr_result(err);
          output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.revertKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_revertKeysRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_revertKeysRecordTime (seqid, input, output) {
    const args = new ConcourseService_revertKeysRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeysRecordTime.length === 6) {
      Promise.resolve(this._handler.revertKeysRecordTime.bind(this._handler)(
        args.keys,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_revertKeysRecordTime_result({success: result});
        output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_revertKeysRecordTime_result(err);
          output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.revertKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_revertKeysRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_revertKeysRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_revertKeysRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeysRecordTimestr.length === 6) {
      Promise.resolve(this._handler.revertKeysRecordTimestr.bind(this._handler)(
        args.keys,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_revertKeysRecordTimestr_result({success: result});
        output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_revertKeysRecordTimestr_result(err);
          output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.revertKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_revertKeysRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_revertKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_revertKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.revertKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_revertKeyRecordsTime_result({success: result});
        output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_revertKeyRecordsTime_result(err);
          output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.revertKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_revertKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_revertKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_revertKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.revertKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_revertKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_revertKeyRecordsTimestr_result(err);
          output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.revertKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_revertKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_revertKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_revertKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.revertKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_revertKeyRecordTime_result({success: result});
        output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_revertKeyRecordTime_result(err);
          output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.revertKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_revertKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_revertKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_revertKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.revertKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_revertKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_revertKeyRecordTimestr_result(err);
          output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.revertKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_revertKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_pingRecords (seqid, input, output) {
    const args = new ConcourseService_pingRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.pingRecords.length === 4) {
      Promise.resolve(this._handler.pingRecords.bind(this._handler)(
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_pingRecords_result({success: result});
        output.writeMessageBegin("pingRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_pingRecords_result(err);
          output.writeMessageBegin("pingRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pingRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.pingRecords(args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_pingRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("pingRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pingRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_pingRecord (seqid, input, output) {
    const args = new ConcourseService_pingRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.pingRecord.length === 4) {
      Promise.resolve(this._handler.pingRecord.bind(this._handler)(
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_pingRecord_result({success: result});
        output.writeMessageBegin("pingRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_pingRecord_result(err);
          output.writeMessageBegin("pingRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pingRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.pingRecord(args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_pingRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("pingRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pingRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_verifyAndSwap (seqid, input, output) {
    const args = new ConcourseService_verifyAndSwap_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyAndSwap.length === 7) {
      Promise.resolve(this._handler.verifyAndSwap.bind(this._handler)(
        args.key,
        args.expected,
        args.record,
        args.replacement,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_verifyAndSwap_result({success: result});
        output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_verifyAndSwap_result(err);
          output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.verifyAndSwap(args.key, args.expected, args.record, args.replacement, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_verifyAndSwap_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_verifyOrSet (seqid, input, output) {
    const args = new ConcourseService_verifyOrSet_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyOrSet.length === 6) {
      Promise.resolve(this._handler.verifyOrSet.bind(this._handler)(
        args.key,
        args.value,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_verifyOrSet_result({success: result});
        output.writeMessageBegin("verifyOrSet", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_verifyOrSet_result(err);
          output.writeMessageBegin("verifyOrSet", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyOrSet", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.verifyOrSet(args.key, args.value, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_verifyOrSet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("verifyOrSet", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyOrSet", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findOrAddKeyValue (seqid, input, output) {
    const args = new ConcourseService_findOrAddKeyValue_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findOrAddKeyValue.length === 5) {
      Promise.resolve(this._handler.findOrAddKeyValue.bind(this._handler)(
        args.key,
        args.value,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findOrAddKeyValue_result({success: result});
        output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findOrAddKeyValue_result(err);
          output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findOrAddKeyValue(args.key, args.value, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findOrAddKeyValue_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findOrInsertCriteriaJson (seqid, input, output) {
    const args = new ConcourseService_findOrInsertCriteriaJson_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findOrInsertCriteriaJson.length === 5) {
      Promise.resolve(this._handler.findOrInsertCriteriaJson.bind(this._handler)(
        args.criteria,
        args.json,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findOrInsertCriteriaJson_result({success: result});
        output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findOrInsertCriteriaJson_result(err);
          output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findOrInsertCriteriaJson(args.criteria, args.json, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findOrInsertCriteriaJson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findOrInsertCclJson (seqid, input, output) {
    const args = new ConcourseService_findOrInsertCclJson_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findOrInsertCclJson.length === 5) {
      Promise.resolve(this._handler.findOrInsertCclJson.bind(this._handler)(
        args.ccl,
        args.json,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_findOrInsertCclJson_result({success: result});
        output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_findOrInsertCclJson_result(err);
          output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findOrInsertCclJson(args.ccl, args.json, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_findOrInsertCclJson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyRecord (seqid, input, output) {
    const args = new ConcourseService_sumKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecord.length === 5) {
      Promise.resolve(this._handler.sumKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyRecord_result({success: result});
        output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyRecord_result(err);
          output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_sumKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.sumKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyRecordTime_result({success: result});
        output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyRecordTime_result(err);
          output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_sumKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.sumKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyRecordTimestr_result(err);
          output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyRecords (seqid, input, output) {
    const args = new ConcourseService_sumKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecords.length === 5) {
      Promise.resolve(this._handler.sumKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyRecords_result({success: result});
        output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyRecords_result(err);
          output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_sumKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.sumKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyRecordsTime_result({success: result});
        output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyRecordsTime_result(err);
          output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_sumKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.sumKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyRecordsTimestr_result(err);
          output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKey (seqid, input, output) {
    const args = new ConcourseService_sumKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKey.length === 4) {
      Promise.resolve(this._handler.sumKey.bind(this._handler)(
        args.key,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKey_result({success: result});
        output.writeMessageBegin("sumKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKey_result(err);
          output.writeMessageBegin("sumKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKey(args.key, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyTime (seqid, input, output) {
    const args = new ConcourseService_sumKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyTime.length === 5) {
      Promise.resolve(this._handler.sumKeyTime.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyTime_result({success: result});
        output.writeMessageBegin("sumKeyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyTime_result(err);
          output.writeMessageBegin("sumKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyTimestr (seqid, input, output) {
    const args = new ConcourseService_sumKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyTimestr.length === 5) {
      Promise.resolve(this._handler.sumKeyTimestr.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyTimestr_result({success: result});
        output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyTimestr_result(err);
          output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyCriteria (seqid, input, output) {
    const args = new ConcourseService_sumKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCriteria.length === 5) {
      Promise.resolve(this._handler.sumKeyCriteria.bind(this._handler)(
        args.key,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyCriteria_result({success: result});
        output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyCriteria_result(err);
          output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_sumKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCriteriaTime.length === 6) {
      Promise.resolve(this._handler.sumKeyCriteriaTime.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyCriteriaTime_result({success: result});
        output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyCriteriaTime_result(err);
          output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_sumKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.sumKeyCriteriaTimestr.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyCriteriaTimestr_result({success: result});
        output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyCriteriaTimestr_result(err);
          output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyCcl (seqid, input, output) {
    const args = new ConcourseService_sumKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCcl.length === 5) {
      Promise.resolve(this._handler.sumKeyCcl.bind(this._handler)(
        args.key,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyCcl_result({success: result});
        output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyCcl_result(err);
          output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyCclTime (seqid, input, output) {
    const args = new ConcourseService_sumKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCclTime.length === 6) {
      Promise.resolve(this._handler.sumKeyCclTime.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyCclTime_result({success: result});
        output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyCclTime_result(err);
          output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sumKeyCclTimestr (seqid, input, output) {
    const args = new ConcourseService_sumKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCclTimestr.length === 6) {
      Promise.resolve(this._handler.sumKeyCclTimestr.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_sumKeyCclTimestr_result({success: result});
        output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_sumKeyCclTimestr_result(err);
          output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sumKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_sumKeyCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyRecord (seqid, input, output) {
    const args = new ConcourseService_averageKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecord.length === 5) {
      Promise.resolve(this._handler.averageKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyRecord_result({success: result});
        output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyRecord_result(err);
          output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_averageKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.averageKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyRecordTime_result({success: result});
        output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyRecordTime_result(err);
          output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_averageKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.averageKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyRecordTimestr_result(err);
          output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyRecords (seqid, input, output) {
    const args = new ConcourseService_averageKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecords.length === 5) {
      Promise.resolve(this._handler.averageKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyRecords_result({success: result});
        output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyRecords_result(err);
          output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_averageKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.averageKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyRecordsTime_result({success: result});
        output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyRecordsTime_result(err);
          output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_averageKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.averageKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyRecordsTimestr_result(err);
          output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKey (seqid, input, output) {
    const args = new ConcourseService_averageKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKey.length === 4) {
      Promise.resolve(this._handler.averageKey.bind(this._handler)(
        args.key,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKey_result({success: result});
        output.writeMessageBegin("averageKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKey_result(err);
          output.writeMessageBegin("averageKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKey(args.key, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyTime (seqid, input, output) {
    const args = new ConcourseService_averageKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyTime.length === 5) {
      Promise.resolve(this._handler.averageKeyTime.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyTime_result({success: result});
        output.writeMessageBegin("averageKeyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyTime_result(err);
          output.writeMessageBegin("averageKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyTimestr (seqid, input, output) {
    const args = new ConcourseService_averageKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyTimestr.length === 5) {
      Promise.resolve(this._handler.averageKeyTimestr.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyTimestr_result({success: result});
        output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyTimestr_result(err);
          output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyCriteria (seqid, input, output) {
    const args = new ConcourseService_averageKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCriteria.length === 5) {
      Promise.resolve(this._handler.averageKeyCriteria.bind(this._handler)(
        args.key,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyCriteria_result({success: result});
        output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyCriteria_result(err);
          output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_averageKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCriteriaTime.length === 6) {
      Promise.resolve(this._handler.averageKeyCriteriaTime.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyCriteriaTime_result({success: result});
        output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyCriteriaTime_result(err);
          output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_averageKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.averageKeyCriteriaTimestr.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyCriteriaTimestr_result({success: result});
        output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyCriteriaTimestr_result(err);
          output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyCcl (seqid, input, output) {
    const args = new ConcourseService_averageKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCcl.length === 5) {
      Promise.resolve(this._handler.averageKeyCcl.bind(this._handler)(
        args.key,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyCcl_result({success: result});
        output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyCcl_result(err);
          output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyCclTime (seqid, input, output) {
    const args = new ConcourseService_averageKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCclTime.length === 6) {
      Promise.resolve(this._handler.averageKeyCclTime.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyCclTime_result({success: result});
        output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyCclTime_result(err);
          output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_averageKeyCclTimestr (seqid, input, output) {
    const args = new ConcourseService_averageKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCclTimestr.length === 6) {
      Promise.resolve(this._handler.averageKeyCclTimestr.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_averageKeyCclTimestr_result({success: result});
        output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_averageKeyCclTimestr_result(err);
          output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.averageKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_averageKeyCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyRecord (seqid, input, output) {
    const args = new ConcourseService_countKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecord.length === 5) {
      Promise.resolve(this._handler.countKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyRecord_result({success: result});
        output.writeMessageBegin("countKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyRecord_result(err);
          output.writeMessageBegin("countKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_countKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.countKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyRecordTime_result({success: result});
        output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyRecordTime_result(err);
          output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_countKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.countKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyRecordTimestr_result(err);
          output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyRecords (seqid, input, output) {
    const args = new ConcourseService_countKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecords.length === 5) {
      Promise.resolve(this._handler.countKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyRecords_result({success: result});
        output.writeMessageBegin("countKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyRecords_result(err);
          output.writeMessageBegin("countKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_countKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.countKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyRecordsTime_result({success: result});
        output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyRecordsTime_result(err);
          output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_countKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.countKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyRecordsTimestr_result(err);
          output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKey (seqid, input, output) {
    const args = new ConcourseService_countKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKey.length === 4) {
      Promise.resolve(this._handler.countKey.bind(this._handler)(
        args.key,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKey_result({success: result});
        output.writeMessageBegin("countKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKey_result(err);
          output.writeMessageBegin("countKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKey(args.key, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyTime (seqid, input, output) {
    const args = new ConcourseService_countKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyTime.length === 5) {
      Promise.resolve(this._handler.countKeyTime.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyTime_result({success: result});
        output.writeMessageBegin("countKeyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyTime_result(err);
          output.writeMessageBegin("countKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyTimestr (seqid, input, output) {
    const args = new ConcourseService_countKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyTimestr.length === 5) {
      Promise.resolve(this._handler.countKeyTimestr.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyTimestr_result({success: result});
        output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyTimestr_result(err);
          output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyCriteria (seqid, input, output) {
    const args = new ConcourseService_countKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCriteria.length === 5) {
      Promise.resolve(this._handler.countKeyCriteria.bind(this._handler)(
        args.key,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyCriteria_result({success: result});
        output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyCriteria_result(err);
          output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_countKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCriteriaTime.length === 6) {
      Promise.resolve(this._handler.countKeyCriteriaTime.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyCriteriaTime_result({success: result});
        output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyCriteriaTime_result(err);
          output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_countKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.countKeyCriteriaTimestr.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyCriteriaTimestr_result({success: result});
        output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyCriteriaTimestr_result(err);
          output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyCcl (seqid, input, output) {
    const args = new ConcourseService_countKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCcl.length === 5) {
      Promise.resolve(this._handler.countKeyCcl.bind(this._handler)(
        args.key,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyCcl_result({success: result});
        output.writeMessageBegin("countKeyCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyCcl_result(err);
          output.writeMessageBegin("countKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyCclTime (seqid, input, output) {
    const args = new ConcourseService_countKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCclTime.length === 6) {
      Promise.resolve(this._handler.countKeyCclTime.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyCclTime_result({success: result});
        output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyCclTime_result(err);
          output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_countKeyCclTimestr (seqid, input, output) {
    const args = new ConcourseService_countKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCclTimestr.length === 6) {
      Promise.resolve(this._handler.countKeyCclTimestr.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_countKeyCclTimestr_result({success: result});
        output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_countKeyCclTimestr_result(err);
          output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.countKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_countKeyCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyRecord (seqid, input, output) {
    const args = new ConcourseService_maxKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecord.length === 5) {
      Promise.resolve(this._handler.maxKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyRecord_result({success: result});
        output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyRecord_result(err);
          output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_maxKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.maxKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyRecordTime_result({success: result});
        output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyRecordTime_result(err);
          output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_maxKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.maxKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyRecordTimestr_result(err);
          output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyRecords (seqid, input, output) {
    const args = new ConcourseService_maxKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecords.length === 5) {
      Promise.resolve(this._handler.maxKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyRecords_result({success: result});
        output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyRecords_result(err);
          output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_maxKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.maxKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyRecordsTime_result({success: result});
        output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyRecordsTime_result(err);
          output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_maxKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.maxKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyRecordsTimestr_result(err);
          output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyCriteria (seqid, input, output) {
    const args = new ConcourseService_maxKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCriteria.length === 5) {
      Promise.resolve(this._handler.maxKeyCriteria.bind(this._handler)(
        args.key,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyCriteria_result({success: result});
        output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyCriteria_result(err);
          output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_maxKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCriteriaTime.length === 6) {
      Promise.resolve(this._handler.maxKeyCriteriaTime.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyCriteriaTime_result({success: result});
        output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyCriteriaTime_result(err);
          output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_maxKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.maxKeyCriteriaTimestr.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyCriteriaTimestr_result({success: result});
        output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyCriteriaTimestr_result(err);
          output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyCcl (seqid, input, output) {
    const args = new ConcourseService_maxKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCcl.length === 5) {
      Promise.resolve(this._handler.maxKeyCcl.bind(this._handler)(
        args.key,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyCcl_result({success: result});
        output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyCcl_result(err);
          output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyCclTime (seqid, input, output) {
    const args = new ConcourseService_maxKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCclTime.length === 6) {
      Promise.resolve(this._handler.maxKeyCclTime.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyCclTime_result({success: result});
        output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyCclTime_result(err);
          output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyCclTimestr (seqid, input, output) {
    const args = new ConcourseService_maxKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCclTimestr.length === 6) {
      Promise.resolve(this._handler.maxKeyCclTimestr.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyCclTimestr_result({success: result});
        output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyCclTimestr_result(err);
          output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKey (seqid, input, output) {
    const args = new ConcourseService_maxKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKey.length === 4) {
      Promise.resolve(this._handler.maxKey.bind(this._handler)(
        args.key,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKey_result({success: result});
        output.writeMessageBegin("maxKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKey_result(err);
          output.writeMessageBegin("maxKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKey(args.key, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyTime (seqid, input, output) {
    const args = new ConcourseService_maxKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyTime.length === 5) {
      Promise.resolve(this._handler.maxKeyTime.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyTime_result({success: result});
        output.writeMessageBegin("maxKeyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyTime_result(err);
          output.writeMessageBegin("maxKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_maxKeyTimestr (seqid, input, output) {
    const args = new ConcourseService_maxKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyTimestr.length === 5) {
      Promise.resolve(this._handler.maxKeyTimestr.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_maxKeyTimestr_result({success: result});
        output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_maxKeyTimestr_result(err);
          output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.maxKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_maxKeyTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyRecord (seqid, input, output) {
    const args = new ConcourseService_minKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecord.length === 5) {
      Promise.resolve(this._handler.minKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyRecord_result({success: result});
        output.writeMessageBegin("minKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyRecord_result(err);
          output.writeMessageBegin("minKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_minKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.minKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyRecordTime_result({success: result});
        output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyRecordTime_result(err);
          output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_minKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.minKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyRecordTimestr_result(err);
          output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKey (seqid, input, output) {
    const args = new ConcourseService_minKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKey.length === 4) {
      Promise.resolve(this._handler.minKey.bind(this._handler)(
        args.key,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKey_result({success: result});
        output.writeMessageBegin("minKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKey_result(err);
          output.writeMessageBegin("minKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKey(args.key, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_minKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.minKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyRecordsTime_result({success: result});
        output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyRecordsTime_result(err);
          output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_minKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.minKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyRecordsTimestr_result(err);
          output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyCriteria (seqid, input, output) {
    const args = new ConcourseService_minKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCriteria.length === 5) {
      Promise.resolve(this._handler.minKeyCriteria.bind(this._handler)(
        args.key,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyCriteria_result({success: result});
        output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyCriteria_result(err);
          output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_minKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCriteriaTime.length === 6) {
      Promise.resolve(this._handler.minKeyCriteriaTime.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyCriteriaTime_result({success: result});
        output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyCriteriaTime_result(err);
          output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_minKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.minKeyCriteriaTimestr.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyCriteriaTimestr_result({success: result});
        output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyCriteriaTimestr_result(err);
          output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyCcl (seqid, input, output) {
    const args = new ConcourseService_minKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCcl.length === 5) {
      Promise.resolve(this._handler.minKeyCcl.bind(this._handler)(
        args.key,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyCcl_result({success: result});
        output.writeMessageBegin("minKeyCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyCcl_result(err);
          output.writeMessageBegin("minKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyCclTime (seqid, input, output) {
    const args = new ConcourseService_minKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCclTime.length === 6) {
      Promise.resolve(this._handler.minKeyCclTime.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyCclTime_result({success: result});
        output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyCclTime_result(err);
          output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyCclTimestr (seqid, input, output) {
    const args = new ConcourseService_minKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCclTimestr.length === 6) {
      Promise.resolve(this._handler.minKeyCclTimestr.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyCclTimestr_result({success: result});
        output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyCclTimestr_result(err);
          output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyTime (seqid, input, output) {
    const args = new ConcourseService_minKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyTime.length === 5) {
      Promise.resolve(this._handler.minKeyTime.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyTime_result({success: result});
        output.writeMessageBegin("minKeyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyTime_result(err);
          output.writeMessageBegin("minKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyTimestr (seqid, input, output) {
    const args = new ConcourseService_minKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyTimestr.length === 5) {
      Promise.resolve(this._handler.minKeyTimestr.bind(this._handler)(
        args.key,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyTimestr_result({success: result});
        output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyTimestr_result(err);
          output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_minKeyRecords (seqid, input, output) {
    const args = new ConcourseService_minKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecords.length === 5) {
      Promise.resolve(this._handler.minKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_minKeyRecords_result({success: result});
        output.writeMessageBegin("minKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_minKeyRecords_result(err);
          output.writeMessageBegin("minKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.minKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_minKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("minKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyRecord (seqid, input, output) {
    const args = new ConcourseService_navigateKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecord.length === 5) {
      Promise.resolve(this._handler.navigateKeyRecord.bind(this._handler)(
        args.key,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyRecord_result({success: result});
        output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyRecord_result(err);
          output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyRecordTime (seqid, input, output) {
    const args = new ConcourseService_navigateKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecordTime.length === 6) {
      Promise.resolve(this._handler.navigateKeyRecordTime.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyRecordTime_result({success: result});
        output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyRecordTime_result(err);
          output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_navigateKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecordTimestr.length === 6) {
      Promise.resolve(this._handler.navigateKeyRecordTimestr.bind(this._handler)(
        args.key,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyRecordTimestr_result({success: result});
        output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyRecordTimestr_result(err);
          output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysRecord (seqid, input, output) {
    const args = new ConcourseService_navigateKeysRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecord.length === 5) {
      Promise.resolve(this._handler.navigateKeysRecord.bind(this._handler)(
        args.keys,
        args.record,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysRecord_result({success: result});
        output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysRecord_result(err);
          output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysRecordTime (seqid, input, output) {
    const args = new ConcourseService_navigateKeysRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecordTime.length === 6) {
      Promise.resolve(this._handler.navigateKeysRecordTime.bind(this._handler)(
        args.keys,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysRecordTime_result({success: result});
        output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysRecordTime_result(err);
          output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysRecordTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysRecordTimestr (seqid, input, output) {
    const args = new ConcourseService_navigateKeysRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecordTimestr.length === 6) {
      Promise.resolve(this._handler.navigateKeysRecordTimestr.bind(this._handler)(
        args.keys,
        args.record,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysRecordTimestr_result({success: result});
        output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysRecordTimestr_result(err);
          output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysRecordTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysRecords (seqid, input, output) {
    const args = new ConcourseService_navigateKeysRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecords.length === 5) {
      Promise.resolve(this._handler.navigateKeysRecords.bind(this._handler)(
        args.keys,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysRecords_result({success: result});
        output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysRecords_result(err);
          output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyRecords (seqid, input, output) {
    const args = new ConcourseService_navigateKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecords.length === 5) {
      Promise.resolve(this._handler.navigateKeyRecords.bind(this._handler)(
        args.key,
        args.records,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyRecords_result({success: result});
        output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyRecords_result(err);
          output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyRecords_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyRecordsTime (seqid, input, output) {
    const args = new ConcourseService_navigateKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecordsTime.length === 6) {
      Promise.resolve(this._handler.navigateKeyRecordsTime.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyRecordsTime_result({success: result});
        output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyRecordsTime_result(err);
          output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_navigateKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.navigateKeyRecordsTimestr.bind(this._handler)(
        args.key,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyRecordsTimestr_result({success: result});
        output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyRecordsTimestr_result(err);
          output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysRecordsTime (seqid, input, output) {
    const args = new ConcourseService_navigateKeysRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecordsTime.length === 6) {
      Promise.resolve(this._handler.navigateKeysRecordsTime.bind(this._handler)(
        args.keys,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysRecordsTime_result({success: result});
        output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysRecordsTime_result(err);
          output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysRecordsTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysRecordsTimestr (seqid, input, output) {
    const args = new ConcourseService_navigateKeysRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecordsTimestr.length === 6) {
      Promise.resolve(this._handler.navigateKeysRecordsTimestr.bind(this._handler)(
        args.keys,
        args.records,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysRecordsTimestr_result({success: result});
        output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysRecordsTimestr_result(err);
          output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysRecordsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyCcl (seqid, input, output) {
    const args = new ConcourseService_navigateKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCcl.length === 5) {
      Promise.resolve(this._handler.navigateKeyCcl.bind(this._handler)(
        args.key,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyCcl_result({success: result});
        output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyCcl_result(err);
          output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyCclTime (seqid, input, output) {
    const args = new ConcourseService_navigateKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCclTime.length === 6) {
      Promise.resolve(this._handler.navigateKeyCclTime.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyCclTime_result({success: result});
        output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyCclTime_result(err);
          output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyCclTimestr (seqid, input, output) {
    const args = new ConcourseService_navigateKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCclTimestr.length === 6) {
      Promise.resolve(this._handler.navigateKeyCclTimestr.bind(this._handler)(
        args.key,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyCclTimestr_result({success: result});
        output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyCclTimestr_result(err);
          output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysCcl (seqid, input, output) {
    const args = new ConcourseService_navigateKeysCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCcl.length === 5) {
      Promise.resolve(this._handler.navigateKeysCcl.bind(this._handler)(
        args.keys,
        args.ccl,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysCcl_result({success: result});
        output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysCcl_result(err);
          output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysCcl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysCclTime (seqid, input, output) {
    const args = new ConcourseService_navigateKeysCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCclTime.length === 6) {
      Promise.resolve(this._handler.navigateKeysCclTime.bind(this._handler)(
        args.keys,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysCclTime_result({success: result});
        output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysCclTime_result(err);
          output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysCclTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysCclTimestr (seqid, input, output) {
    const args = new ConcourseService_navigateKeysCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCclTimestr.length === 6) {
      Promise.resolve(this._handler.navigateKeysCclTimestr.bind(this._handler)(
        args.keys,
        args.ccl,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysCclTimestr_result({success: result});
        output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysCclTimestr_result(err);
          output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysCclTimestr(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysCclTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyCriteria (seqid, input, output) {
    const args = new ConcourseService_navigateKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCriteria.length === 5) {
      Promise.resolve(this._handler.navigateKeyCriteria.bind(this._handler)(
        args.key,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyCriteria_result({success: result});
        output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyCriteria_result(err);
          output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_navigateKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCriteriaTime.length === 6) {
      Promise.resolve(this._handler.navigateKeyCriteriaTime.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyCriteriaTime_result({success: result});
        output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyCriteriaTime_result(err);
          output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeyCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_navigateKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.navigateKeyCriteriaTimestr.bind(this._handler)(
        args.key,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeyCriteriaTimestr_result({success: result});
        output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeyCriteriaTimestr_result(err);
          output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeyCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysCriteria (seqid, input, output) {
    const args = new ConcourseService_navigateKeysCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCriteria.length === 5) {
      Promise.resolve(this._handler.navigateKeysCriteria.bind(this._handler)(
        args.keys,
        args.criteria,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysCriteria_result({success: result});
        output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysCriteria_result(err);
          output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysCriteria_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysCriteriaTime (seqid, input, output) {
    const args = new ConcourseService_navigateKeysCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCriteriaTime.length === 6) {
      Promise.resolve(this._handler.navigateKeysCriteriaTime.bind(this._handler)(
        args.keys,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysCriteriaTime_result({success: result});
        output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysCriteriaTime_result(err);
          output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysCriteriaTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_navigateKeysCriteriaTimestr (seqid, input, output) {
    const args = new ConcourseService_navigateKeysCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCriteriaTimestr.length === 6) {
      Promise.resolve(this._handler.navigateKeysCriteriaTimestr.bind(this._handler)(
        args.keys,
        args.criteria,
        args.timestamp,
        args.creds,
        args.transaction,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_navigateKeysCriteriaTimestr_result({success: result});
        output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_navigateKeysCriteriaTimestr_result(err);
          output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.navigateKeysCriteriaTimestr(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_navigateKeysCriteriaTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getServerEnvironment (seqid, input, output) {
    const args = new ConcourseService_getServerEnvironment_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getServerEnvironment.length === 3) {
      Promise.resolve(this._handler.getServerEnvironment.bind(this._handler)(
        args.creds,
        args.token,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_getServerEnvironment_result({success: result});
        output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getServerEnvironment_result(err);
          output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getServerEnvironment(args.creds, args.token, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getServerEnvironment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getServerVersion (seqid, input, output) {
    const args = new ConcourseService_getServerVersion_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getServerVersion.length === 0) {
      Promise.resolve(this._handler.getServerVersion.bind(this._handler)(
      )).then(result => {
        const result_obj = new ConcourseService_getServerVersion_result({success: result});
        output.writeMessageBegin("getServerVersion", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_getServerVersion_result(err);
          output.writeMessageBegin("getServerVersion", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServerVersion", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getServerVersion((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_getServerVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getServerVersion", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServerVersion", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_time (seqid, input, output) {
    const args = new ConcourseService_time_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.time.length === 3) {
      Promise.resolve(this._handler.time.bind(this._handler)(
        args.creds,
        args.token,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_time_result({success: result});
        output.writeMessageBegin("time", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_time_result(err);
          output.writeMessageBegin("time", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("time", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.time(args.creds, args.token, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_time_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("time", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("time", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_timePhrase (seqid, input, output) {
    const args = new ConcourseService_timePhrase_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.timePhrase.length === 4) {
      Promise.resolve(this._handler.timePhrase.bind(this._handler)(
        args.phrase,
        args.creds,
        args.token,
        args.environment
      )).then(result => {
        const result_obj = new ConcourseService_timePhrase_result({success: result});
        output.writeMessageBegin("timePhrase", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result = new ConcourseService_timePhrase_result(err);
          output.writeMessageBegin("timePhrase", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("timePhrase", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.timePhrase(args.phrase, args.creds, args.token, args.environment, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          result_obj = new ConcourseService_timePhrase_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("timePhrase", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("timePhrase", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_invokeManagement (seqid, input, output) {
    const args = new ConcourseService_invokeManagement_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.invokeManagement.length === 3) {
      Promise.resolve(this._handler.invokeManagement.bind(this._handler)(
        args.method,
        args.params,
        args.creds
      )).then(result => {
        const result_obj = new ConcourseService_invokeManagement_result({success: result});
        output.writeMessageBegin("invokeManagement", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.ManagementException) {
          result = new ConcourseService_invokeManagement_result(err);
          output.writeMessageBegin("invokeManagement", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invokeManagement", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.invokeManagement(args.method, args.params, args.creds, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.ManagementException) {
          result_obj = new ConcourseService_invokeManagement_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("invokeManagement", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invokeManagement", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
