<?php
// See https://github.com/jaz303/phake for more information

/**
 * Recursively remove a directory
 *
 * @param  string $dir the path to the directory
 */
function remove_directory($dir) {
    if(!file_exists($dir)){
        return true;
    }
    else if(!is_dir($dir)){
        return unlink($dir);
    }
    foreach(scandir($dir) as $entry){
        if($entry == "." || $entry == ".."){
            continue;
        }
        remove_directory($dir . DIRECTORY_SEPARATOR . $entry);
    }
    rmdir($dir);
}

/**
 * Recursively check the syntax of all the PHP files in a directory.
 *
 * @param  string $dir the absolute path to the directory
 * throws Exception if a file has invalid syntax
 */
function check_php_syntax($dir) {
    foreach(scandir($dir) as $entry) {
        if($entry == "." || $entry == ".." || in_array($entry, array('vendor'))){
            continue;
        }
        else {
            $entry = $dir . DIRECTORY_SEPARATOR . $entry;
            if(is_dir($entry)){
                check_php_syntax($entry);
            }
            else if(pathinfo($entry)['extension'] == "php"){
                exec("php -l $entry", $output, $status);
                if($status == 0) {
                    echo implode(PHP_EOL, $output).PHP_EOL;
                }
                else {
                    throw new Exception($output[1]);
                }
            }
        }
    }
}

desc("remove all the build files");
task('clean', function(){
    remove_directory("build");
});

desc("Run the unit tests");
task('test', function(){
    system("./vendor/phpunit/phpunit/phpunit cinchapi/concourse/tests/");
});

desc("Generate documentation");
task('docs', function(){
    system('./vendor/apigen/apigen/bin/apigen generate -d build/docs -s cinchapi --exclude=*/thrift/* --exclude=*/tests/* --title="Concourse PHP Driver" --template-theme=bootstrap');
});

desc("Check syntax");
task('check-syntax', function() {
    check_php_syntax(dirname(__FILE__));
});

task('default', 'test');
